<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CA 证书详解</title>
    <url>/2020/04/21/CA%20%E8%AF%81%E4%B9%A6%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><a href="https://blog.csdn.net/lk2684753/article/details/100160856" target="_blank" rel="noopener">博客链接</a></p>
<p>该博客非常详细的讲解了<code>数字证书及CA</code></p>
<h2 id="使用openssl生成https证书"><a href="#使用openssl生成https证书" class="headerlink" title="使用openssl生成https证书"></a>使用openssl生成https证书</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用openssl工具生成一个RSA私钥</span></span><br><span class="line">openssl genrsa -des3 -out server.key 2048</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成CSR（证书签名请求）说明：需要依次输入国家，地区，城市，组织，组织单位，Common Name和Email。其中Common Name，可以写自己的名字或者域名，如果要支持https，Common Name应该与域名保持一致，否则会引起浏览器警告。可以将证书发送给证书颁发机构（CA），CA验证过请求者的身份之后，会出具签名证书，需要花钱。另外，如果只是内部或者测试需求，也可以使用OpenSSL实现自签名。</span></span><br><span class="line">openssl req -new -key server.key -out server.csr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除密钥中的密码，说明：如果不删除密码，在应用加载的时候会出现输入密码进行验证的情况，不方便自动化部署。</span></span><br><span class="line">openssl rsa -<span class="keyword">in</span> server.key -out server.key</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成自签名证书，内部或者测试使用，只要忽略证书提醒就可以了。</span></span><br><span class="line">openssl x509 -req -days 365 -<span class="keyword">in</span> server.csr -signkey server.key -out server.crt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成pem格式的公钥，有些服务，需要有pem格式的证书才能正常加载，可以用下面的命令：</span></span><br><span class="line">openssl x509 -<span class="keyword">in</span> server.crt -out server.pem -outform PEM</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux基础</category>
      </categories>
      <tags>
        <tag>CA</tag>
      </tags>
  </entry>
  <entry>
    <title>ELK部署</title>
    <url>/2019/09/07/Elasticsearch%20+%20Logstash%20+%20filebeat%20+%20redis%20+%20Kibana/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>ELK是Elasticsearch + Logstash + Kibana 这种架构的简写。这是一种日志分平台析的架构。从前我们用shell三剑客(grep, sed, awk)来分析日志, 虽然也能对付大多数场景，但当日志量大，分析频繁，并且使用者可能不会shell三剑客的情况下， 配置方便，使用简单，并且分析结果更加直观的工具(平台)就诞生了，它就是ELK。 ELK是开源的，并且社区活跃，用户众多。 </p>
<h1 id="架构说明"><a href="#架构说明" class="headerlink" title="架构说明"></a>架构说明</h1><p>1 Elasticsearch + Logstash + Kibana<br>这是一种最简单的架构。这种架构，通过logstash收集日志，Elasticsearch分析日志，然后在Kibana(web界面)中展示。这种架构虽然是官网介绍里的方式，但是往往在生产中很少使用。</p>
<p>2 Elasticsearch + Logstash + filebeat + Kibana<br>与上一种架构相比，这种架构增加了一个filebeat模块。filebeat是一个轻量的日志收集代理，用来部署在客户端，优势是消耗非常少的资源(较logstash)， 所以生产中，往往会采取这种架构方式，但是这种架构有一个缺点，当logstash出现故障， 会造成日志的丢失。</p>
<p>3 Elasticsearch + Logstash + filebeat + redis(也可以是其他中间件，比如kafka) + Kibana<br>这种架构是上面那个架构的完善版，通过增加中间件，来避免数据的丢失。当Logstash出现故障，日志还是存在中间件中，当Logstash再次启动，则会读取中间件中积压的日志。目前我司使用的就是这种架构，我个人也比较推荐这种方式。</p>
<h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><h2 id="安装jdk1-8"><a href="#安装jdk1-8" class="headerlink" title="安装jdk1.8"></a>安装jdk1.8</h2><p>elasticsearch、logstash服务都需要jdk环境</p>
<p><a href="https://hxqxiaoqi.gitee.io/2019/06/04/JDK1.8%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85-linux/">跳转 jdk安装教程</a></p>
<h2 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h2><p><a href="https://hxqxiaoqi.gitee.io/2019/09/04/redis-5.0.2%E5%AE%89%E8%A3%85/">跳转 redis安装教程</a></p>
<h2 id="安装elasticsearch"><a href="#安装elasticsearch" class="headerlink" title="安装elasticsearch"></a>安装elasticsearch</h2><p><a href="https://hxqxiaoqi.gitee.io/2019/08/08/elasticsearch-6.6.1%E5%AE%89%E8%A3%85/">跳转 elasticsearch安装教程</a></p>
<h2 id="安装kibana"><a href="#安装kibana" class="headerlink" title="安装kibana"></a>安装kibana</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget https://artifacts.elastic.co/downloads/kibana/kibana-6.6.1-linux-x86_64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar xf kibana-6.6.1-linux-x86_64.tar.gz</span><br><span class="line"><span class="built_in">cd</span> kibana-6.6.1-linux-x86_64</span><br><span class="line"></span><br><span class="line">vim config/kibana.yml</span><br><span class="line"><span class="comment"># 取消以下注释，并修改对应IP</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务端口</span></span><br><span class="line"><span class="string">server.port:</span> <span class="number">5601</span></span><br><span class="line"><span class="comment"># 指明服务运行的地址</span></span><br><span class="line"><span class="string">server.host:</span> <span class="string">"192.168.182.100"</span></span><br><span class="line"><span class="comment"># 指明elasticsearch运行的地址和端口</span></span><br><span class="line"><span class="string">elasticsearch.hosts:</span> <span class="string">["http://192.168.182.100:9200"]</span></span><br><span class="line"><span class="comment"># 指明kibana使用的索引，这个是自定义的</span></span><br><span class="line"><span class="string">kibana.index:</span> <span class="string">".kibana"</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动，如果elasticsearch有kibana数据，则配置成功</span></span><br><span class="line">/data/kibana-6.6.1-linux-x86_64/bin/kibana</span><br></pre></td></tr></table></figure>

<h2 id="安装filebeat"><a href="#安装filebeat" class="headerlink" title="安装filebeat"></a>安装filebeat</h2><p>该组件为日志收集服务，安装在需要收集日志的服务器上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-6.6.1-linux-x86_64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar xf filebeat-6.6.1-linux-x86_64.tar.gz</span><br><span class="line"><span class="built_in">cd</span> filebeat-6.6.1-linux-x86_64</span><br><span class="line"></span><br><span class="line">vim filebeat.yml</span><br><span class="line"><span class="comment"># 配置以下设置</span></span><br></pre></td></tr></table></figure>

<p>该配置在input中定义多个日志路径，用于之后的logstash过滤，匹配不同索引</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">filebeat.inputs:</span></span><br><span class="line"><span class="attr">- type:</span> <span class="string">log</span></span><br><span class="line"><span class="attr">  enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  paths:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">/var/log/*.log</span></span><br><span class="line"><span class="attr">  fields:</span></span><br><span class="line"><span class="attr">    log_source:</span> <span class="string">sys</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- type:</span> <span class="string">log</span></span><br><span class="line"><span class="attr">  enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  paths:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">/var/log/httpd/*_log</span></span><br><span class="line"><span class="attr">  fields:</span></span><br><span class="line"><span class="attr">    log_source:</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line"><span class="string">output.redis:</span>  </span><br><span class="line"><span class="attr">  hosts:</span> <span class="string">["192.168.182.100:6379"]</span></span><br><span class="line"><span class="attr">  password:</span> <span class="string">""</span></span><br><span class="line"><span class="attr">  db:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">  key:</span> <span class="string">"syslog"</span></span><br></pre></td></tr></table></figure>

<p>日志输入：<br>filebeat.inputs: 模块用来指定日志文件的来源<br>type:  指定日志类型，在这里是log， 应该也可以是json。<br>paths指定日志文件路径。<br>fields: 是打标记，主要为了后面日志分析查找的方便，存储的时候也会根据fields分类存储，相同fields的数据存在同一个redis key中</p>
<p>日志输出<br>output.redis：指定输出到redis<br>hosts：指定redis主机，可以指定多台。<br>password：redis密码，redis默认没有密码，在这里设为空就行<br>key：指定存入redis中的key<br>db: 指定存在redis中的db编号(redis默认安装有16个databases，0~15， 默认是存储在db0中的)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">./filebeat -e -c filebeat.yml</span><br></pre></td></tr></table></figure>

<h2 id="安装logstash"><a href="#安装logstash" class="headerlink" title="安装logstash"></a>安装logstash</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget https://artifacts.elastic.co/downloads/logstash/logstash-6.6.1.tar.gz</span><br><span class="line">tar xf logstash-6.6.1.tar.gz</span><br><span class="line"><span class="built_in">cd</span> logstash-6.6.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建配置文件,配置以下设置</span></span><br><span class="line">vim config/syslog.conf</span><br></pre></td></tr></table></figure>

<p>该配置在output中使用fields标签匹配不同索引，从而创建俩个不同的索引给kibana使用</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">input</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">redis</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">host</span> <span class="string">=&gt;</span> <span class="string">"192.168.182.100"</span></span><br><span class="line">    <span class="string">port</span> <span class="string">=&gt;</span> <span class="number">6379</span></span><br><span class="line">    <span class="string">data_type</span> <span class="string">=&gt;</span> <span class="string">"list"</span></span><br><span class="line">    <span class="string">key</span> <span class="string">=&gt;</span> <span class="string">"syslog"</span></span><br><span class="line">    <span class="string">db</span> <span class="string">=&gt;</span> <span class="number">0</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">output</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">if</span> <span class="string">[fields][log_source]</span> <span class="string">==</span> <span class="string">'sys'</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">elasticsearch</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="string">hosts</span> <span class="string">=&gt;</span> <span class="string">["http://192.168.182.100:9200"]</span></span><br><span class="line">      <span class="string">index</span> <span class="string">=&gt;</span> <span class="string">"syslog-<span class="template-variable">%&#123;+YYYY.MM.dd&#125;</span>"</span></span><br><span class="line">      <span class="string">id</span> <span class="string">=&gt;</span> <span class="string">"syslog_id"</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="string">if</span> <span class="string">[fields][log_source]</span> <span class="string">==</span> <span class="string">'nginx'</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">elasticsearch</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="string">hosts</span> <span class="string">=&gt;</span> <span class="string">["http://192.168.182.100:9200"]</span></span><br><span class="line">      <span class="string">index</span> <span class="string">=&gt;</span> <span class="string">"nginxlog-<span class="template-variable">%&#123;+YYYY.MM.dd&#125;</span>"</span></span><br><span class="line">      <span class="string">id</span> <span class="string">=&gt;</span> <span class="string">"nginx_id"</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">  <span class="string">&#125;</span> </span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<p>1.key =&gt; “syslog” <font color="90EE90">对应filebeat.yml配置中，redis设置的key</font><br>2.if [fields][log_source] == ‘sys’ <font color="90EE90">对应filebeat.yml配置中，input设置fields标签</font><br>3.index =&gt; “nginxlog-%{+YYYY.MM.dd}” <font color="90EE90">创建elasticsearch索引</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">./bin/logstash -f config/syslog.conf</span><br></pre></td></tr></table></figure>

<h2 id="访问kibana，并添加索引"><a href="#访问kibana，并添加索引" class="headerlink" title="访问kibana，并添加索引"></a>访问kibana，并添加索引</h2><p>访问：IP:5601，没有密码，密码认证需要收费，可以使用nginx代理认证</p>
<p>创建索引：</p>
<ol>
<li>点击 management</li>
<li>点击 Index Patterns</li>
<li>点击 Create index pattern</li>
<li>在当前配置页中会显示能添加的索引，如果没有显示，请查看logstash和filebeat配置</li>
<li>添加索引：nginxlog-* ， 该索引为elasticsearch中的索引</li>
<li>下一步：选择@timestamp</li>
<li>点击：Create index pattern 创建成功</li>
</ol>
<h2 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h2><ol>
<li>点击：Discover</li>
<li>当前页就是搜索日志页面，有切换索引，添加搜索标签，选择时间范围等功能</li>
</ol>
<h2 id="kibana汉化"><a href="#kibana汉化" class="headerlink" title="kibana汉化"></a>kibana汉化</h2><p>Kibana在6.7版本以上，支持了多种语言。并且自带在安装包里，之前版本需要下载中文包安装。</p>
<p>Kibana在6.7版本以下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://mirrors.yangxingzhen.com/kibana/Kibana_Hanization.tar.gz</span><br><span class="line"></span><br><span class="line">tar xf Kibana_Hanization.tar.gz</span><br><span class="line"><span class="built_in">cd</span> Kibana_Hanization/old/</span><br><span class="line"></span><br><span class="line">python main.py /data/kibana-6.6.1-linux-x86_64</span><br></pre></td></tr></table></figure>

<p>Kibana在6.7版本以上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /data/kibana-6.6.1-linux-x86_64/config/kibana.yml</span><br><span class="line"><span class="comment"># 取消注释</span></span><br><span class="line">i18n.locale: <span class="string">"zh-CN"</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>监控</category>
      </categories>
      <tags>
        <tag>elk</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js安装与npm编译前端</title>
    <url>/2019/07/25/Node.js%E5%AE%89%E8%A3%85%E4%B8%8Enpm%E7%BC%96%E8%AF%91%E5%89%8D%E7%AB%AF/</url>
    <content><![CDATA[<h1 id="Node-js-介绍"><a href="#Node-js-介绍" class="headerlink" title="Node.js 介绍"></a>Node.js 介绍</h1><p>简单的说 Node.js 就是运行在服务端的 JavaScript。<br>Node.js 是一个基于Chrome JavaScript 运行时建立的一个平台。<br>Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。</p>
<h1 id="NPM-使用介绍"><a href="#NPM-使用介绍" class="headerlink" title="NPM 使用介绍"></a>NPM 使用介绍</h1><p>NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：</p>
<ol>
<li>允许用户从NPM服务器下载别人编写的第三方包到本地使用。</li>
<li>允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。</li>
<li>允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。</li>
</ol>
<h1 id="linux安装Node-js"><a href="#linux安装Node-js" class="headerlink" title="linux安装Node.js"></a>linux安装Node.js</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#下载</span></span><br><span class="line">wget https://npm.taobao.org/mirrors/node/v10.16.0/node-v10.16.0-linux-x64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#解压</span></span><br><span class="line">tar xf node-v10.16.0-linux-x64.tar.gz</span><br><span class="line"><span class="built_in">cd</span> node-v10.16.0-linux-x64/bin/</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置软链接，需要绝对路径</span></span><br><span class="line">ln -s /root/node-v10.16.0-linux-x64/bin/node /usr/bin/</span><br><span class="line">ln -s /root/node-v10.16.0-linux-x64/bin/npm /usr/bin/</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看版本</span></span><br><span class="line">node -v</span><br><span class="line">v10.16.0	</span><br><span class="line"></span><br><span class="line">npm -v	<span class="comment">#安装成功</span></span><br><span class="line">6.9.0</span><br></pre></td></tr></table></figure>

<h1 id="NPM安装淘宝镜像"><a href="#NPM安装淘宝镜像" class="headerlink" title="NPM安装淘宝镜像"></a>NPM安装淘宝镜像</h1><p>大家都知道国内直接使用 npm 的官方镜像是非常慢的，这里推荐使用淘宝 NPM 镜像。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装</span></span><br><span class="line">npm install cnpm -g --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line"><span class="comment">#软链接</span></span><br><span class="line">ln -s /root/node-v10.16.0-linux-x64/bin/cnpm /usr/bin/</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看版本</span></span><br><span class="line">cnpm -v</span><br></pre></td></tr></table></figure>

<h1 id="NPM全局安装与本地安装"><a href="#NPM全局安装与本地安装" class="headerlink" title="NPM全局安装与本地安装"></a>NPM全局安装与本地安装</h1><p>npm 的包安装分为本地安装（local）、全局安装（global）两种，从敲的命令行来看，差别只是有没有-g而已。</p>
<p><strong>本地安装：</strong> 将安装包放在 ./node_modules 下（运行 npm 命令时所在的目录），如果没有 node_modules 目录，会在当前执行 npm 命令的目录下生成 node_modules 目录。</p>
<p><strong>全局安装：</strong> 将安装包放在 /usr/local 下或者你 node 的安装目录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install express     <span class="comment"># 本地安装</span></span><br><span class="line">npm install express -g   <span class="comment"># 全局安装</span></span><br></pre></td></tr></table></figure>

<h1 id="NPM编译前端源码包"><a href="#NPM编译前端源码包" class="headerlink" title="NPM编译前端源码包"></a>NPM编译前端源码包</h1><p>以下以web为源码包举例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用本地安装，cd到源码包目录下</span></span><br><span class="line"><span class="built_in">cd</span> web</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装源码包依赖</span></span><br><span class="line">cnpm install</span><br><span class="line"></span><br><span class="line"><span class="comment">#打包，会在web目录中生成build的包，这个就是可以发布的前端包</span></span><br><span class="line">cnpm run build</span><br></pre></td></tr></table></figure>

<h1 id="NPM常用命令"><a href="#NPM常用命令" class="headerlink" title="NPM常用命令"></a>NPM常用命令</h1><h2 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h2><p>以下都是本地安装，全局安装加参数-g<br>npm install <name></name></p>
<h2 id="查看安装模块信息"><a href="#查看安装模块信息" class="headerlink" title="查看安装模块信息"></a>查看安装模块信息</h2><p>npm list</p>
<h2 id="卸载模块"><a href="#卸载模块" class="headerlink" title="卸载模块"></a>卸载模块</h2><p>npm uninstall express</p>
<h2 id="更新模块"><a href="#更新模块" class="headerlink" title="更新模块"></a>更新模块</h2><p>npm update express</p>
<h2 id="搜索模块"><a href="#搜索模块" class="headerlink" title="搜索模块"></a>搜索模块</h2><p>npm search express</p>
<h2 id="创建模块"><a href="#创建模块" class="headerlink" title="创建模块"></a>创建模块</h2><h3 id="生成-package-json-文件"><a href="#生成-package-json-文件" class="headerlink" title="生成 package.json 文件"></a>生成 package.json 文件</h3><p>npm init</p>
<h3 id="在-npm-资源库中注册用户"><a href="#在-npm-资源库中注册用户" class="headerlink" title="在 npm 资源库中注册用户"></a>在 npm 资源库中注册用户</h3><p>npm adduser</p>
<h3 id="发布模块"><a href="#发布模块" class="headerlink" title="发布模块"></a>发布模块</h3><p>npm publish</p>
]]></content>
      <categories>
        <category>linux基础</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK1.8环境安装-linux</title>
    <url>/2019/06/04/JDK1.8%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85-linux/</url>
    <content><![CDATA[<h1 id="什么是JDK"><a href="#什么是JDK" class="headerlink" title="什么是JDK"></a>什么是JDK</h1><p><font color="DarkTurquoise"><strong>JDK</strong></font>  (Java Development Kit) 是 Java 语言的软件开发工具包(SDK)。在JDK的安装目录下有一个jre目录，里面有两个文件夹bin和lib，在这里可以认为bin里的就是jvm，lib中则是jvm工作所需要的类库，而jvm和 lib合起来就称为jre。<br><font color="DarkTurquoise"><strong>JRE</strong></font>（Java Runtime Environment，Java运行环境），包含JVM标准实现及Java核心类库。JRE是Java运行环境，并不是一个开发环境，所以没有包含任何开发工具（如编译器和调试器）<br><font color="DarkTurquoise"><strong>JVM</strong></font>  是Java Virtual Machine（Java虚拟机）的缩写，JVM是一种用于计算设备的规范，它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。</p>
<h1 id="JDK安装思路"><a href="#JDK安装思路" class="headerlink" title="JDK安装思路"></a>JDK安装思路</h1><ol>
<li>下载JDK</li>
<li>上传linux服务器，解压</li>
<li>设置环境变量</li>
<li>查看版本</li>
</ol>
<h2 id="1-下载JDK"><a href="#1-下载JDK" class="headerlink" title="1. 下载JDK"></a>1. 下载JDK</h2><p>JDK官网下载地址：<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a><br>请根据自己服务器情况下载对应版本，linux是下载tar.gz结尾的包</p>
<h2 id="2-上传linux服务器"><a href="#2-上传linux服务器" class="headerlink" title="2. 上传linux服务器"></a>2. 上传linux服务器</h2><p>把JDK包上传服务器有多种方法，我是用Xshell自带的ftp功能上传服务器，比较简单，这边不多讲。上传完成后</p>
<h2 id="3-设置环境变量"><a href="#3-设置环境变量" class="headerlink" title="3. 设置环境变量"></a>3. 设置环境变量</h2><p>粘贴命令直接执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xf jdk-8u221-linux-x64.tar.gz -C /opt</span><br><span class="line"></span><br><span class="line">cat &gt;&gt; /etc/profile &lt;&lt; <span class="string">'EOF'</span></span><br><span class="line"><span class="comment">#jdk8</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/opt/jdk1.8.0_221</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$JAVA_HOME</span>/jre</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux基础</category>
      </categories>
      <tags>
        <tag>jdk</tag>
      </tags>
  </entry>
  <entry>
    <title>RocketMQ安装</title>
    <url>/2020/01/21/RocketMQ%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>RocketMQ是一款分布式、队列模型的消息中间件，是由阿里巴巴设计的，具有以下特点：</p>
<ul>
<li>支持严格的消息顺序</li>
<li>支持Topic与Queue两种模式</li>
<li>亿级消息堆积能力</li>
<li>比较友好的分布式特性</li>
<li>同时支持Push与Pull方式消费消息</li>
<li>RocketMQ是纯java编写，基于通信框架Netty</li>
</ul>
<h3 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语"></a><strong>相关术语</strong></h3><ol>
<li><code>Producer</code>：消息生产者，负责产生消息，一般由业务系统负责产生消息。</li>
<li><code>Producer Group</code>：一类Producer的集合名称，这类Producer通常发送一类消息，且发送逻辑一致。</li>
<li><code>Consumer</code>：消息消费者，负责消费消息，一般是后台系统负责异步消费。</li>
<li><code>Push Consumer</code>：Consumer的一种，应用通常向Consumer对象注册一个Listener接口，一旦收到消息，Consumer对象立 刻回调Listener接口方法。</li>
<li><code>Pull Consumer</code>：Consumer的一种，应用通常主动调用Consumer的拉消息方法从Broker拉消息，主动权由应用控制。</li>
<li><code>Consumer Group</code>：一类Consumer的集合名称，这类Consumer通常消费一类消息，且消费逻辑一致。</li>
<li><code>Broker</code>：消息中转角色，负责存储消息，转发消息，一般也称为Server。</li>
<li><code>Nameserver</code>：专为RocketMQ设计的轻量级名称服务。集群中Nameserver互相独立，彼此没有通信关系，单台Nameserver挂掉，不影响其他Nameserver，即使全部挂掉，也不影响业务系统使用。而且Nameserver不会有频繁的读写，所以性能开销非常小，稳定性很高。</li>
<li><code>广播消费</code>：一条消息被多个Consumer消费，即使这些Consumer属于同一个Consumer Group，消息也会被Consumer Group中的每个Consumer都消费一次，广播消费中的Consumer Group概念可以认为在消息划分方面无意义。</li>
<li><code>集群消费</code>：一个Consumer Group中的Consumer实例平均分摊消费消息。例如某个Topic有9条消息，其中一个Consumer Group有3个实例（可能是3个进程，或者3台机器），那么每个实例只消费其中的3条消息。</li>
<li><code>顺序消息</code>：消费消息的顺序要同发送消息的顺序一致，在RocketMQ中，主要指的是局部顺序，即一类消息为满足顺序性，必须Producer单线程顺序发送，且发送到同一个队列，这样Consumer就可以按照Producer发送的顺序去消费消息。</li>
<li><code>普通顺序消息</code>：顺序消息的一种，正常情况下可以保证完全的顺序消息，但是一旦发生通信异常，Broker重启，由于队列总数发生变化，哈希取模后定位的队列会变化，产生短暂的消息顺序不一致。如果业务能容忍在集群异常情况（如某个Broker宕机或者重启）下，消息短暂的乱序，使用普通顺序方式比较合适。</li>
<li><code>严格顺序消息</code>：顺序消息的一种，无论正常异常情况都能保证顺序，但是牺牲了分布式Failover特性，即Broker集群中只要有一台机器不可用，则整个集群都不可用，服务可用性大大降低。如果服务器部署为同步双写模式，此缺陷可通过备机自动切换为主避免，不过仍然会存在几分钟的服务不可用。</li>
<li><code>Message Queue</code>：在RocketMQ中，所有消息队列都是持久化，长度无限的数据结构，所谓长度无限是指队列中的每个存储单元都是定长，访问其中的存储单元使用Offset来访问，offset为java long类型，64位，理论上在100年内不会溢出，所以认为是长度无限，另外队列中只保存最近几天的数据，之前的数据会按照过期时间来删除。也可以认为Message Queue是一个长度无限的数组，offset就是下标。</li>
<li><code>异步复制</code>：消息写入master节点，再由master节点异步复制到slave节点，类似mysql中的master-slave机制。</li>
<li><code>同步双写</code>：消息同时写入master节点和slave节点。</li>
<li><code>异步刷盘</code>：Broker的一种持久化策略，消息写入pagecache后，直接返回。由异步线程负责将pagecache写入硬盘。</li>
<li><code>同步刷盘</code>：Broker的一种持久化策略，消息写入pagecache后，由同步线程将pagecache写入硬盘后，再返回。</li>
</ol>
<h3 id="集群部署模式"><a href="#集群部署模式" class="headerlink" title="集群部署模式"></a><strong>集群部署模式</strong></h3><p>RocketMQ作为消息中间件，其主要功能为消息的Publish/Subscribe。而Broker担任的消息转发和存储功能，其部署方式有很多种：</p>
<ol>
<li><code>单Master</code></li>
</ol>
<p>优点：除了配置简单没什么优点。</p>
<p>缺点：不可靠，该机器重启或宕机，将导致整个服务不可用。</p>
<ol start="2">
<li><code>多Master</code></li>
</ol>
<p>优点：配置简单，性能最高。</p>
<p>缺点：可能会有少量消息丢失，单台机器重启或宕机期间，该机器下未被消费的消息在机器恢复前不可订阅，影响消息实时性。</p>
<ol start="3">
<li><code>异步多Master多Slave</code></li>
</ol>
<p>每个Master配一个Slave，有多对Master-Slave，集群采用异步复制方式，主备有短暂消息延迟，毫秒级。</p>
<p>优点：性能同多Master几乎一样，实时性高，主备间切换对应用透明，不需人工干预。</p>
<p>缺点：Master宕机或磁盘损坏时会有少量消息丢失。</p>
<ol start="4">
<li><code>同步多Master多Slave</code></li>
</ol>
<p>每个Master配一个Slave，有多对Master-Slave，集群采用同步双写方式，主备都写成功，向应用返回成功。</p>
<p>优点：服务可用性与数据可用性非常高。</p>
<p>缺点：性能比异步集群略低，当前版本主宕备不能自动切换为主。</p>
<h1 id="单机安装"><a href="#单机安装" class="headerlink" title="单机安装"></a>单机安装</h1><p><strong>jdk1.8安装</strong></p>
<p><a href="https://hxqxiaoqi.gitee.io/2019/06/04/JDK1.8环境安装-linux/"><strong>jdk安装跳转</strong></a></p>
<p><strong>下载rocketmq</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://www.apache.org/dyn/closer.cgi?path=rocketmq/4.6.0/rocketmq-all-4.6.0-bin-release.zip</span><br><span class="line"></span><br><span class="line">unzip rocketmq-all-4.6.0-bin-release.zip</span><br><span class="line">mv rocketmq-all-4.6.0-bin-release /data/rocketmq</span><br><span class="line"><span class="built_in">cd</span> /data/rocketmq</span><br></pre></td></tr></table></figure>

<p><strong>启动Nameserver</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 要先启动Nameserver，之后启动Broker</span></span><br><span class="line">nohup sh bin/mqnamesrv &amp;</span><br><span class="line">tail -f ~/logs/rocketmqlogs/namesrv.log</span><br></pre></td></tr></table></figure>

<p><strong>启动Broker</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 内存需要4G以上，否正启动报错，修改启动文件</span></span><br><span class="line">nohup sh bin/mqbroker -n localhost:9876 &amp;</span><br><span class="line">tail -f ~/logs/rocketmqlogs/broker.log</span><br></pre></td></tr></table></figure>

<p><strong>Broker启动内存报错</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim bin/runbroker.sh</span><br><span class="line"><span class="comment"># 修改</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">JAVA_OPT=<span class="string">"<span class="variable">$&#123;JAVA_OPT&#125;</span> -server -Xms512m -Xmx512m -Xmn256m"</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim bin/runserver.sh </span><br><span class="line"><span class="comment"># 修改</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">JAVA_OPT=<span class="string">"<span class="variable">$&#123;JAVA_OPT&#125;</span> -server -Xms256m -Xmx256m -Xmn128m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m"</span></span><br></pre></td></tr></table></figure>

<p><strong>测试消息发送和接收</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 声明Nameserver地址</span></span><br><span class="line"><span class="built_in">export</span> NAMESRV_ADDR=localhost:9876</span><br><span class="line"><span class="comment"># 发送消息</span></span><br><span class="line">sh bin/tools.sh org.apache.rocketmq.example.quickstart.Producer</span><br><span class="line"><span class="comment"># 接收消息</span></span><br><span class="line">sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer</span><br></pre></td></tr></table></figure>

<p><strong>关闭服务</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 要先关闭broker，之后关闭Nameserver</span></span><br><span class="line">sh bin/mqshutdown broker</span><br><span class="line">sh bin/mqshutdown namesrv</span><br></pre></td></tr></table></figure>

<p>常用命令<br>除了上面几个命令之外，还有如下一些较常用的命令，ip请以实际为准：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看集群情况： </span></span><br><span class="line">./mqadmin clusterList -n 127.0.0.1:9876</span><br><span class="line"><span class="comment"># 查看 broker 状态： </span></span><br><span class="line">./mqadmin brokerStatus -n 127.0.0.1:9876 -b 172.20.1.138:10911</span><br><span class="line"><span class="comment"># 查看 topic 列表： </span></span><br><span class="line">./mqadmin topicList -n 127.0.0.1:9876</span><br><span class="line"><span class="comment"># 查看 topic 状态： </span></span><br><span class="line">./mqadmin topicStatus -n 127.0.0.1:9876 -t MyTopic (换成想查询的 topic)</span><br><span class="line"><span class="comment"># 查看 topic 路由： </span></span><br><span class="line">./mqadmin topicRoute -n 127.0.0.1:9876 -t MyTopic</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>RocketMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>ansible基本配置</title>
    <url>/2019/09/09/ansible%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>官方的title是“Ansible is Simple IT Automation”——简单的自动化IT工具。这个工具的目标有这么几项：让我们自动化部署APP；自动化管理配置项；自动化的持续交付；自动化的（AWS）云服务管理。</p>
<p>所有的这几个目标本质上来说都是在一个台或者几台服务器上，执行一系列的命令而已,批量的在远程服务器上执行命令 。</p>
<p>ansible是一个轻量级的运维自动化配置管理和配置工具，基于Python研发。集合了众多老牌运维工具（puppet、cfengine、chef、func、fabric）的优点，实现了批量系统配置、批量程序部署、批量运行命令等功能</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install ansible</span><br></pre></td></tr></table></figure>

<p>目录说明</p>
<ol>
<li>ansible.cfg：配置文件</li>
<li>hosts：设置被管理服务器IP</li>
<li>roles：ansible-playbook存放位置</li>
</ol>
<p>ansible.cfg配置文件中配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#跳过第一次连接检测询问是否登陆的提示（YES/NO）</span></span><br><span class="line">host_key_checking=False</span><br></pre></td></tr></table></figure>

<h1 id="host配置"><a href="#host配置" class="headerlink" title="host配置"></a>host配置</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#远程主机登陆端口</span></span><br><span class="line">ansible_ssh_port=22</span><br><span class="line"></span><br><span class="line"><span class="comment">#远程主机登陆用户名</span></span><br><span class="line">ansible_ssh_user=root</span><br><span class="line"></span><br><span class="line"><span class="comment">#远程主机登陆用户名的密码</span></span><br><span class="line">ansible_ssh_pass=</span><br><span class="line"></span><br><span class="line"> <span class="comment"># sudo密码</span></span><br><span class="line">ansible_sudo_pass</span><br></pre></td></tr></table></figure>

<h2 id="设置主机组"><a href="#设置主机组" class="headerlink" title="设置主机组"></a>设置主机组</h2><p>使用ansible工具时，指定web组，相当于控制web组下的主机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[web]</span><br><span class="line">192.168.1.101</span><br><span class="line">192.168.1.100</span><br></pre></td></tr></table></figure>

<h2 id="设置主机地址段"><a href="#设置主机地址段" class="headerlink" title="设置主机地址段"></a>设置主机地址段</h2><p>相当于一个IP段或域名段的主机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[web]</span><br><span class="line">192.168.1.[2:100]</span><br><span class="line">www.test[a:z].com</span><br></pre></td></tr></table></figure>

<h2 id="指定主机用户、密码、端口"><a href="#指定主机用户、密码、端口" class="headerlink" title="指定主机用户、密码、端口"></a>指定主机用户、密码、端口</h2><p>使用ansible工具时，自动使用该账户登录操作<br>如果想不使用账号密码操作，需要提前设置 <a href="https://hxqxiaoqi.gitee.io/2019/06/04/linux%20ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95%E8%AE%BE%E7%BD%AE/">ssh免密设置</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[web]</span><br><span class="line">192.168.1.100 ansible_ssh_user=root ansible_ssh_pass=123 ansible_ssh_port=22</span><br></pre></td></tr></table></figure>

<h2 id="设置主机组变量"><a href="#设置主机组变量" class="headerlink" title="设置主机组变量"></a>设置主机组变量</h2><p>等于所有主机都已经指定用户、密码、端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[web]</span><br><span class="line">192.168.1.100</span><br><span class="line">192.168.1.101</span><br><span class="line">192.168.1.102</span><br><span class="line"></span><br><span class="line">[web:vars]</span><br><span class="line">ansible_ssh_user=root </span><br><span class="line">ansible_ssh_pass=123 </span><br><span class="line">ansible_ssh_port=22</span><br></pre></td></tr></table></figure>

<h2 id="主机组继承"><a href="#主机组继承" class="headerlink" title="主机组继承"></a>主机组继承</h2><p>类似于web、web1是weball的子集，使用weball组，包含web、web1组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[web]</span><br><span class="line">192.168.182.101</span><br><span class="line">[web1]</span><br><span class="line">192.168.182.100</span><br><span class="line"></span><br><span class="line">[weball:children]</span><br><span class="line">web1</span><br><span class="line">web</span><br></pre></td></tr></table></figure>

<h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">命令格式：ansible [主机/主机组] [-m 模块] [-a args]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有安装模块（q退出）</span></span><br><span class="line">ansible-doc -l </span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出yum模块描述信息和操作动作</span></span><br><span class="line">ansible-doc -s yum</span><br></pre></td></tr></table></figure>

<h2 id="command模块"><a href="#command模块" class="headerlink" title="command模块"></a>command模块</h2><p>这个模块可以直接在远程主机上执行命令，并将结果返回本主机。注意，该命令不支持 | 管道命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询date</span></span><br><span class="line">ansible all -m <span class="built_in">command</span> -a <span class="string">'date'</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不加-m模块，默认运行command模块</span></span><br><span class="line">ansible all -a <span class="string">'ls /'</span></span><br></pre></td></tr></table></figure>

<h2 id="cron模块"><a href="#cron模块" class="headerlink" title="cron模块"></a>cron模块</h2><p>该模块适用于管理cron计划任务的。</p>
<p><font color="98F5FF">minute参数</font>：此参数用于设置计划任务中分钟设定位的值，比如，上述示例1中分钟设定位的值为5，即 minute=5，当不使用此参数时，分钟设定位的值默认为”*”。</p>
<p><font color="98F5FF">hour参数</font>：此参数用于设置计划任务中小时设定位的值，比如，上述示例1中小时设定位的值为1，即 hour=1，当不使用此参数时，小时设定位的值默认为”*”。</p>
<p><font color="98F5FF">day参数</font>：此参数用于设置计划任务中日设定位的值，当不使用此参数时，日设定位的值默认为”*”。</p>
<p><font color="98F5FF">month参数</font>：此参数用于设置计划任务中月设定位的值，当不使用此参数时，月设定位的值默认为”*”。</p>
<p><font color="98F5FF">weekday参数</font>：此参数用于设置计划任务中周几设定位的值，当不使用此参数时，周几设定位的值默认为”*”。</p>
<p><font color="98F5FF">job参数</font>：此参数用于指定计划的任务中需要实际执行的命令或者脚本，比如上例中的 “echo test” 命令。</p>
<p><font color="98F5FF">name参数</font>：此参数用于设置计划任务的名称，计划任务的名称会在注释中显示</p>
<p><font color="98F5FF">state参数</font>：当计划任务有名称时，我们可以根据名称修改或删除对应的任务，当删除计划任务时，需要将 state 的值设置为 absent。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-a：指定添加参数*/1：每分钟执行job：执行内容      </span></span><br><span class="line">ansible all -m cron -a <span class="string">'minute="*/1" job="/usr/bin/echo heihei &gt;&gt; /opt/test.txt" name="test cron"'</span>   </span><br><span class="line"></span><br><span class="line"><span class="comment"># 在all主机上创建计划任务，任务名称为”crontab day test”，任务每3天执行一次，于执行当天的1点1分开始执行，任务内容为输出 test 字符。</span></span><br><span class="line">ansible all -m cron -a <span class="string">"name='crontab day test' minute=1 hour=1 day=*/3 job='echo test'</span></span><br></pre></td></tr></table></figure>

<p>## </p>
]]></content>
      <categories>
        <category>linux基础</category>
      </categories>
      <tags>
        <tag>ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>canal安装</title>
    <url>/2020/01/19/canal%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><strong>canal [kə’næl]</strong>，主要用途是基于 MySQL 数据库增量日志解析，提供增量数据订阅和消费。支持数据同步到elasticsearch、redis、kafka等服务。</p>
<p>当前的 canal 支持源端 MySQL 版本包括 5.1.x , 5.5.x , 5.6.x , 5.7.x , 8.0.x</p>
<p>搭建参考地址：<a href="https://github.com/alibaba/canal/wiki/AdminGuide" target="_blank" rel="noopener">https://github.com/alibaba/canal/wiki/AdminGuide</a></p>
<p><font color="32CD32">canal 工作原理</font></p>
<ul>
<li>canal 模拟 MySQL slave 的交互协议，伪装自己为 MySQL slave ，向 MySQL master 发送dump 协议</li>
<li>MySQL master 收到 dump 请求，开始推送 binary log 给 slave (即 canal )</li>
<li>canal 解析 binary log 对象(原始为 byte 流)</li>
</ul>
<h1 id="canal安装"><a href="#canal安装" class="headerlink" title="canal安装"></a>canal安装</h1><p><strong>主机环境：</strong></p>
<ul>
<li>canal+mysql：192.168.40.100</li>
</ul>
<p><strong>系统环境：</strong></p>
<ul>
<li>jdk1.8.0_221</li>
<li>MySQL5.5.64</li>
</ul>
<p><a href="https://github.com/alibaba/canal/releases" target="_blank" rel="noopener"><strong>canal下载地址</strong></a></p>
<ul>
<li>canal 服务端：canal.deployer-1.1.4.tar.gz    </li>
<li>canal 客户端测试：canal.example-1.1.4.tar.gz    </li>
<li>canal web管理界面：canal.admin-1.1.4.tar.gz        </li>
<li>canal 适配器：canal.adapter-1.1.4.tar.gz     </li>
</ul>
<p><strong>安装步骤：</strong></p>
<ol>
<li>安装mysql，并开启bin-log</li>
<li>安装jdk</li>
<li>安装canal.deployer，修改配置</li>
<li>安装canal.example测试服务是否成功</li>
</ol>
<h2 id="mysql安装"><a href="#mysql安装" class="headerlink" title="mysql安装"></a>mysql安装</h2><p><a href="https://hxqxiaoqi.gitee.io/2019/10/23/centos7安装mariadb/">mysql安装跳转</a></p>
<p>canal的原理是基于mysql binlog技术，所以这里一定需要开启mysql的binlog写入功能，并且配置binlog模式为row，重启mysql。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[mysqld]  </span><br><span class="line"><span class="built_in">log</span>-bin=mysql-bin <span class="comment">#添加这一行就ok  </span></span><br><span class="line">binlog-format=ROW <span class="comment">#选择row模式  </span></span><br><span class="line">server_id=1 <span class="comment">#配置mysql replaction需要定义，不能和canal的slaveId重复</span></span><br></pre></td></tr></table></figure>

<p>登录mysql查看bin-log是否开启</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like 'binlog_format';</span><br><span class="line">mysql&gt; show variables like 'log_bin';</span><br></pre></td></tr></table></figure>

<p>配置canal服务使用的账号权限</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建用户授权</span></span><br><span class="line">mysql&gt; CREATE USER canal IDENTIFIED BY 'canal';    </span><br><span class="line">mysql&gt; GRANT SELECT, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'canal'@'%';  </span><br><span class="line">mysql&gt; FLUSH PRIVILEGES; </span><br><span class="line"><span class="comment"># 查看授权</span></span><br><span class="line">mysql&gt; show grants for 'canal';</span><br></pre></td></tr></table></figure>

<h2 id="jdk安装"><a href="#jdk安装" class="headerlink" title="jdk安装"></a>jdk安装</h2><p><a href="https://hxqxiaoqi.gitee.io/2019/06/04/JDK1.8环境安装-linux/"><strong>jdk安装跳转</strong></a></p>
<h2 id="canal-deployer安装"><a href="#canal-deployer安装" class="headerlink" title="canal.deployer安装"></a>canal.deployer安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载地址</span></span><br><span class="line">wget https://github.com/alibaba/canal/releases/download/canal-1.1.4/canal.deployer-1.1.4.tar.gz</span><br><span class="line">mkdir -p /data/&#123;canal.deployer,canal.admin,canal.example&#125;</span><br><span class="line">tar xf canal.deployer-1.1.4.tar.gz -C /data/canal.deployer</span><br></pre></td></tr></table></figure>

<p><strong>配置文件说明：</strong></p>
<ul>
<li>conf/canal.properties：canal全局配置文件</li>
<li>conf/example/instance.properties：一个数据源配置文件</li>
<li>logs/canal/canal.log：canal.deployer服务日志</li>
<li>logs/example/example.log：数据源日志</li>
</ul>
<p><strong>修改配置</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim conf/example/instance.properties</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据库连接地址</span></span><br><span class="line">canal.instance.master.address=127.0.0.1:3306</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库账号</span></span><br><span class="line">canal.instance.dbUsername=canal</span><br><span class="line">canal.instance.dbPassword=canal</span><br><span class="line"></span><br><span class="line"><span class="comment"># mysql 数据解析关注的表，Perl正则表达式.多个正则之间以逗号(,)分隔，转义符需要双斜杠(\\)</span></span><br><span class="line"><span class="comment"># 常见例子：</span></span><br><span class="line"><span class="comment"># 1.  所有表：.*   or  .*\\..*</span></span><br><span class="line"><span class="comment"># 2.  canal schema下所有表： canal\\..*</span></span><br><span class="line"><span class="comment"># 3.  canal下的以canal打头的表：canal\\.canal.*</span></span><br><span class="line"><span class="comment"># 4.  canal schema下的一张表：canal\\.test1</span></span><br><span class="line"><span class="comment"># 5.  多个规则组合使用：canal\\..*,mysql.test1,mysql.test2 (逗号分隔)</span></span><br><span class="line"><span class="comment"># table regex：白名单，指定收集的库或表</span></span><br><span class="line">canal.instance.filter.regex=.*\\..*</span><br><span class="line"><span class="comment"># table black regex：黑名单</span></span><br><span class="line">canal.instance.filter.black.regex=</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">注：</font> </p>
<ol>
<li>一个example目录为一个数据源，如果需要配置多个数据源，可以复制example为其它名字，再修改</li>
<li>example目录为canal默认数据源，不能改名或删除，否正会报错</li>
<li>canal每5秒，自动加载conf下的数据源目录，配置数据源不需要重启服务</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动服务端口为11111，11112</span></span><br><span class="line">./bin/startup.sh</span><br><span class="line">./bin/stop.sh</span><br></pre></td></tr></table></figure>

<h2 id="canal-example安装"><a href="#canal-example安装" class="headerlink" title="canal.example安装"></a>canal.example安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载地址</span></span><br><span class="line">wget https://github.com/alibaba/canal/releases/download/canal-1.1.4/canal.example-1.1.4.tar.gz</span><br><span class="line">tar xf canal.example-1.1.4.tar.gz -C /data/canal.example</span><br><span class="line"><span class="built_in">cd</span> /data/canal.example</span><br><span class="line">./bin/startup.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监控example日志</span></span><br><span class="line">tailf logs/example/entry.log</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">注：</font> canal.example服务只能收集example数据源操作数据，如果是新增的数据源，需要java编写客户端获取数据。</p>
<p><strong>测试服务</strong></p>
<ol>
<li>监控example日志</li>
<li>操作mysql增加、删除、更新</li>
<li>example日志显示相应的bin-log日志</li>
<li>至此，最简单canal服务搭建成功</li>
</ol>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>canal</tag>
      </tags>
  </entry>
  <entry>
    <title>canal adapter（同步到es）安装使用</title>
    <url>/2020/03/18/canal%20adapter%EF%BC%88%E5%90%8C%E6%AD%A5%E5%88%B0es%EF%BC%89%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>canal 1.1.1版本之后, 增加客户端数据落地的适配及启动功能, 目前支持功能:</p>
<ul>
<li>客户端启动器</li>
<li>同步管理REST接口</li>
<li>日志适配器, 作为DEMO</li>
<li>关系型数据库的数据同步(表对表同步), ETL功能</li>
<li>HBase的数据同步(表对表同步), ETL功能</li>
<li>ElasticSearch多表数据同步,ETL功能</li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>请先安装以下服务：</p>
<ol>
<li><a href="https://hxqxiaoqi.gitee.io/2020/01/20/canal高可用安装/">安装高可用教程</a></li>
<li><a href="https://hxqxiaoqi.gitee.io/2019/08/08/elasticsearch-6.6.1安装/">安装elasticsearch教程</a></li>
</ol>
<h2 id="安装canal-adapter适配器"><a href="#安装canal-adapter适配器" class="headerlink" title="安装canal adapter适配器"></a>安装canal adapter适配器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载地址</span></span><br><span class="line">wget https://github.com/alibaba/canal/releases/download/canal-1.1.4/canal.deployer-1.1.4.tar.gz</span><br><span class="line"></span><br><span class="line">tar xf canal.deployer-1.1.4.tar.gz -C /data/canal.deployer</span><br><span class="line">vim /data/canal.deployer/conf/application.yml</span><br><span class="line"><span class="comment"># 修改以下配置</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  jackson:</span></span><br><span class="line"><span class="attr">    date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="attr">HH:mm:ss</span></span><br><span class="line"><span class="attr">    time-zone:</span> <span class="string">GMT+8</span></span><br><span class="line"><span class="attr">    default-property-inclusion:</span> <span class="string">non_null</span></span><br><span class="line"></span><br><span class="line"><span class="string">canal.conf:</span></span><br><span class="line"><span class="attr">  mode:</span> <span class="string">tcp</span> <span class="comment"># kafka rocketMQ</span></span><br><span class="line"><span class="comment">#  canalServerHost为单机模式，zookeeperHosts为集群模式</span></span><br><span class="line"><span class="comment">#  canalServerHost: 127.0.0.1:11111</span></span><br><span class="line"><span class="attr">  zookeeperHosts:</span> <span class="number">192.168</span><span class="number">.40</span><span class="number">.101</span><span class="string">:2181</span></span><br><span class="line"><span class="comment">#  mqServers: 127.0.0.1:9092 #or rocketmq</span></span><br><span class="line"><span class="comment">#  flatMessage: true</span></span><br><span class="line"><span class="attr">  batchSize:</span> <span class="number">500</span></span><br><span class="line"><span class="attr">  syncBatchSize:</span> <span class="number">1000</span></span><br><span class="line"><span class="attr">  retries:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">  timeout:</span></span><br><span class="line"><span class="attr">  accessKey:</span></span><br><span class="line"><span class="attr">  secretKey:</span></span><br><span class="line"><span class="comment"># 源数据库信息</span></span><br><span class="line"><span class="attr">  srcDataSources:</span></span><br><span class="line"><span class="attr">    defaultDS:</span></span><br><span class="line"><span class="attr">      url:</span> <span class="attr">jdbc:mysql://192.168.40.100:3306/test?useUnicode=true</span></span><br><span class="line"><span class="attr">      username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">      password:</span> <span class="number">123123</span></span><br><span class="line"><span class="attr">  canalAdapters:</span></span><br><span class="line">  <span class="comment"># instance的名称</span></span><br><span class="line"><span class="attr">  - instance:</span> <span class="string">elastic</span></span><br><span class="line"><span class="attr">    groups:</span></span><br><span class="line"><span class="attr">    - groupId:</span> <span class="string">g1</span></span><br><span class="line"><span class="attr">      outerAdapters:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">logger</span></span><br><span class="line">      <span class="comment"># elasticsearch集群信息，9300需要es配置相应端口</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">es</span></span><br><span class="line"><span class="attr">        hosts:</span> <span class="number">192.168</span><span class="number">.40</span><span class="number">.101</span><span class="string">:9300</span></span><br><span class="line"><span class="attr">        properties:</span></span><br><span class="line">          <span class="comment"># mode: transport # or rest</span></span><br><span class="line">          <span class="comment"># security.auth: test:123456</span></span><br><span class="line">          <span class="string">cluster.name:</span> <span class="string">canal-es</span></span><br></pre></td></tr></table></figure>

<p>创建mysql–elasticsearch映射表文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /data/canal.deployer/conf/es/test.yml</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">dataSourceKey:</span> <span class="string">defaultDS</span></span><br><span class="line"><span class="attr">destination:</span> <span class="string">elastic</span></span><br><span class="line"><span class="attr">groupId:</span></span><br><span class="line"><span class="attr">esMapping:</span></span><br><span class="line"><span class="attr">  _index:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">  _type:</span> <span class="string">_doc</span></span><br><span class="line"><span class="attr">  _id:</span> <span class="string">_id</span></span><br><span class="line"><span class="attr">  upsert:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  sql:</span> <span class="string">"select a.id as _id,a.name,a.address from test a"</span></span><br><span class="line"><span class="attr">  commitBatch:</span> <span class="number">3000</span></span><br></pre></td></tr></table></figure>

<p>mysql表结构</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`test`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`address`</span> <span class="built_in">varchar</span>(<span class="number">1000</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4;</span><br></pre></td></tr></table></figure>

<p>elasticsearch索引创建</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">curl -XPUT http://127.0.0.1:9200/test -d </span><br><span class="line">'&#123;</span><br><span class="line">    "mappings":&#123;</span><br><span class="line">        "_doc":&#123;</span><br><span class="line">            "properties":&#123;</span><br><span class="line">                "name":&#123;</span><br><span class="line">                    "type":"text"</span><br><span class="line">                &#125;,</span><br><span class="line">                "address":&#123;</span><br><span class="line">                    "type":"text"</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;'</span><br></pre></td></tr></table></figure>

<p>elastic配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">cluster.name:</span> <span class="string">canal-es</span></span><br><span class="line"><span class="string">node.name:</span> <span class="string">node-1</span></span><br><span class="line"><span class="string">network.host:</span> <span class="number">192.168</span><span class="number">.40</span><span class="number">.101</span></span><br><span class="line"><span class="string">http.port:</span> <span class="number">9200</span></span><br><span class="line"><span class="string">discovery.zen.ping.unicast.hosts:</span> <span class="string">["192.168.40.101"]</span></span><br><span class="line"><span class="string">transport.tcp.port:</span> <span class="number">9300</span></span><br><span class="line"><span class="string">transport.tcp.compress:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">http.cors.allow-origin:</span> <span class="string">"*"</span></span><br></pre></td></tr></table></figure>

<p>启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/data/canal.deployer/bin/startup.sh</span><br><span class="line">/data/canal.deployer/bin/stop.sh</span><br></pre></td></tr></table></figure>

<p>测试</p>
<ol>
<li>在mysql插入记录</li>
<li>查看es文档数据</li>
</ol>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>canal</tag>
      </tags>
  </entry>
  <entry>
    <title>canal高可用安装</title>
    <url>/2020/01/20/canal%E9%AB%98%E5%8F%AF%E7%94%A8%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>canal高可用模式是通过zookeeper注册canal当前服务状态来实现的。</p>
<p>搭建参考地址：<a href="https://github.com/alibaba/canal/wiki/AdminGuide" target="_blank" rel="noopener">https://github.com/alibaba/canal/wiki/AdminGuide</a></p>
<h1 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h1><p><strong>主机环境：</strong></p>
<ul>
<li>canal+admin+zookeeper+jdk：192.168.40.100</li>
<li>mysql+jdk+canal：192.168.40.101</li>
</ul>
<p><strong>搭建步骤：</strong></p>
<ol>
<li>安装mysql</li>
<li>安装jdk</li>
<li>安装zookeeper</li>
<li>安装2个canal</li>
<li>安装admin管理界面</li>
</ol>
<h2 id="mysql安装"><a href="#mysql安装" class="headerlink" title="mysql安装"></a>mysql安装</h2><p><strong><a href="[https://hxqxiaoqi.gitee.io/2019/10/23/centos7%E5%AE%89%E8%A3%85mariadb/](https://hxqxiaoqi.gitee.io/2019/10/23/centos7安装mariadb/)">mysql安装</a></strong> 在192.168.40.101安装</p>
<h2 id="jdk安装"><a href="#jdk安装" class="headerlink" title="jdk安装"></a>jdk安装</h2><p><strong><a href="https://hxqxiaoqi.gitee.io/2020/01/19/canal安装/">参照canal安装</a></strong> 在192.168.40.100和192.168.40.101安装</p>
<h2 id="zookeeper安装"><a href="#zookeeper安装" class="headerlink" title="zookeeper安装"></a>zookeeper安装</h2><p><strong><a href="https://hxqxiaoqi.gitee.io/2019/09/03/zookeeper安装/">参照zookeeper安装</a></strong> 在192.168.40.100安装</p>
<h2 id="canal-admin安装"><a href="#canal-admin安装" class="headerlink" title="canal.admin安装"></a>canal.admin安装</h2><p><strong>在192.168.40.100安装</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载地址</span></span><br><span class="line">wget https://github.com/alibaba/canal/releases/download/canal-1.1.4/canal.admin-1.1.4.tar.gz</span><br><span class="line"></span><br><span class="line">tar xf canal.admin-1.1.4.tar.gz -C /data/canal.admin</span><br><span class="line">vim /data/canal.admin/conf/application.yml</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8089</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  jackson:</span></span><br><span class="line"><span class="attr">    date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="attr">HH:mm:ss</span></span><br><span class="line"><span class="attr">    time-zone:</span> <span class="string">GMT+8</span></span><br><span class="line"></span><br><span class="line"><span class="string">spring.datasource:</span></span><br><span class="line"><span class="attr">  address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:3306</span>	<span class="comment">#数据地址</span></span><br><span class="line"><span class="attr">  database:</span> <span class="string">canal_manager</span>	<span class="comment">#数据库名</span></span><br><span class="line"><span class="attr">  username:</span> <span class="string">canal</span>		<span class="comment">#数据库账号，数据库授权需要写权限</span></span><br><span class="line"><span class="attr">  password:</span> <span class="string">canal</span>		<span class="comment">#数据库密码</span></span><br><span class="line"><span class="attr">  driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">  url:</span> <span class="attr">jdbc:mysql://$&#123;spring.datasource.address&#125;/$&#123;spring.datasource.database&#125;?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false</span></span><br><span class="line"><span class="attr">  hikari:</span></span><br><span class="line"><span class="attr">    maximum-pool-size:</span> <span class="number">30</span></span><br><span class="line"><span class="attr">    minimum-idle:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># canal-server需要凭此账号密码连接到admin上，不是登录密码，是服务间的连接校验</span></span><br><span class="line"><span class="attr">canal:</span></span><br><span class="line"><span class="attr">  adminUser:</span> <span class="string">admin</span>	</span><br><span class="line"><span class="attr">  adminPasswd:</span> <span class="string">admin</span></span><br></pre></td></tr></table></figure>

<p><strong>登录数据库，加载初始化配置</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p123123</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt; source /data/canal.admin/conf/canal_manager.sql;</span><br></pre></td></tr></table></figure>

<p><strong>启动</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">/data/admin/bin/startup.sh</span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">/data/admin/bin/stop.sh</span><br></pre></td></tr></table></figure>

<p><strong>访问web</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://192.168.40.100:8089</span><br></pre></td></tr></table></figure>

<p><strong>web界面配置</strong></p>
<ol>
<li>访问 <a href="http://192.168.40.100:8089" target="_blank" rel="noopener">http://192.168.40.100:8089</a></li>
<li>登录：账号：admin，密码：123456</li>
<li>点击集群管理 –&gt; 新建集群 –&gt; 填写zookeeper信息</li>
<li>在新建的集群右侧点击操作 –&gt; 主配置 –&gt;  载入模板 –&gt;  把<code>canal.user</code>与<code>canal.passwd</code>注释 –&gt; 修改<code>canal.admin.manager</code>为IP地址，注释<code>canal.instance.global.spring.xml = classpath:spring/file-instance.xml</code> 开启<code>canal.instance.global.spring.xml = classpath:spring/default-instance.xml</code> –&gt; 添加<code>canal.zkServers</code>地址 –&gt;保存</li>
<li>server管理：为canal.deployer服务配置</li>
<li>instance管理：为example数据源配置</li>
</ol>
<h2 id="canal-安装"><a href="#canal-安装" class="headerlink" title="canal 安装"></a>canal 安装</h2><p><a href="https://hxqxiaoqi.gitee.io/2020/01/20/canal高可用安装/">canal安装教程链接</a></p>
<p>canal.deployer配置中声明admin配置，才可以注册到admin服务上</p>
<p>修改canal_local.properties配置，canal_local.properties为canal最简化的配置，高可用模式使用该配置，单机模式可以使用默认文件canal.properties</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /data/canal/conf/canal_local.properties</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 本机IP</span></span><br><span class="line"><span class="string">canal.register.ip</span> <span class="string">=</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># canal admin config</span></span><br><span class="line"><span class="string">canal.admin.manager</span> <span class="string">=</span> <span class="number">192.168</span><span class="number">.40</span><span class="number">.100</span><span class="string">:8089</span></span><br><span class="line"><span class="string">canal.admin.port</span> <span class="string">=</span> <span class="number">11110</span></span><br><span class="line"><span class="comment"># 该账号密码对应admin配置，密码由mysql生成：select password('admin')，去掉*号</span></span><br><span class="line"><span class="string">canal.admin.user</span> <span class="string">=</span> <span class="string">admin</span></span><br><span class="line"><span class="string">canal.admin.passwd</span> <span class="string">=</span> <span class="number">4</span><span class="string">ACFE3202A5FF5CF467898FC58AAB1D615029441</span></span><br><span class="line"><span class="comment"># 自动注册到admin服务</span></span><br><span class="line"><span class="string">canal.admin.register.auto</span> <span class="string">=</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 如果是高可用，填写zookeeper地址，如果是单机，可不填写</span></span><br><span class="line"><span class="string">canal.admin.register.cluster</span> <span class="string">=</span> <span class="string">zk</span></span><br></pre></td></tr></table></figure>

<p><strong>启动</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 必须先启动admin服务，也可直接使用canal_local.properties重命名覆盖canal.properties文件，即可正常启动</span></span><br><span class="line"><span class="built_in">cd</span> /data/canal.admin/</span><br><span class="line">sh bin/startup.sh <span class="built_in">local</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line">tailf logs/admin.log</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">注：</font> </p>
<ul>
<li>启动canal后，在admin界面即可查看到注册信息</li>
<li>多台注册，配置与上面一样</li>
<li>如果注册到同一个集群，配置文件为统一配置</li>
<li>可在admin界面管理instance，直接创建，不需要在服务器上手动创建</li>
<li>zookeeper上也可查看到集群信息</li>
</ul>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>canal</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7安装mariadb</title>
    <url>/2019/10/23/centos7%E5%AE%89%E8%A3%85mariadb/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>使用yum安装mariadb，方便快捷。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><strong>安装并启动</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install mariadb-server</span><br><span class="line"></span><br><span class="line">systemctl start mariadb </span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> mariadb</span><br></pre></td></tr></table></figure>

<p><strong>初始化</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化命令，进入交互式界面</span></span><br><span class="line">mysql_secure_installation</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入数据库超级管理员root的密码(注意不是系统root的密码)，第一次进入还没有设置密码则直接回车</span></span><br><span class="line">Enter current password <span class="keyword">for</span> root (enter <span class="keyword">for</span> none):  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置密码，y</span></span><br><span class="line">Set root password? [Y/n]  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 新密码</span></span><br><span class="line">New password:  </span><br><span class="line"><span class="comment"># 再次输入密码</span></span><br><span class="line">Re-enter new password:  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除匿名用户， y</span></span><br><span class="line">Remove anonymous users? [Y/n]  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 拒绝root远程登录，n，不管y/n，都会拒绝root远程登录</span></span><br><span class="line">Disallow root login remotely? [Y/n]  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除test数据库，y：删除。n：不删除，数据库中会有一个test数据库，一般不需要</span></span><br><span class="line">Remove <span class="built_in">test</span> database and access to it? [Y/n]  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载权限表，y。或者重启服务也许</span></span><br><span class="line">Reload privilege tables now? [Y/n]</span><br></pre></td></tr></table></figure>

<p><strong>登录</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>

<p><strong>修改字符集</strong><br>vim /etc/my.cnf<br>在  [mysqld]  标签下添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">init_connect=<span class="string">'SET collation_connection = utf8_unicode_ci'</span></span><br><span class="line">init_connect=<span class="string">'SET NAMES utf8'</span></span><br><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8_unicode_ci</span><br><span class="line">skip-character-set-client-handshake</span><br></pre></td></tr></table></figure>

<p>vim /etc/my.cnf.d/client.cnf<br>在  [client]  标签下添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure>

<p>vim /etc/my.cnf.d/mysql-clients.cnf<br>在  [mysql]  标签下添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure>

<p><strong>重启</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart mariadb</span><br></pre></td></tr></table></figure>

<p><strong>修改远程登录权限</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; grant all privileges on *.* to <span class="string">'root'</span>@<span class="string">'%'</span> identified by <span class="string">'123456Aa'</span>;</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; flush privileges;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>dockerfile几个实例</title>
    <url>/2019/10/30/dockerfile%E5%87%A0%E4%B8%AA%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<h1 id="实例说明"><a href="#实例说明" class="headerlink" title="实例说明"></a>实例说明</h1><p>本章会写两个dockerfile实例和一个shell脚本调用dockerfile实例，重点在于shell和dockerfile中环境变量的调用以及调用系统变量，这里有些坑会重点说明。</p>
<h1 id="dockerfile封装jdk"><a href="#dockerfile封装jdk" class="headerlink" title="dockerfile封装jdk"></a>dockerfile封装jdk</h1><p>以下代码存为名为<code>Dockerfile</code>的文件，把下载好的jdk包放在Dockerfile同一目录中，运行dockerfile，即可生成拥有jdk环境的系统镜像，我把镜像上传到阿里云仓库中，方便可以随时使用。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#依赖镜像名称和ID</span></span><br><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"></span><br><span class="line"><span class="comment">#切换工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir  /usr/<span class="built_in">local</span>/java</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#ADD 是相对路径jar,把java添加到容器中</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> jdk-8u191-linux-x64.tar.gz /usr/<span class="built_in">local</span>/java/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置java环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME /usr/local/java/jdk1.<span class="number">8.0</span>_191</span><br><span class="line"><span class="keyword">ENV</span> JRE_HOME $JAVA_HOME/jre</span><br><span class="line"><span class="keyword">ENV</span> CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH</span><br><span class="line"><span class="keyword">ENV</span> PATH $JAVA_HOME/bin:$PATH</span><br><span class="line"><span class="comment">#配置系统语言</span></span><br><span class="line"><span class="keyword">ENV</span> LANG en_US.UTF-<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#运行</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> tail -f /anaconda-post.log</span></span><br></pre></td></tr></table></figure>

<h1 id="dockerfile封装jar包服务"><a href="#dockerfile封装jar包服务" class="headerlink" title="dockerfile封装jar包服务"></a>dockerfile封装jar包服务</h1><p>以下代码存为名为Dockerfile的文件，跟下面shell脚本配合使用，注意：dockerfile中的变量只是容器中的变量，系统变量无法在dockerfile中生效，只有通过ARG向dockerfile中传入系统变量，ARG指令需要在<code>docker build</code>时指定其变量。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#依赖镜像名称和ID</span></span><br><span class="line"><span class="comment">#阿里云内网</span></span><br><span class="line"><span class="keyword">FROM</span> registry-vpc.cn-hangzhou.aliyuncs.com/znknow/page:<span class="number">1.8</span></span><br><span class="line"><span class="comment">#阿里云外网</span></span><br><span class="line"><span class="comment">#FROM registry.cn-hangzhou.aliyuncs.com/znknow/page:1.8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#系统环境变量</span></span><br><span class="line"><span class="keyword">ARG</span> pagej</span><br><span class="line"><span class="keyword">ARG</span> pagep</span><br><span class="line"></span><br><span class="line"><span class="comment">#dockerfile环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> jar $pagej</span><br><span class="line"><span class="keyword">ENV</span> port $pagep</span><br><span class="line"><span class="keyword">ENV</span> LANG en_US.UTF-<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./<span class="variable">$jar</span> /usr/<span class="built_in">local</span>/</span></span><br><span class="line"><span class="keyword">EXPOSE</span> $port</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> java -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,address=12000,server=y,<span class="built_in">suspend</span>=n  -jar /usr/<span class="built_in">local</span>/<span class="variable">$jar</span> -Djava.io.tmpdir=/data/tmp &amp;&gt; /var/<span class="built_in">log</span>/<span class="variable">$jar</span>.<span class="built_in">log</span></span></span><br></pre></td></tr></table></figure>

<h1 id="shell启动dockerfile"><a href="#shell启动dockerfile" class="headerlink" title="shell启动dockerfile"></a>shell启动dockerfile</h1><p>该shell脚本为运行dockerfile并向dockerfile中传入相应变量。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义shell环境变量</span></span><br><span class="line"><span class="built_in">export</span> pagedir=`<span class="built_in">pwd</span>`</span><br><span class="line"><span class="built_in">export</span> pagejar=<span class="variable">$1</span></span><br><span class="line"><span class="built_in">export</span> pageport=<span class="variable">$2</span></span><br><span class="line"><span class="built_in">export</span> pageport3=<span class="variable">$3</span></span><br><span class="line"><span class="built_in">export</span> pagetag=<span class="string">"1.0"</span></span><br><span class="line"><span class="built_in">export</span> pageago=`docker ps -a | grep <span class="variable">$pagejar</span> | cut -d <span class="string">" "</span> -f1`</span><br><span class="line"><span class="built_in">export</span> pageagoim=`docker images | grep <span class="variable">$pagejar</span> |awk -F <span class="string">" "</span> <span class="string">'&#123;print $3&#125;'</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除原镜像和容器，这里不像生成多个相同镜像，也可以使用标签生成多个镜像</span></span><br><span class="line">/usr/bin/docker rm -f <span class="variable">$pageago</span></span><br><span class="line">/usr/bin/docker rmi -f <span class="variable">$pageagoim</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#运行dockerfile指令，--build-arg为传入dockerfile中的环境变量</span></span><br><span class="line">/usr/bin/docker build --build-arg pagej=<span class="variable">$pagejar</span> --build-arg pagep=<span class="variable">$pageport3</span> -t <span class="variable">$pagejar</span>:<span class="variable">$pagetag</span> .</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动容器</span></span><br><span class="line">/usr/bin/docker run --restart always -v <span class="variable">$pagedir</span>:/var/<span class="built_in">log</span>/  -v /etc/localtime:/etc/localtime -v /etc/timezone:/etc/timezone -p <span class="variable">$pageport</span>:<span class="variable">$pageport3</span> --name <span class="variable">$pagejar</span>-<span class="variable">$pagetag</span> -d <span class="variable">$pagejar</span>:<span class="variable">$pagetag</span></span><br></pre></td></tr></table></figure>

<h1 id="docker-zkui"><a href="#docker-zkui" class="headerlink" title="docker-zkui"></a>docker-zkui</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM registry.cn-hangzhou.aliyuncs.com/mmh/jdk:1.8.0</span><br><span class="line"></span><br><span class="line">ENV LANG en_US.UTF-8</span><br><span class="line">ENV JAVA_HOME /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.232.b09-0.el7_7.x86_64</span><br><span class="line">ENV CLASSPATH .:/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.232.b09-0.el7_7.x86_64/dt.jar:/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.232.b09-0.el7_7.x86_64/lib/tools.jar</span><br><span class="line"></span><br><span class="line">ADD ./zkui-2.0-SNAPSHOT-jar-with-dependencies.jar /opt/zkui/zkui-2.0-SNAPSHOT-jar-with-dependencies.jar</span><br><span class="line">ADD ./config.cfg /opt/zkui/config.cfg</span><br><span class="line"></span><br><span class="line">RUN cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line">RUN yum -y install vim net-tools telnet</span><br><span class="line"></span><br><span class="line"><span class="comment"># $zkcluster变量可以在启动镜像时指定</span></span><br><span class="line">ENTRYPOINT sed -i <span class="string">'s/zkServer=.*/zkServer='</span><span class="variable">$zkcluster</span><span class="string">'/'</span> /opt/zkui/config.cfg &amp;&amp; <span class="built_in">cd</span> /opt/zkui/ &amp;&amp; java -Xms512m -Xmx512m -XX:PermSize=128m -jar /opt/zkui/zkui-2.0-SNAPSHOT-jar-with-dependencies.jar</span><br></pre></td></tr></table></figure>

<h1 id="docker-zipkin"><a href="#docker-zipkin" class="headerlink" title="docker-zipkin"></a>docker-zipkin</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM registry.cn-hangzhou.aliyuncs.com/mmh/jdk:1.8.0</span><br><span class="line"></span><br><span class="line">ENV LANG en_US.UTF-8</span><br><span class="line">ENV JAVA_HOME /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.232.b09-0.el7_7.x86_64</span><br><span class="line">ENV CLASSPATH .:/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.232.b09-0.el7_7.x86_64/dt.jar:/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.232.b09-0.el7_7.x86_64/lib/tools.jar</span><br><span class="line"></span><br><span class="line">ADD ./zipkin.tar.gz /data/</span><br><span class="line"></span><br><span class="line">RUN cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line">RUN yum -y install vim net-tools</span><br><span class="line"></span><br><span class="line">ENTRYPOINT <span class="built_in">cd</span> /data/zipkin &amp;&amp; java -Xms512m -Xmx512m -XX:PermSize=128m -jar /data/zipkin/zipkin.jar</span><br></pre></td></tr></table></figure>

<h1 id="docker-disconf"><a href="#docker-disconf" class="headerlink" title="docker-disconf"></a>docker-disconf</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM centos:7.4.1708</span><br><span class="line"></span><br><span class="line">ENV LANG en_US.UTF-8</span><br><span class="line">ENV JAVA_HOME /opt/jdk1.8.0_221</span><br><span class="line">ENV JRE_HOME <span class="variable">$&#123;JAVA_HOME&#125;</span>/jre</span><br><span class="line">ENV CLASSPATH .:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib</span><br><span class="line">ENV PATH <span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$PATH</span></span><br><span class="line">ENV MAVEN_HOME /opt/apache-maven-3.3.9</span><br><span class="line">ENV PATH <span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$MAVEN_HOME</span>/bin</span><br><span class="line">ENV ONLINE_CONFIG_PATH /usr/<span class="built_in">local</span>/disconf/resource</span><br><span class="line">ENV WAR_ROOT_PATH /usr/<span class="built_in">local</span>/disconf/war</span><br><span class="line"></span><br><span class="line">ADD ./jdk-8u221-linux-x64.tar.gz /opt/</span><br><span class="line">ADD ./apache-maven-3.3.9-bin.tar.gz /opt/</span><br><span class="line">ADD ./apache-tomcat-8.5.47.tar.gz /opt/</span><br><span class="line">ADD ./disconf.tar.gz /usr/<span class="built_in">local</span>/</span><br><span class="line">ADD ./nginx.sh /opt/</span><br><span class="line">ADD ./redis.sh /opt/</span><br><span class="line">ADD ./redis-stable.tar.gz /opt/</span><br><span class="line">ADD	./nginx-1.14.2.tar.gz /opt/</span><br><span class="line">ADD	./start.sh /opt/</span><br><span class="line">ADD	./nginx.conf /opt/</span><br><span class="line">ADD	./server.xml /opt/</span><br><span class="line">ADD	./nginx.service /lib/systemd/system/</span><br><span class="line"></span><br><span class="line">RUN /bin/cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="string">'Asia/Shanghai'</span> &gt;/etc/timezone</span><br><span class="line">RUN yum -y install gcc gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel wget vim net-tools telnet</span><br><span class="line">RUN sh /opt/nginx.sh</span><br><span class="line">RUN sh /opt/redis.sh</span><br><span class="line">RUN \mv /opt/nginx.conf /opt/nginx/conf/</span><br><span class="line">RUN \mv /opt/server.xml /opt/apache-tomcat-8.5.47/conf/</span><br><span class="line">RUN <span class="built_in">cd</span> /opt/ &amp;&amp; rm -rf nginx-1.14.2  nginx.sh  redis.sh </span><br><span class="line"></span><br><span class="line">ENTRYPOINT <span class="built_in">cd</span> /opt/redis-stable/ &amp;&amp; ./src/redis-server ./redis.conf &amp;&amp; bash /opt/apache-tomcat-8.5.47/bin/startup.sh &amp;&amp; /opt/nginx/sbin/nginx -g <span class="string">"daemon off;"</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker修改存储目录和连接私库</title>
    <url>/2020/05/14/docker%E4%BF%AE%E6%94%B9%E5%AD%98%E5%82%A8%E7%9B%AE%E5%BD%95%E5%92%8C%E8%BF%9E%E6%8E%A5%E7%A7%81%E5%BA%93/</url>
    <content><![CDATA[<p>两种方式：</p>
<p>方式一：</p>
<p>vim /etc/docker/daemon.json</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [</span><br><span class="line">     <span class="string">"https://bxsfpjcb.mirror.aliyuncs.com"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"max-concurrent-downloads"</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">"log-driver"</span>: <span class="string">"json-file"</span>,</span><br><span class="line">  <span class="attr">"log-level"</span>: <span class="string">"warn"</span>,</span><br><span class="line">  <span class="attr">"log-opts"</span>: &#123;</span><br><span class="line">    <span class="attr">"max-size"</span>: <span class="string">"10m"</span>,</span><br><span class="line">    <span class="attr">"max-file"</span>: <span class="string">"3"</span></span><br><span class="line">    &#125;,</span><br><span class="line"># 修改私库地址</span><br><span class="line">  "insecure-registries":</span><br><span class="line">        ["127.0.0.1","192.168.10.121:30000","192.168.10.122:30000","192.168.10.123:30000"],</span><br><span class="line"># 修改存储目录</span><br><span class="line">  "data-root":"/data/docker"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注：</p>
<ul>
<li>修改存储目录后，cp原docker目录到指定的目录中，重启daemon-reload和docker</li>
</ul>
<p>方式二：</p>
<p>vim /usr/lib/systemd/system/docker.service</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ExecStart=/usr/bin/dockerd --graph /data/docker --insecure-registry=http://192.168.10.121:30000 -H fd:// --containerd=/run/containerd/containerd.sock</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker基本使用</title>
    <url>/2019/06/12/docker%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="docker是什么"><a href="#docker是什么" class="headerlink" title="docker是什么"></a>docker是什么</h1><p><font color="DarkTurquoise"><strong>docker</strong></font>是一个开源的应用容器引擎，开发者可以打包自己的应用到容器里面，然后迁移到其他机器的docker应用中，可以实现快速部署。如果出现的故障，可以通过镜像，快速恢复服务。</p>
<p>docker是利用Linux内核虚拟机化技术（LXC），提供轻量级的虚拟化，以便隔离进程和资源。LXC不是硬件的虚拟化，而是Linux内核的级别的虚拟机化，相对于传统的虚拟机，节省了很多硬件资源。</p>
<p><font color="DarkTurquoise"><strong>NameSpace</strong></font></p>
<p>LXC是利用内核namespace技术，进行进程隔离。其中pid, net, ipc, mnt, uts 等namespace将container的进程, 网络, 消息, 文件系统和hostname 隔离开。</p>
<p><font color="DarkTurquoise"><strong>Control Group</strong></font></p>
<p>LXC利用的宿主机共享的资源，虽然用namespace进行隔离，但是资源使用没有收到限制，这里就需要用到Control Group技术，对资源使用进行限制，设定优先级，资源控制等。</p>
<h1 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>软件源：阿里云镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">yum makecache fast</span><br><span class="line">yum -y install docker-ce</span><br></pre></td></tr></table></figure>

<h2 id="镜像加速"><a href="#镜像加速" class="headerlink" title="镜像加速"></a>镜像加速</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /etc/docker</span><br><span class="line"></span><br><span class="line">tee /etc/docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://pthx0mbz.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure>

<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum remove docker-ce</span><br><span class="line">rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure>

<h1 id="docker常用命令"><a href="#docker常用命令" class="headerlink" title="docker常用命令"></a>docker常用命令</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker info</span><br><span class="line"><span class="comment">#显示守护进程的系统资源</span></span><br><span class="line"></span><br><span class="line">docker search imageID</span><br><span class="line"><span class="comment">#Docker仓库的查询,用户名/镜像名:版本，最好选官方的</span></span><br><span class="line"></span><br><span class="line">docker pull imageID</span><br><span class="line"><span class="comment">#Docker仓库的下载</span></span><br><span class="line"></span><br><span class="line">docker images</span><br><span class="line"><span class="comment">#Docker镜像的查询</span></span><br><span class="line"></span><br><span class="line">docker rmi imageID/镜像名:版本</span><br><span class="line"><span class="comment">#Docker	镜像的删除，-f强制删除</span></span><br><span class="line"></span><br><span class="line">docker ps -a</span><br><span class="line"><span class="comment">#正在运行容器的查询，-a查询所有容器</span></span><br><span class="line"></span><br><span class="line">docker run --restart always -v /data/:/var/<span class="built_in">log</span>/ -v /etc/localtime:/etc/localtime -v /etc/timezone:/etc/timezone -p 服务器端口:容器端口 --name 定义容器名 -d 指定images:tag</span><br><span class="line"><span class="comment">#--restart always在容器自启动</span></span><br><span class="line"><span class="comment">#-v /data/:/var/log/是持久化目录</span></span><br><span class="line"><span class="comment">#-v /etc/localtime:/etc/localtime -v /etc/timezone:/etc/timezone  持久化容器时间，如果没有timezone文件，执行echo 'Asia/Shanghai' &gt;/etc/timezone</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#更新启动命令，在容器创建时没使用的参数</span></span><br><span class="line">docker update --restart=always xxx</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it 容器名 bash</span><br><span class="line"><span class="comment">#进入容器中</span></span><br><span class="line"></span><br><span class="line">docker start/stop 容器别名/ID</span><br><span class="line"><span class="comment">#容器启动停止</span></span><br><span class="line"></span><br><span class="line">docker rm -f 容器名</span><br><span class="line"><span class="comment">#强制删除容器</span></span><br><span class="line"></span><br><span class="line">docker rm -f `docker ps -a -q`</span><br><span class="line"><span class="comment">#删除所有容器</span></span><br><span class="line"></span><br><span class="line">docker rmi -f</span><br><span class="line"><span class="comment">#强制删除镜像</span></span><br><span class="line"></span><br><span class="line">docker save -o rocketmq.tar rocketmq </span><br><span class="line"><span class="comment">#-o：指定保存的镜像的名字；rocketmq.tar：保存到本地的镜像名称；rocketmq：镜像名字</span></span><br><span class="line"></span><br><span class="line">docker load --input rocketmq.tar</span><br><span class="line"><span class="comment">#导入镜像</span></span><br></pre></td></tr></table></figure>

<h1 id="docker网络模式"><a href="#docker网络模式" class="headerlink" title="docker网络模式"></a>docker网络模式</h1><p>docker network ls  #查看当前可用的网络类型<br>–net=网络类型    #创建容器时指定</p>
<p><font color="DarkTurquoise"><strong>–net=bridge</strong></font> 这个是默认值，连接到默认的网桥，容器IP自动生成，相互可以访问，共用一个docker0网桥。</p>
<p><font color="DarkTurquoise"><strong>–net=host</strong></font> 告诉 Docker 不要将容器网络放到隔离的名字空间中，即不要容器化容器内的网络。此时容器使用本地主机的网络，它拥有完全的本地主机接口访问权限。容器进程可以跟主机其 它 root 进程一样可以打开低范围的端口，可以访问本地网络服务比如 D-bus，还可以让容器做一些影响整个主机系统的事情，比如重启主机。因此使用这个选项的时候要非常小心。如果进一步的使用 –privileged=true，容器会被允许直接配置主机的网络堆栈。</p>
<p><font color="DarkTurquoise"><strong>–net=container:NAME_or_ID</strong></font> 让 Docker 将新建容器的进程放到一个已存在容器的网络栈中，新容器进程有自己的文件系统、进程列表和资源限制，但会和已存在的容器共享 IP 地址和端口等网络资源，两者进程可以直接通过 lo 环回接口通信。</p>
<p><font color="DarkTurquoise"><strong>–net=none</strong></font> 让 Docker 将新容器放到隔离的网络栈中，但是不进行网络配置。之后，用户可以自己进行配置。</p>
]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>elasticsearch安装</title>
    <url>/2019/08/08/elasticsearch-6.6.1%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Elasticsearch 是一个分布式可扩展的实时搜索和分析引擎,一个建立在全文搜索引擎 Apache Lucene(TM) 基础上的搜索引擎.当然 Elasticsearch 并不仅仅是 Lucene 那么简单，它不仅包括了全文搜索功能，还可以进行以下工作:</p>
<p>1.分布式实时文件存储，并将每一个字段都编入索引，使其可以被搜索。<br>2.实时分析的分布式搜索引擎。<br>3.可以扩展到上百台服务器，处理PB级别的结构化或非结构化数据。</p>
<h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><p><a href="[[https://hxqxiaoqi.gitee.io/2019/06/04/JDK1.8%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85-linux/](https://hxqxiaoqi.gitee.io/2019/06/04/JDK1.8环境安装-linux/)">先安装：jdk1.8</a></p>
<p>1.下载，解压<br>2.修改linux内核，设置资源参数<br>3.修改配置<br>4.启动elasticsearch、自启动脚本<br>5.安装中文分词</p>
<h2 id="下载，解压"><a href="#下载，解压" class="headerlink" title="下载，解压"></a>下载，解压</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.6.1.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /data</span><br><span class="line">tar xf elasticsearch-6.6.1.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建用户，需要以普通用户启动</span></span><br><span class="line">useradd  elk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建目录，用于存放数据和日志</span></span><br><span class="line"><span class="built_in">cd</span> /data/elasticsearch-6.6.1</span><br><span class="line">mkdir data logs</span><br></pre></td></tr></table></figure>

<h2 id="修改linux内核，设置资源参数"><a href="#修改linux内核，设置资源参数" class="headerlink" title="修改linux内核，设置资源参数"></a>修改linux内核，设置资源参数</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改内核参数 </span></span><br><span class="line">cat &gt;&gt; /etc/sysctl.conf &lt;&lt; EOF</span><br><span class="line">vm.max_map_count=655360 </span><br><span class="line">EOF</span><br><span class="line">sysctl -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改服务器资源参数</span></span><br><span class="line">cat &gt;&gt; /etc/security/limits.conf &lt;&lt; EOF </span><br><span class="line">* soft nofile 655350 </span><br><span class="line">* hard nofile 655350 </span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt;&gt; /etc/security/limits.d/20-nproc.conf &lt;&lt; EOF </span><br><span class="line">elk soft nproc 65536</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /data/elasticsearch-6.6.1</span><br><span class="line"></span><br><span class="line">vim config/elasticsearch.yml	</span><br><span class="line"><span class="comment"># 修改，取消以下配置注释</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数据目录</span></span><br><span class="line">path.data: /data/elasticsearch-6.6.1/data	</span><br><span class="line">path.logs: /data/elasticsearch-6.6.1/logs</span><br><span class="line"><span class="comment">#允许哪个IP访问,0代表所有</span></span><br><span class="line">network.host: 0.0.0.0		</span><br><span class="line">http.port: 9200</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 附权限</span></span><br><span class="line">chown -R elk:elk elasticsearch-6.6.1</span><br></pre></td></tr></table></figure>

<h2 id="启动elasticsearch"><a href="#启动elasticsearch" class="headerlink" title="启动elasticsearch"></a>启动elasticsearch</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su elk</span><br><span class="line"><span class="built_in">cd</span> /data/elasticsearch-6.6.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加-d：后台启动</span></span><br><span class="line">./bin/elasticsearch</span><br></pre></td></tr></table></figure>

<p>启动脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">su -  elk&lt;&lt;!</span><br><span class="line">/data/elasticsearch-6.6.1/bin/elasticsearch -d</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">!</span><br></pre></td></tr></table></figure>

<p>root启动命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 内存最好指定为服务器的一半</span></span><br><span class="line">su - elk -l -c <span class="string">"cd /data/elasticsearch-6.6.1/bin/ &amp;&amp; export JAVA_HOME=/opt/jdk1.8.0_221 &amp;&amp; export ES_JAVA_OPTS='-Xms10g -Xmx10g' &amp;&amp; ./elasticsearch -d"</span></span><br></pre></td></tr></table></figure>

<h2 id="安装中文分词"><a href="#安装中文分词" class="headerlink" title="安装中文分词"></a>安装中文分词</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.6.1/elasticsearch-analysis-ik-6.6.1.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建ik目录</span></span><br><span class="line">mkdir /data/elasticsearch-6.6.1/plugins/ik</span><br><span class="line"></span><br><span class="line">mv elasticsearch-analysis-ik-6.6.1.zip elasticsearch-6.6.1/plugins/ik</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /data/elasticsearch-6.6.1/plugins/ik</span><br><span class="line"></span><br><span class="line">unzip elasticsearch-analysis-ik-6.6.1.zip</span><br></pre></td></tr></table></figure>

<h1 id="docker部署"><a href="#docker部署" class="headerlink" title="docker部署"></a>docker部署</h1><p>elasticsearch部署</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name elasticsearch  -p 9200:9200 -p 9300:9300 -e <span class="string">"discovery.type=single-node"</span> elasticsearch:6.4.0</span><br></pre></td></tr></table></figure>

<p>kibana部署</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -p 5601:5601 --name kibana  -e <span class="string">"elasticsearch.hosts=http://localhost:9200"</span> -d kibana:6.4.0</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>es</tag>
      </tags>
  </entry>
  <entry>
    <title>elasticstarch集群搭建</title>
    <url>/2020/01/22/elasticsearch%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>针对一个索引，Elasticsearch 中其实有专门的衡量索引健康状况的标志，分为三个等级：</p>
<ul>
<li>green，绿色。这代表所有的主分片和副本分片都已分配。你的集群是 100% 可用的。</li>
<li>yellow，黄色。所有的主分片已经分片了，但至少还有一个副本是缺失的。不会有数据丢失，所以搜索结果依然是完整的。不过，你的高可用性在某种程度上被弱化。如果更多的分片消失，你就会丢数据了。所以可把 yellow 想象成一个需要及时调查的警告。</li>
<li>red，红色。至少一个主分片以及它的全部副本都在缺失中。这意味着你在缺少数据：搜索只能返回部分数据，而分配到这个分片上的写入请求会返回一个异常。</li>
</ul>
<p>如果你只有一台主机的话，其实索引的健康状况也是 yellow，因为一台主机，集群没有其他的主机可以防止副本，所以说，这就是一个不健康的状态，因此集群也是十分有必要的。</p>
<h1 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h1><p><strong>主机环境：</strong></p>
<ul>
<li>jdk + es：192.168.40.100</li>
<li>jdk + es：192.168.40.101</li>
<li>jdk + es：192.168.40.102</li>
</ul>
<p><strong>安装步骤：</strong></p>
<ol>
<li><a href="https://hxqxiaoqi.gitee.io/2019/08/08/elasticsearch-6.6.1安装/">参考elasticsearch安装</a> 在两台主机上安装</li>
<li>修改配置文件</li>
</ol>
<p><strong>192.168.40.100配置文件</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ======================== Elasticsearch Configuration =========================</span></span><br><span class="line">  <span class="comment"># 集群名称</span></span><br><span class="line">  <span class="string">cluster.name:</span> <span class="string">mmh-es</span></span><br><span class="line">  <span class="comment"># 节点名称，不同节点命名不能一样</span></span><br><span class="line">  <span class="string">node.name:</span> <span class="string">node-1</span></span><br><span class="line"><span class="comment"># ----------------------------------- Memory -----------------------------------</span></span><br><span class="line">  <span class="comment">#因为centos6.x操作系统不支持SecComp，而elasticsearch5.5.2默认bootstrap.system_call_filter为true进行检测，所以导致检测失败，失败后直接导致ES不能启动。</span></span><br><span class="line">  <span class="string">bootstrap.memory_lock:</span> <span class="literal">false</span></span><br><span class="line">  <span class="string">bootstrap.system_call_filter:</span> <span class="literal">false</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 当前节点Ip，不同节点配置不一样</span></span><br><span class="line">  <span class="string">network.host:</span> <span class="number">192.168</span><span class="number">.40</span><span class="number">.100</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 设置对外服务的http端口,默认为9200 </span></span><br><span class="line">  <span class="string">http.port:</span> <span class="number">9200</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 设置节点间交互的tcp端口,默认是9300 </span></span><br><span class="line">  <span class="string">transport.tcp.port:</span> <span class="number">9300</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 这是一个集群中的主节点的初始列表,当节点(主节点或者数据节点)启动时使用这个列表进行探测 </span></span><br><span class="line">  <span class="string">discovery.zen.ping.unicast.hosts:</span> <span class="string">["192.168.40.100","192.168.40.101","192.168.40.102"]</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 设置这个参数来保证集群中的节点可以知道其它N个有master资格的节点.默认为1,对于大的集群来说,可以设置大一点的值(2-4) </span></span><br><span class="line">  <span class="string">discovery.zen.minimum_master_nodes:</span> <span class="number">1</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">#使用head等插件监控集群信息，需要打开以下配置项</span></span><br><span class="line">  <span class="string">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="string">http.cors.allow-origin:</span> <span class="string">"*"</span></span><br></pre></td></tr></table></figure>

<p><strong>192.168.40.101配置文件</strong></p>
<p>其它与192.168.40.100配置一致</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">node.name:</span> <span class="string">node-2</span></span><br><span class="line"><span class="string">network.host:</span> <span class="number">192.168</span><span class="number">.40</span><span class="number">.101</span></span><br></pre></td></tr></table></figure>

<p><strong>192.168.40.102配置文件</strong></p>
<p>其它与192.168.40.100配置一致</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">node.name:</span> <span class="string">node-3</span></span><br><span class="line"><span class="string">network.host:</span> <span class="number">192.168</span><span class="number">.40</span><span class="number">.102</span></span><br></pre></td></tr></table></figure>

<h1 id="安装head插件"><a href="#安装head插件" class="headerlink" title="安装head插件"></a>安装head插件</h1><p>由于head插件本质上还是一个nodejs的工程，因此需要安装node，使用npm来安装依赖的包。（npm可以理解为maven）</p>
<p>在192.168.40.100操作</p>
<p><strong>node安装</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载nodejs最新的bin包</span></span><br><span class="line">wget https://nodejs.org/dist/v9.3.0/node-v9.3.0-linux-x64.tar.xz　</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">xz -d node-v9.3.0-linux-x64.tar.xz</span><br><span class="line">tar -xf node-v9.3.0-linux-x64.tar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署bin文件，先确定nodejs的bin路径</span></span><br><span class="line">ln -s ~/node-v9.3.0-linux-x64/bin/node /usr/bin/node  </span><br><span class="line">ln -s ~/node-v9.3.0-linux-x64/bin/npm /usr/bin/npm</span><br><span class="line"></span><br><span class="line"><span class="comment"># npm加速 全局安装cnpm 指定来源淘宝镜像</span></span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p><strong>elasticsearch-head安装</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/</span><br><span class="line">git <span class="built_in">clone</span> git://github.com/mobz/elasticsearch-head.git</span><br><span class="line"><span class="built_in">cd</span> elasticsearch-head</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">注：</font> </p>
<ol>
<li>5.0以上，elasticsearch-head 不能放在elasticsearch的 plugins、modules 目录下，否则elasticsearch启动会报错。</li>
<li>这里如果grunt没有安装成功也无所谓，可以通过其他方式启动elasticsearch-head插件（npm run start）。</li>
</ol>
<p><strong>grunt安装</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># grunt是一个很方便的构建工具，可以进行打包压缩、测试、执行等等的工作，5.0里的head插件就是通过grunt启动的。</span></span><br><span class="line"><span class="built_in">cd</span>  /usr/<span class="built_in">local</span>/elasticsearch-head</span><br><span class="line">npm install -g grunt-cli  //执行后会生成node_modules文件夹</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p><strong>修改配置</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span>  /usr/<span class="built_in">local</span>/elasticsearch-head</span><br><span class="line">vim _site/app.js</span><br><span class="line"><span class="comment"># 修改以下内容</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这里的 localhost 是指进入elasticsearch-head页面时默认访问的ES集群地址，把他修改为其中一台ES节点的地址即可</span></span><br><span class="line">this.base_uri = this.config.base_uri || this.prefs.get(<span class="string">"app-base_uri"</span>) || <span class="string">"http://192.168.40.100:9200"</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span>  /usr/<span class="built_in">local</span>/elasticsearch-head</span><br><span class="line">vim Gruntfile.js</span><br><span class="line"><span class="comment"># 修改以下内容</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">connect: &#123;</span><br><span class="line">    server: &#123;</span><br><span class="line">        options: &#123;</span><br><span class="line">            port: <span class="number">9100</span>,</span><br><span class="line">            base: <span class="string">'.'</span>,</span><br><span class="line">            keepalive: <span class="literal">true</span>,</span><br><span class="line">            hostname: <span class="string">'*'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>启动</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/elasticsearch-head </span><br><span class="line"><span class="comment"># 若想在后台运行，结尾追加“&amp;”,也可以使用 npm run start启动</span></span><br><span class="line">grunt server</span><br></pre></td></tr></table></figure>

<p><strong>访问</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 到浏览器访问</span></span><br><span class="line">curl http://192.168.40.100:9100</span><br></pre></td></tr></table></figure>

<p><strong>验证</strong></p>
<ul>
<li>访问，有两个节点即成功</li>
<li>head可以操作和查看es的所有索引</li>
</ul>
<h1 id="集群备份和恢复"><a href="#集群备份和恢复" class="headerlink" title="集群备份和恢复"></a>集群备份和恢复</h1><p>备份es集群是使用<code>snapshot</code> API快照功能，需要一个共同的数据保存仓库，可以是：</p>
<ul>
<li>共享文件系统，比如 NAS，NFS</li>
<li>Amazon S3</li>
<li>HDFS (Hadoop 分布式文件系统)</li>
<li>Azure Cloud</li>
</ul>
<p>这里，我们使用NFS做共享仓库，服务地址为：192.168.40.103，注意，需要集群外的<code>NFS</code>服务端提供目录共享，集群内搭建的<code>NFS</code>服务端会连接报错。</p>
<p>NFS 搭建</p>
<p><a href="https://hxqxiaoqi.gitee.io/2019/06/05/nfs%20目录共享/">NFS 搭建教程跳转</a></p>
<p>创建es系统仓库</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">PUT</span> <span class="string">_snapshot/my_backup</span> </span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="attr">    "type":</span> <span class="string">"fs"</span><span class="string">,</span> </span><br><span class="line"><span class="attr">    "settings":</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">        "location":</span> <span class="string">"/mount/backups/my_backup"</span> </span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>_snapshot</code> es快照接口</li>
<li><code>my_backup</code> 快照仓库，自定义</li>
<li><code>/mount/backups/my_backup</code> NFS共享目录挂在地址，自定义，注意：共享文件系统路径必须确保集群所有节点都可以访问到。</li>
</ul>
<p>快照备份</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 备份索引打开索引</span></span><br><span class="line"><span class="string">PUT</span> <span class="string">_snapshot/my_backup/snapshot_1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份单个索引</span></span><br><span class="line"><span class="string">PUT</span> <span class="string">_snapshot/my_backup/snapshot_2</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="attr">    "indices":</span> <span class="string">"index_1,index_2"</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>snapshot_1</code> 快照名称，自定义</li>
</ul>
<p>查看快照</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">GET</span> <span class="string">_snapshot/my_backup/snapshot_2</span></span><br></pre></td></tr></table></figure>

<p>删除快照</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> _snapshot<span class="regexp">/my_backup/</span>snapshot_2</span><br></pre></td></tr></table></figure>

<p>恢复快照</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 恢复所有索引</span></span><br><span class="line"><span class="string">POST</span> <span class="string">_snapshot/my_backup/snapshot_1/_restore</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复单个索引</span></span><br><span class="line"><span class="string">POST</span> <span class="string">/_snapshot/my_backup/snapshot_1/_restore</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="attr">    "indices":</span> <span class="string">"index_1"</span><span class="string">,</span> </span><br><span class="line"><span class="attr">    "rename_pattern":</span> <span class="string">"index_(.+)"</span><span class="string">,</span> </span><br><span class="line"><span class="attr">    "rename_replacement":</span> <span class="string">"restored_index_$1"</span> </span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>只恢复 <code>index_1</code> 索引，忽略快照中存在的其余索引。</li>
<li>查找所提供的模式能匹配上的正在恢复的索引。</li>
<li>然后把它们重命名成替代的模式。</li>
</ol>
<p>这个会恢复 <code>index_1</code> 到你及群里，但是重命名成了 <code>restored_index_1</code> 。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>es</tag>
      </tags>
  </entry>
  <entry>
    <title>elasticstarch执行语句</title>
    <url>/2020/01/22/elasticsearch%E6%89%A7%E8%A1%8C%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>索引是ElasticSearch存放数据的地方，可以理解为关系型数据库中的一个数据库。</p>
<p><font color="32CD32">es与数据库对应关系</font> </p>
<table>
<thead>
<tr>
<th align="left">数据库类型</th>
<th>库名</th>
<th>表名</th>
<th>记录</th>
<th>字段</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Relational DB</td>
<td>Databases</td>
<td>Tables</td>
<td>Rows</td>
<td>Columns</td>
</tr>
<tr>
<td align="left">Elasticsearch</td>
<td>Indices</td>
<td>Types</td>
<td>Documents</td>
<td>Fields</td>
</tr>
</tbody></table>
<p><font color="32CD32">文档元数据</font></p>
<p>一个文档不只有数据。它还包含了元数据(metadata)——关于文档的信息。三个必须的元数据节点是（其实就是数据库字段）：</p>
<table>
<thead>
<tr>
<th><strong>节点</strong></th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>_index</td>
<td>文档存储的地方</td>
</tr>
<tr>
<td>_type</td>
<td>文档代表的对象的类</td>
</tr>
<tr>
<td>_id</td>
<td>文档的唯一标识</td>
</tr>
</tbody></table>
<p><font color="32CD32">索引创建原则</font> </p>
<ol>
<li>类似的数据放在一个索引，非类似的数据放不同索引：product index（包含了所有的商品），sales index（包含了所有的商品销售数据），inventory index（包含了所有库存相关的数据）。如果你把比如product，sales，human resource（employee），全都放在一个大的index里面，比如说company index，不合适的。</li>
<li>index中包含了很多类似的document：类似是什么意思，其实指的就是说，这些document的fields很大一部分是相同的，你说你放了3个document，每个document的fields都完全不一样，这就不是类似了，就不太适合放到一个index里面去了。</li>
<li>索引名称必须是小写的，不能用下划线开头，不能包含逗号：product，website，blog</li>
</ol>
<h1 id="语法示例"><a href="#语法示例" class="headerlink" title="语法示例"></a>语法示例</h1><h2 id="运维相关"><a href="#运维相关" class="headerlink" title="运维相关"></a>运维相关</h2><p><font color="32CD32">查看ES集群中所有节点信息，以及各个节点内存和CPU相关的指标</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X GET <span class="string">'http://192.168.40.100:9200/_cat/nodes?v'</span></span><br></pre></td></tr></table></figure>

<p><font color="32CD32">查看整个ES集群的状态，以及节点、分片等信息</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XGET <span class="string">'http://192.168.40.100:9200/_cluster/health?pretty'</span></span><br></pre></td></tr></table></figure>

<p><font color="32CD32">如果集群状态不正常了（status是yellow或者red），可以通过以下命令查看具体是哪个index中的哪些shard出问题了：</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XGET <span class="string">'http://192.168.40.100:9200/_cluster/health?pretty&amp;level=indices'</span> </span><br><span class="line">curl -XGET <span class="string">'http://192.168.40.100:9200/_cluster/health?pretty&amp;level=shards'</span></span><br></pre></td></tr></table></figure>

<p><font color="32CD32">列出ES集群中所有的index信息</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XGET <span class="string">'http://192.168.40.100:9200/_cat/indices?v'</span></span><br></pre></td></tr></table></figure>

<p><font color="32CD32">显示索引的别名信息、过滤器和路由信息</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GET _cat/aliases?v</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">查看每个节点的分片数量以及每个节点的磁盘空间使用情况</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GET _cat/allocation?v</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">查看索引或集群的文档数量</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询全部</span></span><br><span class="line">GET _cat/count?v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询单个索引</span></span><br><span class="line">GET _cat/count/books?v</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">查看每个数据节点上被fielddata所使用的堆内存大小</font></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">GET</span> _cat/fielddata?v</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">显示master节点的id、ip和节点名</font></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">GET</span> _cat/master?v</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">返回集群中各节点信息</font></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">GET</span> _cat/nodes?v</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">查看节点所运行插件信息</font></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">GET</span> /_cat/plugins?v</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">查看索引分片恢复进度</font></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">GET</span> /_cat/recovery?v</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">查看集群中的快照库</font></p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">GET <span class="regexp">/_cat/</span><span class="keyword">repositories</span>?v</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">查看集群每个节点的线程池统计信息</font></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">GET</span> /_cat/thread_pool?v</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">查看集群中每个节点的分片信息，包括分片名称、编号、是否是主分片、状态、文档数据、空间大小、所有节点ip、节点名称</font></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">GET</span> /_cat/shards?v</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">查看索引的segment信息，注意，索引数据实际上是以一个个segment的方式进行存储的</font></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">GET</span> /_cat/segments?v</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">查看集群的健康状态</font></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">GET</span> /_cluster/health</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">返回集群的完整状态信息。</font></p>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">GET /_cluster/<span class="keyword">state</span></span><br></pre></td></tr></table></figure>

<p><font color="32CD32">返回集群的完整状态信息。</font></p>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">GET /_cluster/<span class="keyword">state</span>/version</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">获取各种统计数据。包括两部分数据：</font></p>
<ul>
<li>索引层面：分片数、存储大小、内存使用等；</li>
<li>节点层面：节点数量、节点角色、操作系统、jvm信息、内存、CPU、插件等；</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">GET</span> /_cluster/stats</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">明确地执行集群重新路由分配命令。</font></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">POST <span class="regexp">/_cluster/</span>reroute</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">更新集群中的配置，如果是永久配置，需要重启集群；临时配置的訞 不不需要重启集群</font></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">PUT</span> <span class="string">/_cluster/settings</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="attr">  "persistent":</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">"discovery.zen.minimum_master_nodes"</span><span class="string">:1</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<p><font color="32CD32">统计集群中一个或多个节点的统计信息。</font></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">GET</span> <span class="string">/_nodes</span></span><br></pre></td></tr></table></figure>

<p>或：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">GET</span> <span class="string">/_nodes/es01,es02</span></span><br></pre></td></tr></table></figure>

<p><font color="32CD32">获取集群中正在节点中执行的任务信息。</font></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">GET</span> /_tasks</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">查看分片没有被分配的原因，比如通过<code>GET /_cat/shards?v</code>看到某个索引没有被分配，就可以使用下面的命令来查看没有被分配的原因。</font></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">GET</span> <span class="string">/_cluster/allocation/explain</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="attr">  "index":</span><span class="string">"twitter"</span><span class="string">,</span></span><br><span class="line"><span class="attr">  "shard":</span><span class="number">0</span><span class="string">,</span></span><br><span class="line"><span class="attr">  "primary":</span><span class="literal">true</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<p><font color="32CD32">创建索引</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X PUT <span class="string">"http://192.168.40.100:9200/索引名?pretty"</span></span><br></pre></td></tr></table></figure>

<p><font color="32CD32">删除索引</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XDELETE <span class="string">'http://192.168.40.100:9200/索引名'</span></span><br></pre></td></tr></table></figure>

<p><font color="32CD32">关闭索引</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XPOST <span class="string">'http://192.168.40.100:9200/索引名/_close'</span></span><br></pre></td></tr></table></figure>

<p><font color="32CD32">开启索引</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XPOST <span class="string">'http://192.168.40.100:9200/索引名/_open'</span></span><br></pre></td></tr></table></figure>

<p><font color="32CD32">动态修改ES相关配置</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XPUT  <span class="string">'http://192.168.40.100:9200/索引名/_settings'</span> -d <span class="string">'&#123;"index":&#123;"refresh_interval":"60s"&#125;&#125;'</span></span><br></pre></td></tr></table></figure>

<p><font color="32CD32">设置最大查询条数</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XPUT <span class="string">'http://192.168.40.100:9200/索引名/_settings'</span> -d<span class="string">'&#123;"index":&#123;"max_result_window":1000000&#125;&#125;'</span></span><br></pre></td></tr></table></figure>

<p><font color="32CD32">设置默认副本和分片</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XPOST http://192.168.40.100:9200/_template/template_http_request_record -H <span class="string">'Content-Type: application/json'</span> -d <span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  "order": 0,</span></span><br><span class="line"><span class="string">  "index_patterns": [</span></span><br><span class="line"><span class="string">    "*"	#匹配的索引</span></span><br><span class="line"><span class="string">  ],</span></span><br><span class="line"><span class="string">  "settings": &#123;</span></span><br><span class="line"><span class="string">    "index": &#123;</span></span><br><span class="line"><span class="string">      "number_of_shards": "5",</span></span><br><span class="line"><span class="string">      "number_of_replicas": "0"</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  "mappings": &#123;&#125;,</span></span><br><span class="line"><span class="string">  "aliases": &#123;&#125;</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure>

<p><font color="32CD32">变更之前的副本数</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XPUT http://192.168.40.100:9200/_settings -H <span class="string">'Content-Type: application/json'</span> -d <span class="string">'&#123;"index":&#123;"number_of_replicas":0&#125;&#125;'</span></span><br></pre></td></tr></table></figure>

<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p><a href="https://www.cnblogs.com/heqiuyong/p/10351176.html" target="_blank" rel="noopener">查询语法参考该文档</a></p>
<p><font color="32CD32">查询文档</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XGET <span class="string">'http://192.168.40.100:9200/索引名/类型/ID'</span></span><br></pre></td></tr></table></figure>

<p><font color="32CD32">新增文档</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XPOST <span class="string">'http://192.168.40.100:9200/索引名/类型/ID?pretty'</span> -d <span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">"zbbm": "10010103Y",</span></span><br><span class="line"><span class="string">"zzid": "0600",</span></span><br><span class="line"><span class="string">"tjqj": "201712",</span></span><br><span class="line"><span class="string">"gwxd": 3124543444.71,</span></span><br><span class="line"><span class="string">"nbys":2073344433.12</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure>

<p><font color="32CD32">删除文档</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XDELETE <span class="string">'http://192.168.40.100:9200/索引名/类型/ID'</span></span><br></pre></td></tr></table></figure>

<p><font color="32CD32">修改文档</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XPOST <span class="string">'http://192.168.40.100:9200/索引名/类型/ID/_update'</span> -d <span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">"doc":&#123;</span></span><br><span class="line"><span class="string">"gwxd":1237674.23,</span></span><br><span class="line"><span class="string">"nbys": 123233221212</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>es</tag>
      </tags>
  </entry>
  <entry>
    <title>elk监控容器日志</title>
    <url>/2020/01/20/elk%E7%9B%91%E6%8E%A7%E5%AE%B9%E5%99%A8%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>本章使用<code>sebp/elk</code>镜像直接启动elk环境，使用<code>rtoma/logspout-redis-logstash</code>镜像收集改镜像运行主机的所有容器日志。</p>
<h1 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h1><p>主机环境：</p>
<ul>
<li>elk+redis：192.168.40.100</li>
<li>eureka+logspout：192.168.40.102</li>
</ul>
<p>整体架构：<code>eureka</code>日志源–&gt;<code>logspout-redis-logstash</code>收集日志–&gt;<code>redis</code>存储日志–&gt;<code>elk</code>处理，存储，展示日志</p>
<ol>
<li>安装<code>sebp/elk</code>镜像，并修改logstash配置</li>
<li>安装redis镜像</li>
<li>安装<code>rtoma/logspout-redis-logstash</code>镜像</li>
<li>安装eureka</li>
<li>登录kibana查看es索引，并创建kibana日志索引</li>
</ol>
<h2 id="sebp-elk安装"><a href="#sebp-elk安装" class="headerlink" title="sebp/elk安装"></a>sebp/elk安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建持久化目录</span></span><br><span class="line">mkdir -p /data/elk/&#123;elasticsearch,logstash&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置logstash</span></span><br><span class="line"><span class="built_in">cd</span> /data/elk/logstash</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim 02-beats-input.conf</span><br><span class="line"><span class="comment"># 添加以下内容</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  redis &#123;</span><br><span class="line">    host =&gt; <span class="string">"192.168.40.100"</span></span><br><span class="line">    port =&gt; <span class="string">"6379"</span></span><br><span class="line">    data_type =&gt; <span class="string">"list"</span></span><br><span class="line">    key =&gt; <span class="string">"logspout"</span></span><br><span class="line">    codec =&gt; <span class="string">"json"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim 30-output.conf</span><br><span class="line"><span class="comment"># 添加以下内容</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">  <span class="comment"># 丢弃[docker][image]包含内容的日志</span></span><br><span class="line">  <span class="keyword">if</span> [docker][image] =~ /acs\// or [docker][image] =~ /logstash/ or [docker][image] =~ /zookeeper/ &#123;</span><br><span class="line">    drop &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment"># 合并多行错误日志</span></span><br><span class="line">  multiline &#123;</span><br><span class="line">    pattern =&gt; <span class="string">"(^\s)|(^Caused by)"</span></span><br><span class="line">    negate =&gt; <span class="literal">false</span></span><br><span class="line">    what =&gt; <span class="string">"previous"</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment"># 丢弃[message]包含内容的日志</span></span><br><span class="line">  <span class="keyword">if</span> [message] =~ <span class="string">"Xmemcached is stopped at"</span> or [message] =~ <span class="string">"Unable to read additional data from client sessionid"</span> &#123;</span><br><span class="line">    drop &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment"># 移除标签</span></span><br><span class="line">  mutate &#123;</span><br><span class="line">    remove_field =&gt; [ <span class="string">'[docker][labels]'</span> ]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment"># 匹配message包含指定字段的日志，添加标签，用于区分正确和错误日志</span></span><br><span class="line">  grok &#123;</span><br><span class="line">    match =&gt; [ <span class="string">"message"</span>, <span class="string">"Exception"</span> ]</span><br><span class="line">    add_tag =&gt; [<span class="string">"exception-log"</span>]</span><br><span class="line">    tag_on_failure =&gt; []</span><br><span class="line">    add_field =&gt; &#123; <span class="string">"Levels"</span> =&gt; <span class="string">"Errs"</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  grok &#123;</span><br><span class="line">    match =&gt; [ <span class="string">"message"</span>, <span class="string">"ERROR"</span> ]</span><br><span class="line">    add_tag =&gt; [<span class="string">"exception-log"</span>]</span><br><span class="line">    tag_on_failure =&gt; []</span><br><span class="line">    add_field =&gt; &#123; <span class="string">"Levels"</span> =&gt; <span class="string">"Errs"</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 定义索引，存储到es</span></span><br><span class="line">output &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="string">"exception-log"</span> <span class="keyword">in</span> [tags] &#123;</span><br><span class="line">   elasticsearch &#123;</span><br><span class="line">      hosts =&gt; [<span class="string">"localhost"</span>]</span><br><span class="line">      manage_template =&gt; <span class="literal">false</span></span><br><span class="line">      index =&gt; <span class="string">"err-dockerlogs-%&#123;+YYYY.MM.dd&#125;"</span></span><br><span class="line">      document_type =&gt; <span class="string">"%&#123;[@metadata][type]&#125;"</span></span><br><span class="line">      codec =&gt; rubydebug</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; [<span class="string">"localhost"</span>]</span><br><span class="line">    manage_template =&gt; <span class="literal">false</span></span><br><span class="line">    index =&gt; <span class="string">"dockerlogs-%&#123;+YYYY.MM.dd&#125;"</span></span><br><span class="line">    document_type =&gt; <span class="string">"%&#123;[@metadata][type]&#125;"</span></span><br><span class="line">    codec =&gt; rubydebug</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动elk容器</span></span><br><span class="line">docker run --restart always -p 5601:5601 -p 9200:9200 -p 5044:5044 -e ES_MIN_MEM=128m -e ES_MAX_MEM=2048m -v /data/elk/logstash/:/etc/logstash/conf.d/ -v /data/elk/elasticsearch/:/var/lib/elasticsearch/ -v /etc/localtime:/etc/localtime -it --name elk -d sebp/elk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器日志，会有报错：filter/multiline</span></span><br><span class="line">docker logs -f elk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录容器并安装：logstash-filter-multiline插件</span></span><br><span class="line">docker <span class="built_in">exec</span> -it elk bash</span><br><span class="line"><span class="comment"># 容器内执行</span></span><br><span class="line">/opt/logstash/bin/logstash-plugin install logstash-filter-multiline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出容器并重启</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="comment"># 重启容器</span></span><br><span class="line">docker restart elk</span><br></pre></td></tr></table></figure>

<h2 id="redis安装"><a href="#redis安装" class="headerlink" title="redis安装"></a>redis安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --restart always --name redis-elk -p 6379:6379 -d redis</span><br></pre></td></tr></table></figure>

<h2 id="rtoma-logspout-redis-logstash安装"><a href="#rtoma-logspout-redis-logstash安装" class="headerlink" title="rtoma/logspout-redis-logstash安装"></a>rtoma/logspout-redis-logstash安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">docker run --restart -d --name <span class="string">"elk-logspout-redis"</span>  --publish=127.0.0.1:8123:80 -v /var/run/docker.sock:/var/run/docker.sock:ro rtoma/logspout-redis-logstash  <span class="string">'redis://192.168.40.100:6379'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看logspout是否收集日志</span></span><br><span class="line">curl http://127.0.0.1:8123/logs</span><br></pre></td></tr></table></figure>

<h2 id="eureka安装"><a href="#eureka安装" class="headerlink" title="eureka安装"></a>eureka安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">docker run --name eureka -p 8761:8761 -d springcloud/eureka</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监控容器日志</span></span><br><span class="line">docker logs -f eureka</span><br></pre></td></tr></table></figure>

<h2 id="kibana设置索引"><a href="#kibana设置索引" class="headerlink" title="kibana设置索引"></a>kibana设置索引</h2><ol>
<li>浏览器登录kibana：<a href="http://192.168.40.100:5601" target="_blank" rel="noopener">http://192.168.40.100:5601</a></li>
<li>查看elasticsearch索引</li>
<li>创建kibana索引</li>
</ol>
]]></content>
      <categories>
        <category>监控</category>
      </categories>
      <tags>
        <tag>elk</tag>
      </tags>
  </entry>
  <entry>
    <title>flink之REST API调用</title>
    <url>/2020/06/05/flink%E4%B9%8BREST%20API%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>监视API由作为<em>Dispatcher</em>一部分运行的Web服务器支持。默认情况下，此服务器在post侦听<code>8081</code>，可以<code>flink-conf.yaml</code>通过via 进行配置<code>rest.port</code>。请注意，监视API Web服务器和Web仪表板Web服务器当前是相同的，因此可以在同一端口一起运行。但是，它们会响应不同的HTTP URL。</p>
<p>如果有多个Dispatcher（用于高可用性），则每个Dispatcher将运行自己的监视API实例，该实例提供有关在Dispatcher被选为集群负责人时已完成和正在运行的作业的信息。</p>
<p>官网地址：<a href="https://ci.apache.org/projects/flink/flink-docs-stable/monitoring/rest_api.html" target="_blank" rel="noopener">https://ci.apache.org/projects/flink/flink-docs-stable/monitoring/rest_api.html</a></p>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 提交任务</span></span><br><span class="line"><span class="comment"># programArgsList: jar包启动的参数，指定允许环境</span></span><br><span class="line"><span class="comment"># entryClass：jar定义的类，可以根据类指定允许不同任务</span></span><br><span class="line">curl -XPOST -H <span class="string">"Content-Type:application/java-archive"</span> http://192.168.10.111:8081/jars/692d1b44-8f99-4f42-abe0-21579238b57d_mmhsy-dw-flink-1.0-SNAPSHOT.jar/run -d <span class="string">'&#123;"programArgsList":[   "--profiles","test"],"entryClass":"com.mmhsy.flink.member.job.MemberStarMemberInviteJob"&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看job</span></span><br><span class="line">curl -XGET http://192.168.10.111:8081/v1/<span class="built_in">jobs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止job</span></span><br><span class="line"><span class="comment"># a50773a0af8feb5d57a16b6b7191d6b2：是jobid</span></span><br><span class="line">curl -XPATCH  http://192.168.10.111:8081/<span class="built_in">jobs</span>/a50773a0af8feb5d57a16b6b7191d6b2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看包</span></span><br><span class="line">curl -XGET http://192.168.10.111:8081/jars</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传包</span></span><br><span class="line">curl -X POST -F <span class="string">"jarfile=@/root/.jenkins/workspace/mmhsy-dw-flink/target/mmhsy-dw-flink-1.0-SNAPSHOT.jar"</span> http://192.168.10.111:8081/jars/upload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除包</span></span><br><span class="line"><span class="comment"># be820cde-b111-4641-9542-abaef4ca239f_Flink-Demo-1.0-SNAPSHOT.jar：是上传jar时生成的id</span></span><br><span class="line">curl -X DELETE -H <span class="string">"Content-Type:application/x-java-archive"</span> http://192.168.10.111:8081/jars/be820cde-b111-4641-9542-abaef4ca239f_Flink-Demo-1.0-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>flink</tag>
      </tags>
  </entry>
  <entry>
    <title>git基础使用</title>
    <url>/2019/06/03/git%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="git是什么"><a href="#git是什么" class="headerlink" title="git是什么"></a>git是什么</h1><p>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。<br>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。<br>Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。</p>
<h1 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h1><p>linux安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</span><br><span class="line">$ yum -y install git-core</span><br><span class="line">$ git --version</span><br></pre></td></tr></table></figure>

<p>windows安装</p>
<p>官网下载:<a href="https://gitforwindows.org/" target="_blank" rel="noopener">https://gitforwindows.org/</a> 下载后直接安装</p>
<h1 id="git基本概念"><a href="#git基本概念" class="headerlink" title="git基本概念"></a>git基本概念</h1><p>我们先来理解下Git 工作区、暂存区和版本库概念:</p>
<p><font color="DarkTurquoise"><strong>工作区：</strong></font>就是你在电脑里能看到的目录。<br><font color="DarkTurquoise"><strong>暂存区：</strong></font>英文叫stage, 或index。一般存放在 “.git目录下” 下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。<br><font color="DarkTurquoise"><strong>版本库：</strong></font>工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。</p>
<p>当对工作区修改（或新增）的文件执行 “git add” 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。</p>
<p>当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。</p>
<p>当执行 “git reset HEAD” 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。</p>
<p>当执行 “git rm –cached file” 命令时，会直接从暂存区删除文件，工作区则不做出改变。</p>
<p>当执行 “git checkout .” 或者 “git checkout – file” 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。</p>
<p>当执行 “git checkout HEAD .” 或者 “git checkout HEAD file” 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。</p>
<h1 id="git-基本命令"><a href="#git-基本命令" class="headerlink" title="git 基本命令"></a>git 基本命令</h1><p><font color="DarkTurquoise"><strong>git config</strong></font><br>配置个人的用户名称和电子邮件地址,新的设定保存在当前项目的 .git/config 文件里。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"runoob"</span></span><br><span class="line">$ git config --global user.email <span class="built_in">test</span>@runoob.com</span><br></pre></td></tr></table></figure>

<p>要检查已有的配置信息，可以使用 git config –list 命令,这些配置我们也可以在 ~/.gitconfig 或 /etc/gitconfig 看到</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --list</span><br><span class="line">http.postbuffer=2M</span><br><span class="line">user.name=runoob</span><br><span class="line">user.email=<span class="built_in">test</span>@runoob.com</span><br></pre></td></tr></table></figure>

<p><font color="DarkTurquoise"><strong>git init</strong></font><br>该命令执行完后会在当前目录生成一个 .git 目录,该目录包含了资源的所有元数据，其他的项目目录保持不变（不像 SVN 会在每个子目录生成 .svn 目录，Git 只在仓库的根目录生成 .git 目录）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git init</span><br><span class="line">$ git init <span class="string">"指定目录"</span></span><br></pre></td></tr></table></figure>

<p><font color="DarkTurquoise"><strong>git clone</strong></font><br>我们使用 git clone 从现有 Git 仓库中拷贝项目<br>参数说明：<br>repo:Git 仓库。<br>directory:本地目录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> &lt;repo&gt;</span><br></pre></td></tr></table></figure>

<p>如果我们需要克隆到指定的目录，可以使用以下命令格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> &lt;repo&gt; &lt;directory&gt;</span><br></pre></td></tr></table></figure>

<p>如果要指定分支，使用选项-b：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> -b master &lt;repo&gt; &lt;directory&gt;</span><br></pre></td></tr></table></figure>

<p><font color="DarkTurquoise"><strong>git add</strong></font><br>可将该文件添加到缓存</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add <span class="string">"指定文件或目录"</span></span><br><span class="line">$ git add .</span><br></pre></td></tr></table></figure>

<p><font color="DarkTurquoise"><strong>git status</strong></font><br>git status 以查看在你上次提交之后是否有修改。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure>

<p> <font color="DarkTurquoise"><strong>git diff</strong></font><br>执行 git diff 来查看执行 git status 的结果的详细信息。<br>git diff 命令显示已写入缓存与已修改但尚未写入缓存的改动的区别。git diff 有两个主要的应用场景。<br>尚未缓存的改动：git diff<br>查看已缓存的改动： git diff –cached<br>查看已缓存的与未缓存的所有改动：git diff HEAD<br>显示摘要而非整个 diff：git diff –stat</p>
<p> <font color="DarkTurquoise"><strong>git commit</strong></font><br> 使用 git add 命令将想要快照的内容写入缓存区， 而执行 git commit 将缓存区内容添加到仓库中。<br> m: 提交更新说明<br> a: add的使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git commit -am</span><br></pre></td></tr></table></figure>

<p> <font color="DarkTurquoise"><strong>git reset HEAD</strong></font><br>用于取消已缓存的内容。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git reset HEAD hello.php</span><br></pre></td></tr></table></figure>

<p> <font color="DarkTurquoise"><strong>git rm</strong></font><br> 从工作目录中手工删除文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rm &lt;file&gt;</span><br></pre></td></tr></table></figure>

<p>如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rm -f &lt;file&gt;</span><br></pre></td></tr></table></figure>

<p>如果把文件从暂存区域移除，但仍然希望保留在当前工作目录中，换句话说，仅是从跟踪清单中删除，使用 –cached 选项即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rm --cached &lt;file&gt;</span><br></pre></td></tr></table></figure>

<p> <font color="DarkTurquoise"><strong>git mv</strong></font><br>git mv 命令用于移动或重命名一个文件、目录、软连接。</p>
<p> <font color="DarkTurquoise"><strong>git branch (branchname)</strong></font><br> 创建分支</p>
<p> <font color="DarkTurquoise"><strong>git checkout (branchname)</strong></font><br>切换分支命令</p>
<p> <font color="DarkTurquoise"><strong>git merge (branchname)</strong></font><br>合并分支命令</p>
<p> <font color="DarkTurquoise"><strong>git branch</strong></font><br>列出分支基本命令</p>
<p> <font color="DarkTurquoise"><strong>git branch -d</strong></font><br>删除分支命令</p>
<p> <font color="DarkTurquoise"><strong>git log</strong></font><br>列出历史提交记录</p>
<p> <font color="DarkTurquoise"><strong>git log –oneline</strong></font><br> 历史记录的简洁的版本</p>
<p><font color="DarkTurquoise"><strong>git tag</strong> </font><br>查看所有标签</p>
<p><font color="DarkTurquoise"><strong>git tag -a v1.0 -m “标签说明”</strong></font><br>给最新一次提交打上（HEAD）”v1.0”的标签</p>
<p><font color="DarkTurquoise"><strong>git tag -a v1.0 “commit名”</strong></font><br>之前忘记,后面添加标签</p>
<p><font color="DarkTurquoise"><strong>git push origin v1.5</strong></font><br>默认上传不上传标签,需要指定</p>
<p><font color="DarkTurquoise"><strong>git remote add [shortname] [url]</strong></font><br>添加远程库</p>
<p><font color="DarkTurquoise"><strong>git remote rm [别名]</strong></font><br>删除远程仓库</p>
<p><font color="DarkTurquoise"><strong>git remote</strong></font><br><font color="DarkTurquoise"><strong>git remote -v</strong></font><br>查看当前配置有哪些远程仓库</p>
<p><font color="DarkTurquoise"><strong>git fetch</strong></font><br>从远程仓库下载新分支与数据<br>该命令执行完后需要执行git merge 远程分支到你所在的分支。</p>
<p><font color="DarkTurquoise"><strong>git push [alias] [branch]</strong></font><br>以上命令将你的 [branch] 分支推送成为 [alias] 远程仓库上的 [branch] 分支</p>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>go-fastdfs部署</title>
    <url>/2019/07/31/go-fastdfs%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="go-fastdfs介绍"><a href="#go-fastdfs介绍" class="headerlink" title="go-fastdfs介绍"></a>go-fastdfs介绍</h1><p>go-fastdfs是一个基于http协议的分布式文件系统，它基于大道至简的设计理念，一切从简设计，使得它的运维及扩展变得更加简单，它具有高性能、高可靠、无中心、免维护等优点。</p>
<p>下载地址：<a href="https://github.com/sjqzhang/go-fastdfs/releases" target="_blank" rel="noopener">https://github.com/sjqzhang/go-fastdfs/releases</a></p>
<h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h2 id="单点部署"><a href="#单点部署" class="headerlink" title="单点部署"></a>单点部署</h2><p>linux安装，下载已经编译的文件fileserver，执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#赋予执行权限并运行，会在当前目录生成配置文件</span></span><br><span class="line">chmod +x fileserver</span><br><span class="line">./fileserver &amp;</span><br></pre></td></tr></table></figure>

<p>访问：服务器IP:8080<br>下载：上传时会返回文件地址，使用wget或curl即可下载</p>
<h2 id="集群部署"><a href="#集群部署" class="headerlink" title="集群部署"></a>集群部署</h2><p>注意，go-fastdfs不能在同一台上部署集群<br>以单点部署方式部署其它服务器<br>修改conf/cfg.json，例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"PeerID"</span>: <span class="string">"集群内唯一,请使用0-9的单字符，默认自动生成"</span>,</span><br><span class="line"><span class="attr">"peer_id"</span>: <span class="string">"1"</span>,</span><br><span class="line"></span><br><span class="line"><span class="attr">"本主机地址"</span>: <span class="string">"本机http地址,默认自动生成(注意端口必须与addr中的端口一致），必段为内网，自动生成不为内网请自行修改，下同"</span>,</span><br><span class="line"><span class="attr">"host"</span>: <span class="string">"http://192.168.40.100:8080"</span>,</span><br><span class="line"></span><br><span class="line"><span class="attr">"集群"</span>: <span class="string">"集群列表,注意为了高可用，IP必须不能是同一个,同一不会自动备份，且不能为127.0.0.1,且必须为内网IP，默认自动生成"</span>,</span><br><span class="line"><span class="attr">"peers"</span>: [<span class="string">"http://192.168.40.100:8080"</span>,<span class="string">"http://192.168.40.101:8080"</span>,<span class="string">"http://192.168.40.102:8080"</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问任意服务器的go-fastdfs服务，上传文件，其它服务器自动备份</p>
<h2 id="备份数据"><a href="#备份数据" class="headerlink" title="备份数据"></a>备份数据</h2><p>打包整个目录即可</p>
<h1 id="web后台管理部署"><a href="#web后台管理部署" class="headerlink" title="web后台管理部署"></a>web后台管理部署</h1><p>下载地址：<a href="https://github.com/perfree/go-fastdfs-web/releases" target="_blank" rel="noopener">https://github.com/perfree/go-fastdfs-web/releases</a><br>1.安装jdk环境<br>2.上传服务器，解压<br>3.启动：./goFastDfsWeb.sh start<br>4.访问：服务器IP:8088<br>5.注册用户</p>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>go-fastdfs</tag>
      </tags>
  </entry>
  <entry>
    <title>heox主题搭建</title>
    <url>/2019/05/31/heox%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="hexo简介"><a href="#hexo简介" class="headerlink" title="hexo简介"></a>hexo简介</h1><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入hexo官网进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</p>
<h1 id="Hexo搭建步骤"><a href="#Hexo搭建步骤" class="headerlink" title="Hexo搭建步骤"></a>Hexo搭建步骤</h1><ol>
<li>安装Git</li>
<li>安装Node.js</li>
<li>安装Hexo</li>
<li>更换博客主题</li>
</ol>
<h2 id="1-安装git"><a href="#1-安装git" class="headerlink" title="1. 安装git"></a>1. 安装git</h2><p>Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的hexo博客文章，上传到GitHub的工具。到git官网上下载,<strong><a href="https://gitforwindows.org" target="_blank" rel="noopener">https://gitforwindows.org</a></strong> 直接双击安装即可。</p>
<h2 id="2-安装Node-js"><a href="#2-安装Node-js" class="headerlink" title="2. 安装Node.js"></a>2. 安装Node.js</h2><p>Hexo是基于nodeJS编写的，所以需要安装一下nodeJs和里面的npm工具。官网下载：<strong><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a></strong> 直接安装。</p>
<h2 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3. 安装Hexo"></a>3. 安装Hexo</h2><p>前面git和nodejs安装好后，就可以安装hexo了。</p>
<p>创建一个自定义文件夹blog，右击该文件夹选择git bash here，会跳出git命令框。安装命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli	<span class="comment">#安装hexo</span></span><br><span class="line"></span><br><span class="line">hexo -v			<span class="comment">#查看版本</span></span><br><span class="line"></span><br><span class="line">hexo init		<span class="comment">#初始化目录（会在目录下生成安装文件）</span></span><br></pre></td></tr></table></figure>

<p>初始化后，blog文件夹目录下有：</p>
<ul>
<li>node_modules: 依赖包</li>
<li>public：存放生成的页面</li>
<li>scaffolds：生成文章的一些模板</li>
<li>source：用来存放你的文章</li>
<li>themes：主题目录（默认已经有一个主题landscape）</li>
<li>_config.yml: 博客的配置文件</li>
</ul>
<p>启动主题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g				<span class="comment">#编译</span></span><br><span class="line">hexo s				<span class="comment">#启动主题</span></span><br></pre></td></tr></table></figure>

<p>访问localhost:4000即可看到博客内容<br>至此hexo搭建完成</p>
<h2 id="4-更换博客主题"><a href="#4-更换博客主题" class="headerlink" title="4. 更换博客主题"></a>4. 更换博客主题</h2><p>主题官网：<strong><a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a></strong> 这里有200多个主题可以选。点击主题名（以BlueLake）会链接到github上，下载zip包，然后放到themes文件夹下解压为BlueLake。</p>
<p>接下来打开blog目录下的_config.yml配置文件，修改：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">theme: BlueLake			<span class="comment">#名字为解压的主题名</span></span><br></pre></td></tr></table></figure>

<p>运行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g				<span class="comment">#编译</span></span><br><span class="line">hexo s				<span class="comment">#启动主题</span></span><br></pre></td></tr></table></figure>

<p>访问localhost:4000，主题已更换</p>
<p><strong>注：有些主题还需要安装其它样式模块，可以在主题目录下查看README.md文件，是否需要安装模块。</strong></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo主题多终端管理</title>
    <url>/2019/06/02/hexo%E4%B8%BB%E9%A2%98%E5%A4%9A%E7%BB%88%E7%AB%AF%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="搭建目的"><a href="#搭建目的" class="headerlink" title="搭建目的"></a>搭建目的</h1><p>很多人可能家里一台笔记本，公司一个台式机，想两个同时管理博客，同时达到备份的博客主题、文章、配置的目的。<br>下面就介绍一下用gitee来备份博客并同步博客。</p>
<h1 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h1><p>以下步骤统一用A和B电脑举例，A电脑为已经部署hexo客户端，B为另一台没有任何部署的电脑，如果之前都没部署过，请客之前教程<a href="https://hxqxiaoqi.gitee.io/2019/06/02/heox%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA/">heox主题搭建</a>和<a href="https://hxqxiaoqi.gitee.io/2019/06/02/hexo%E4%B8%BB%E9%A2%98%E9%83%A8%E7%BD%B2%E5%88%B0gitee%E6%95%99%E7%A8%8B/">hexo主题部署到gitee教程</a>两个教程</p>
<ol>
<li>新建一个gitee分支hexo，用于上传A电脑的hexo代码</li>
<li>A电脑上传hexo代码到gitee上</li>
<li>B电脑安装好环境，克隆gitee分支代码</li>
<li>常用命令</li>
</ol>
<h2 id="1-新建一个gitee分支hexo"><a href="#1-新建一个gitee分支hexo" class="headerlink" title="1. 新建一个gitee分支hexo"></a>1. 新建一个gitee分支hexo</h2><p>登陆gitee，新建一个分支hexo，用于上传A电脑的hexo代码，master为存放hexo发布的代码，新建hexo分支为hexo客户端代码，我们就是下客户端代码到本机，之后写文章或样式发布到master。</p>
<h2 id="2-A电脑上传hexo代码到gitee上"><a href="#2-A电脑上传hexo代码到gitee上" class="headerlink" title="2. A电脑上传hexo代码到gitee上"></a>2. A电脑上传hexo代码到gitee上</h2><p>进入博客根目录文件夹下，找到.gitignore文件，在最后增加两行内容/.deploy_git和/public<br>然后运行git bash here，初始化仓库，执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<p>如果提示已经有初始化，需要删除目录下所有.git文件，再执行初始化</p>
<p>添加远程仓库，origin为本地远程仓库名，后面是gitee仓库地址：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin https://gitee.com/xxx/xxx.git</span><br></pre></td></tr></table></figure>

<p>如果远程仓库已存在文件，需要执行下面命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 把远程仓库和本地同步，消除差异</span></span><br><span class="line">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure>

<p>添加目录下所有文件到暂存区，执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>

<p>提交并添加更新说明到版本库，执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">"更新说明"</span></span><br></pre></td></tr></table></figure>

<p>推送更新到远程仓库hexo分支，执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push -u origin hexo</span><br></pre></td></tr></table></figure>

<p>如果仓库已经有代码会报错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xu:QProj xiaokai$ git push origin master</span><br><span class="line">To https://gitee.com/XXXXX.git</span><br><span class="line"> ! [rejected]        master -&gt; master (non-fast-forward)</span><br><span class="line">error: failed to push some refs to <span class="string">'https://gitee.com/XXXXX.git'</span></span><br><span class="line">hint: Updates were rejected because the tip of your current branch is behind</span><br><span class="line">hint: its remote counterpart. Integrate the remote changes (e.g.</span><br><span class="line">hint: <span class="string">'git pull ...'</span>) before pushing again.</span><br><span class="line">hint: See the <span class="string">'Note about fast-forwards'</span> <span class="keyword">in</span> <span class="string">'git push --help'</span> <span class="keyword">for</span> details.</span><br></pre></td></tr></table></figure>

<p>执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git fetch		<span class="comment">#从仓库更新代码到本地暂存区</span></span><br><span class="line">git merge origin/hexo	<span class="comment">#暂存区更新代码合并</span></span><br></pre></td></tr></table></figure>

<p>执行git merge又报错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge</span><br><span class="line">fatal: refusing to merge unrelated histories</span><br></pre></td></tr></table></figure>

<p>接着执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull origin hexo --allow-unrelated-histories</span><br></pre></td></tr></table></figure>

<p>然后继续git merge,依然有问题：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fatal: You have not concluded your merge (MERGE_HEAD exists).</span><br><span class="line">Please, commit your changes before you merge.</span><br></pre></td></tr></table></figure>

<p>这个就好处理了，是我们没有提交当前的变化， git add .,git commit -am “提交信息”</p>
<p>然后输入git pull,显示如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Already up-to-date.</span><br></pre></td></tr></table></figure>

<p>最后就可以执行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin hexo</span><br></pre></td></tr></table></figure>

<p>有时还会报错，执行以下命令上传代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin HEAD:hexo</span><br></pre></td></tr></table></figure>

<p>现在可以去gitee上查看hexo分支，已经有hexo客户端代码</p>
<h2 id="3-B电脑安装好环境，克隆gitee分支代码"><a href="#3-B电脑安装好环境，克隆gitee分支代码" class="headerlink" title="3. B电脑安装好环境，克隆gitee分支代码"></a>3. B电脑安装好环境，克隆gitee分支代码</h2><p>在B电脑上同样先安装好node、git、ssh、hexo，安装好插件，新建目录，进入git bash here，执行以下命令克隆代码，会在当前目生成仓库同名目录，可以在这个目录下更新文章，发布博客到gitee。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b hexo https://gitee.com/xxx/xxx.git</span><br></pre></td></tr></table></figure>

<h2 id="4-常用命令"><a href="#4-常用命令" class="headerlink" title="4.  常用命令"></a>4.  常用命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull 				<span class="comment">#同步更新</span></span><br><span class="line">hexo new post <span class="string">"新建文章"</span> 		<span class="comment">#简写形式 hexo n "新建文章"</span></span><br><span class="line">hexo clean 				<span class="comment">#清除旧的public文件夹</span></span><br><span class="line">hexo g 					<span class="comment">#生成静态文件 简写形式 hexo g</span></span><br><span class="line">hexo d					<span class="comment">#发布到github上 简写形式 hexo d</span></span><br><span class="line">git add . 				<span class="comment">#添加更改文件到缓存区</span></span><br><span class="line">git commit -m <span class="string">"更新说明"</span> 		<span class="comment">#提交到本地仓库</span></span><br><span class="line">git push -u origin HEAD:hexo 		<span class="comment">#推送到远程仓库进行备份</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo主题部署到gitee教程</title>
    <url>/2019/06/01/hexo%E4%B8%BB%E9%A2%98%E9%83%A8%E7%BD%B2%E5%88%B0gitee%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="使用gitee原因"><a href="#使用gitee原因" class="headerlink" title="使用gitee原因"></a>使用gitee原因</h1><p>目前国内访问GitHub速度慢，还可能被墙，所以Gitee来构建个人博客。Gitee类似国内版的GitHub，访问速度有保证。</p>
<h1 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h1><ol>
<li>已经安装本地hexo主题，如果还未安装，请查看 <a href="https://hxqxiaoqi.gitee.io/2019/06/02/heox主题搭建/">hexo搭建教程</a></li>
<li>已经注册gitee账号</li>
</ol>
<h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><ol>
<li>创建gitee仓库，获取仓库地址</li>
<li>启用gitee Pages服务，获取url 地址</li>
<li>修改hexo根目录config.xml配置</li>
<li>发布到gitee上</li>
<li>更新gitee Pages服务</li>
</ol>
<h2 id="1-创建gitee仓库，获取仓库地址"><a href="#1-创建gitee仓库，获取仓库地址" class="headerlink" title="1. 创建gitee仓库，获取仓库地址"></a>1. 创建gitee仓库，获取仓库地址</h2><ol>
<li>登陆gitee，点击创建仓库</li>
<li>仓库名称最好取跟个性地址一致的名称，后期完成部署就生成的url可以不需要指定二级目录，博客样式也不会出错</li>
<li>选择公开</li>
<li>其他默认，点击创建</li>
<li>在克隆/下载的标签上可以看到你的仓库地址（例：<a href="https://gitee.com/xxx/xxx.git" target="_blank" rel="noopener">https://gitee.com/xxx/xxx.git</a> ）</li>
</ol>
<h2 id="2-启用gitee-Pages服务，获取url-地址"><a href="#2-启用gitee-Pages服务，获取url-地址" class="headerlink" title="2. 启用gitee Pages服务，获取url 地址"></a>2. 启用gitee Pages服务，获取url 地址</h2><ol>
<li>点击-服务，选择gitee Pages</li>
<li>勾选-强制使用https</li>
<li>点击-启动</li>
<li>等一会儿就会生成你的url，也就是完成部署后的博客访问地址，（例：<a href="https://xxx.gitee.io" target="_blank" rel="noopener">https://xxx.gitee.io</a> ），如果之前仓库名称没有与自己的个性地址一致，生成的地址应该是（<a href="https://xxx.gitee.io/xxx" target="_blank" rel="noopener">https://xxx.gitee.io/xxx</a> ）</li>
</ol>
<h2 id="3-修改hexo根目录config-xml配置"><a href="#3-修改hexo根目录config-xml配置" class="headerlink" title="3. 修改hexo根目录config.xml配置"></a>3. 修改hexo根目录config.xml配置</h2><p>url地址，也就是域名地址，如果url是（ <a href="https://xxx.gitee.io/xxx" target="_blank" rel="noopener">https://xxx.gitee.io/xxx</a> ）这种格式，root设置二级目录名称<br>修改：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">url: https://xxx.gitee.io</span><br><span class="line">root: /</span><br></pre></td></tr></table></figure>

<p>仓库地址，用于上传hexo主题的地址，分支选择，如果没有修改，默认是master<br>添加：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://gitee.com/xxx/xxx.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>注意：冒号后面需要空格</p>
<h2 id="4-发布到gitee上"><a href="#4-发布到gitee上" class="headerlink" title="4. 发布到gitee上"></a>4. 发布到gitee上</h2><p>安装自动部署发布工具</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>清除本地hexo缓存</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>

<p>编译</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<h2 id="码云认证"><a href="#码云认证" class="headerlink" title="码云认证"></a>码云认证</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">"用户名"</span></span><br><span class="line">git config --global user.email <span class="string">"邮箱"</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一次需要再输入码云账户和密码</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<h2 id="5-更新gitee-Pages服务"><a href="#5-更新gitee-Pages服务" class="headerlink" title="5. 更新gitee Pages服务"></a>5. 更新gitee Pages服务</h2><ol>
<li>点击服务，选择gittee Pages，点击更新</li>
<li>访问：<a href="https://xxx.gitee.io" target="_blank" rel="noopener">https://xxx.gitee.io</a></li>
<li>每次hexo发布，都需要更新gittee Pages服务。</li>
<li>至此，博客发布成功</li>
</ol>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>java进程cpu高排查</title>
    <url>/2020/04/02/java%E8%BF%9B%E7%A8%8Bcpu%E9%AB%98%E6%8E%92%E6%9F%A5/</url>
    <content><![CDATA[<p><strong>方法一：</strong></p>
<p>1.jps 获取Java进程的PID。</p>
<p>2.jstack pid &gt;&gt; java.txt 导出CPU占用高进程的线程栈。</p>
<p>3.top -H -p PID 查看对应进程的哪个线程占用CPU过高。</p>
<p>4.echo “obase=16; PID” | bc 将线程的PID转换为16进制,大写转换为小写。</p>
<p>5.在第二步导出的Java.txt中查找转换成为16进制的线程PID。找到对应的线程栈。</p>
<p>6.分析负载高的线程栈都是什么业务操作。优化程序并处理问题。</p>
<p><strong>方法二：</strong></p>
<p>1.使用top 定位到占用CPU高的进程PID</p>
<p>top </p>
<p>通过ps aux | grep PID命令</p>
<p>2.获取线程信息，并找到占用CPU高的线程</p>
<p>ps -mp pid -o THREAD,tid,time | sort -rn</p>
<p>3.将需要的线程ID转换为16进制格式</p>
<p>printf “%x\n” tid</p>
<p>4.打印线程的堆栈信息</p>
<p>jstack pid |grep tid -A 30</p>
<p><strong>脚本</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">pid=`ps aux --sort=-pcpu | head -10|awk <span class="string">'NR==2&#123;print $2&#125;'</span>`</span><br><span class="line">tid=`ps -mp <span class="variable">$pid</span> -o THREAD,tid,time | sort -rn|awk <span class="string">'NR==3&#123;print $8&#125;'</span>`</span><br><span class="line">ptid=`<span class="built_in">printf</span> <span class="string">"%x\n"</span> <span class="variable">$tid</span>`</span><br><span class="line">jstack <span class="variable">$pid</span> |grep <span class="variable">$ptid</span> -A 30</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins部署与备份</title>
    <url>/2019/07/30/jenkins%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%A4%87%E4%BB%BD/</url>
    <content><![CDATA[<h1 id="jenkins介绍"><a href="#jenkins介绍" class="headerlink" title="jenkins介绍"></a>jenkins介绍</h1><p>Jenkins只是一个平台，真正运作的都是插件，它是一个自动化部署工具，通过插件完成拉起源代码、编译、发布等功能。</p>
<p>下载地址：<a href="http://mirrors.jenkins.io/war-stable/latest/jenkins.war" target="_blank" rel="noopener">http://mirrors.jenkins.io/war-stable/latest/jenkins.war</a></p>
<h1 id="jenkins部署"><a href="#jenkins部署" class="headerlink" title="jenkins部署"></a>jenkins部署</h1><p>部署jenkins之前需要安装jdk环境，请按照：<a href="https://hxqxiaoqi.gitee.io/tags/jdk/">jdk环境部署</a> 操作安装jdk。</p>
<h2 id="部署方式一"><a href="#部署方式一" class="headerlink" title="部署方式一"></a>部署方式一</h2><p>1.下载的<strong>Jenkins.war</strong>包上传到服务器<br>2.服务器上执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#前台运行</span></span><br><span class="line">java -jar jenkins.war</span><br><span class="line"></span><br><span class="line"><span class="comment">#后台运行</span></span><br><span class="line">nohup java -jar jenkins.war &amp;&gt; ./jen.log &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取Jenkins密码，访问时需要</span></span><br><span class="line">cat /root/.jenkins/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure>

<p>3.访问：<strong>localhost:8080</strong>，输入密码<br>4.选择默认模式<br>5.设置登录账号密码</p>
<h2 id="部署方式二"><a href="#部署方式二" class="headerlink" title="部署方式二"></a>部署方式二</h2><p>1.安装tomcat<br>2.下载的Jenkins.war包上传到tomcat目录下的webapps目录下<br>3.运行tomcat<br>4.访问：localhost:8080/jenkins</p>
<h2 id="jenkins工作目录说明"><a href="#jenkins工作目录说明" class="headerlink" title="jenkins工作目录说明"></a>jenkins工作目录说明</h2><p>第一次启动jenkins时，会在用户家目录下自动生成 <strong>.jenkins</strong> 的隐藏工作目录。</p>
<p><strong>.jenkins：</strong><br><strong>config.xml：</strong> jenkins 的核心配置文件<br><strong>jobs：</strong> 构建作业的配置细节，及构建产物和数据<br><strong>workspace：</strong> jenkins 对当前作业进行构建的地方<br><strong>builds：</strong> 包含当前作业的构建历史<br><strong>config.xml：</strong> 存放当前作业的所有配置细节<br><strong>nextBuildNumber：</strong> 下一次构建的 number<br><strong>lastStable：</strong> 最后一个稳定构建的链接（成功的构建）<br><strong>lastSuccessful：</strong> 最近成功的构建链接（没有任何编译错误）<br><strong>plugins：</strong> 存放所有已安装的插件，更新 jenkins 不需要重新安装插件<br><strong>users：</strong> 当使用 jenkins 本地用户数据库时，用户信息会存放在这个目录下<br><strong>updates：</strong> 存放可用的插件更新<br><strong>userContent：</strong> 存放用户自己为 jenkins 服务器定制化的一些内容<br><strong>war：</strong> 存放扩展的 web 应用程序，当以单机应用程序的形式运，jenkins 时，会把 web 应用程序解压到这个目录。</p>
<h2 id="更改工作目录"><a href="#更改工作目录" class="headerlink" title="更改工作目录"></a>更改工作目录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#默认jenkins主目录在/root/.jenkins</span></span><br><span class="line">cp -a /root/.jenkins /home/.jenkins</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加profile</span></span><br><span class="line">vim /etc/profile</span><br><span class="line">	<span class="comment">#jenkins</span></span><br><span class="line">	JENKINS_HOME=<span class="string">"/home/.jenkins"</span></span><br><span class="line">	<span class="built_in">export</span> JENKINS_HOME</span><br><span class="line">	</span><br><span class="line"><span class="comment">#重新加载profile</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>

<h1 id="jenkins备份与恢复"><a href="#jenkins备份与恢复" class="headerlink" title="jenkins备份与恢复"></a>jenkins备份与恢复</h1><p>1.登录Jenkins–&gt;选择系统管理–&gt;选择插件管理–&gt;选择可选插件<br>2.搜索ThinBackup插件，安装<br>3.安装成功后，在系统管理中出现ThinBackup选项，点击ThinBackup</p>
<p>设置说明：<br>Backup Now：立即备份，需要设置备份路径，之后在服务器上创建该目录<br>Restore：恢复，按时间选择备份文件<br>Settings：备份设置，设置备份路径，定时备份时间，备份方式等</p>
<h1 id="jenkins配置项目"><a href="#jenkins配置项目" class="headerlink" title="jenkins配置项目"></a>jenkins配置项目</h1><p>这里以java项目举例说明：<br>配置java项目需要安装插件：<strong>Publish Over SSH</strong> 、 <strong>Maven Release Plug-in</strong>和<strong>Git</strong></p>
<p>1.登录jenkins，点击新建视图<br>2.输入项目名，选择简单视图，保存<br>3.在该项目下点击新建任务，输入任务名称，选择构建maven项目，选择ok<br>4.选择<strong>源码管理</strong>的类型，我这边选择git，输入git地址和账号密码<br>5.在<strong>Build</strong>栏目，添加pom配置路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">例1：pom在当前目录</span><br><span class="line">	./pom.xml</span><br><span class="line">	clean install package</span><br><span class="line">		</span><br><span class="line">例2：pom在二级目录</span><br><span class="line">	ytb-manager-server/pom.xml</span><br><span class="line">	clean install -pl ../ytb-manager-server -am</span><br></pre></td></tr></table></figure>

<p>6.在<strong>Post Steps</strong>点击 <strong>Add post-build step</strong>，选择<strong>send files or execute commands over SSH</strong><br>7.ssh配置举例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">name：选择jar包传输的服务器，需要在系统设置中先添加ssh主机</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成jar包位置</span></span><br><span class="line">Source files：ytb-manager-server/target/*.jar</span><br><span class="line"></span><br><span class="line"><span class="comment">#移除Source files路径</span></span><br><span class="line">Remove prefix：ytb-manager-server/target/</span><br><span class="line"></span><br><span class="line"><span class="comment">#jar上传到服务的目录</span></span><br><span class="line">Remote directory：/home/opt/ytb</span><br><span class="line"></span><br><span class="line"><span class="comment">#服务器执行的脚本</span></span><br><span class="line">Exec <span class="built_in">command</span>：</span><br><span class="line">	<span class="comment">#!/bin/bash</span></span><br><span class="line">	<span class="built_in">cd</span> /home/opt/ytb/manager-server</span><br><span class="line">	sh ./stop.sh</span><br><span class="line">	sh ./start.sh</span><br></pre></td></tr></table></figure>

<p>8.保存配置，之后点击立即构建即可查看是否成功。</p>
<h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><h2 id="安装插件失败"><a href="#安装插件失败" class="headerlink" title="安装插件失败"></a>安装插件失败</h2><p>因为国内防火墙的问题，有时候无法获取到Jenkins的插件，或下载失败<br>1.更换插件源地址<br>2.<a href="https://updates.jenkins.io/update-center.json" target="_blank" rel="noopener">https://updates.jenkins.io/update-center.json</a> 更换为 <a href="http://mirror.xmission.com/jenkins/updates/update-center.json" target="_blank" rel="noopener">http://mirror.xmission.com/jenkins/updates/update-center.json</a><br>3.或更换为<a href="https://updates.jenkins.io/update-center.json" target="_blank" rel="noopener">https://updates.jenkins.io/update-center.json</a><br>4.点击提交<br>5.点击立即获取</p>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s之yaml详解</title>
    <url>/2020/05/25/k8s%E4%B9%8Byaml%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="配置介绍"><a href="#配置介绍" class="headerlink" title="配置介绍"></a>配置介绍</h1><p>使用yaml格式创建服务，更容易管理</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span>   <span class="comment">#接口版本</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span>                 <span class="comment">#接口类型</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">cango-demo</span>               <span class="comment">#Deployment名称</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">cango-prd</span>           <span class="comment">#命名空间</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">cango-demo</span>              <span class="comment">#标签</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">   strategy:</span></span><br><span class="line"><span class="attr">    rollingUpdate:</span>  <span class="comment">##由于replicas为3,则整个升级,pod个数在2-4个之间</span></span><br><span class="line"><span class="attr">      maxSurge:</span> <span class="number">1</span>      <span class="comment">#滚动升级时会先启动1个pod</span></span><br><span class="line"><span class="attr">      maxUnavailable:</span> <span class="number">1</span> <span class="comment">#滚动升级时允许的最大Unavailable的pod个数</span></span><br><span class="line"><span class="attr">  template:</span>         </span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">cango-demo</span>  <span class="comment">#模板名称必填</span></span><br><span class="line"><span class="attr">    sepc:</span> <span class="comment">#定义容器模板，该模板可以包含多个容器</span></span><br><span class="line"><span class="attr">      containers:</span>                                                                   </span><br><span class="line"><span class="attr">        - name:</span> <span class="string">cango-demo</span>                                                           <span class="comment">#镜像名称</span></span><br><span class="line"><span class="attr">          image:</span> <span class="string">swr.cn-east-2.myhuaweicloud.com/cango-prd/cango-demo:0.0.1-SNAPSHOT</span> <span class="comment">#镜像地址</span></span><br><span class="line"><span class="attr">          command:</span> <span class="string">[</span> <span class="string">"/bin/sh"</span><span class="string">,"-c","cat</span> <span class="string">/etc/config/path/to/special-key"</span> <span class="string">]</span>    <span class="comment">#启动命令</span></span><br><span class="line"><span class="attr">          args:</span>                                                                <span class="comment">#启动参数</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">'-storage.local.retention=$(STORAGE_RETENTION)'</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">'-storage.local.memory-chunks=$(STORAGE_MEMORY_CHUNKS)'</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">'-config.file=/etc/prometheus/prometheus.yml'</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">'-alertmanager.url=http://alertmanager:9093/alertmanager'</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">'-web.external-url=$(EXTERNAL_URL)'</span></span><br><span class="line">    <span class="comment">#如果command和args均没有写，那么用Docker默认的配置。</span></span><br><span class="line">    <span class="comment">#如果command写了，但args没有写，那么Docker默认的配置会被忽略而且仅仅执行.yaml文件的command（不带任何参数的）。</span></span><br><span class="line">    <span class="comment">#如果command没写，但args写了，那么Docker默认配置的ENTRYPOINT的命令行会被执行，但是调用的参数是.yaml中的args。</span></span><br><span class="line">    <span class="comment">#如果如果command和args都写了，那么Docker默认的配置被忽略，使用.yaml的配置。</span></span><br><span class="line"><span class="attr">          imagePullPolicy:</span> <span class="string">IfNotPresent</span>  <span class="comment">#如果不存在则拉取</span></span><br><span class="line"><span class="attr">          livenessProbe:</span>       <span class="comment">#表示container是否处于live状态。如果LivenessProbe失败，LivenessProbe将会通知kubelet对应的container不健康了。随后kubelet将kill掉container，并根据RestarPolicy进行进一步的操作。默认情况下LivenessProbe在第一次检测之前初始化值为Success，如果container没有提供LivenessProbe，则也认为是Success；</span></span><br><span class="line"><span class="attr">            httpGet:</span></span><br><span class="line"><span class="attr">              path:</span> <span class="string">/health</span> <span class="comment">#如果没有心跳检测接口就为/</span></span><br><span class="line"><span class="attr">              port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">              scheme:</span> <span class="string">HTTP</span></span><br><span class="line"><span class="attr">            initialDelaySeconds:</span> <span class="number">60</span> <span class="comment">##启动后延时多久开始运行检测</span></span><br><span class="line"><span class="attr">            timeoutSeconds:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">            successThreshold:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">            failureThreshold:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">            readinessProbe:</span></span><br><span class="line"><span class="attr">          readinessProbe:</span></span><br><span class="line"><span class="attr">            httpGet:</span></span><br><span class="line"><span class="attr">              path:</span> <span class="string">/health</span> <span class="comment">#如果没有心跳检测接口就为/</span></span><br><span class="line"><span class="attr">              port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">              scheme:</span> <span class="string">HTTP</span></span><br><span class="line"><span class="attr">            initialDelaySeconds:</span> <span class="number">30</span> <span class="comment">##启动后延时多久开始运行检测</span></span><br><span class="line"><span class="attr">            timeoutSeconds:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">            successThreshold:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">            failureThreshold:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">          resources:</span>              <span class="comment">##CPU内存限制</span></span><br><span class="line"><span class="attr">            requests:</span></span><br><span class="line"><span class="attr">              cpu:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">              memory:</span> <span class="number">2048</span><span class="string">Mi</span></span><br><span class="line"><span class="attr">            limits:</span></span><br><span class="line"><span class="attr">              cpu:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">              memory:</span> <span class="number">2048</span><span class="string">Mi</span></span><br><span class="line"><span class="attr">          env:</span>                    <span class="comment">##通过环境变量的方式，直接传递pod=自定义Linux OS环境变量</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">LOCAL_KEY</span>     <span class="comment">#本地Key</span></span><br><span class="line"><span class="attr">              value:</span> <span class="string">value</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">CONFIG_MAP_KEY</span>  <span class="comment">#局策略可使用configMap的配置Key，</span></span><br><span class="line"><span class="attr">              valueFrom:</span></span><br><span class="line"><span class="attr">                configMapKeyRef:</span></span><br><span class="line"><span class="attr">                  name:</span> <span class="string">special-config</span>   <span class="comment">#configmap中找到name为special-config</span></span><br><span class="line"><span class="attr">                  key:</span> <span class="string">special.type</span>      <span class="comment">#找到name为special-config里data下的key</span></span><br><span class="line"><span class="attr">          ports:</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">http</span></span><br><span class="line"><span class="attr">              containerPort:</span> <span class="number">8080</span> <span class="comment">#对service暴露端口</span></span><br><span class="line"><span class="attr">          volumeMounts:</span>     <span class="comment">#挂载volumes中定义的磁盘</span></span><br><span class="line"><span class="attr">          - name:</span> <span class="string">log-cache</span></span><br><span class="line"><span class="attr">            mount:</span> <span class="string">/tmp/log</span></span><br><span class="line"><span class="attr">          - name:</span> <span class="string">sdb</span>       <span class="comment">#普通用法，该卷跟随容器销毁，挂载一个目录</span></span><br><span class="line"><span class="attr">            mountPath:</span> <span class="string">/data/media</span>    </span><br><span class="line"><span class="attr">          - name:</span> <span class="string">nfs-client-root</span>    <span class="comment">#直接挂载硬盘方法，如挂载下面的nfs目录到/mnt/nfs</span></span><br><span class="line"><span class="attr">            mountPath:</span> <span class="string">/mnt/nfs</span></span><br><span class="line"><span class="attr">          - name:</span> <span class="string">example-volume-config</span>  <span class="comment">#高级用法第1种，将ConfigMap的log-script,backup-script分别挂载到/etc/config目录下的一个相对路径path/to/...下，如果存在同名文件，直接覆盖。</span></span><br><span class="line"><span class="attr">            mountPath:</span> <span class="string">/etc/config</span>       </span><br><span class="line"><span class="attr">          - name:</span> <span class="string">rbd-pvc</span>                <span class="comment">#高级用法第2中，挂载PVC(PresistentVolumeClaim)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用volume将ConfigMap作为文件或目录直接挂载，其中每一个key-value键值对都会生成一个文件，key为文件名，value为内容，</span></span><br><span class="line"><span class="attr">  volumes:</span>  <span class="comment"># 定义磁盘给上面volumeMounts挂载</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">log-cache</span></span><br><span class="line"><span class="attr">    emptyDir:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">sdb</span>  <span class="comment">#挂载宿主机上面的目录</span></span><br><span class="line"><span class="attr">    hostPath:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/any/path/it/will/be/replaced</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">example-volume-config</span>  <span class="comment"># 供ConfigMap文件内容到指定路径使用</span></span><br><span class="line"><span class="attr">    configMap:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">example-volume-config</span>  <span class="comment">#ConfigMap中名称</span></span><br><span class="line"><span class="attr">      items:</span></span><br><span class="line"><span class="attr">      - key:</span> <span class="string">log-script</span>           <span class="comment">#ConfigMap中的Key</span></span><br><span class="line"><span class="attr">        path:</span> <span class="string">path/to/log-script</span>  <span class="comment">#指定目录下的一个相对路径path/to/log-script</span></span><br><span class="line"><span class="attr">      - key:</span> <span class="string">backup-script</span>        <span class="comment">#ConfigMap中的Key</span></span><br><span class="line"><span class="attr">        path:</span> <span class="string">path/to/backup-script</span>  <span class="comment">#指定目录下的一个相对路径path/to/backup-script</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">nfs-client-root</span>         <span class="comment">#供挂载NFS存储类型</span></span><br><span class="line"><span class="attr">    nfs:</span></span><br><span class="line"><span class="attr">      server:</span> <span class="number">10.42</span><span class="number">.0</span><span class="number">.55</span>          <span class="comment">#NFS服务器地址</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/opt/public</span>           <span class="comment">#showmount -e 看一下路径</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">rbd-pvc</span>                 <span class="comment">#挂载PVC磁盘</span></span><br><span class="line"><span class="attr">    persistentVolumeClaim:</span></span><br><span class="line"><span class="attr">      claimName:</span> <span class="string">rbd-pvc1</span>         <span class="comment">#挂载已经申请的pvc磁盘</span></span><br></pre></td></tr></table></figure>

<h1 id="nginx安装例子"><a href="#nginx安装例子" class="headerlink" title="nginx安装例子"></a>nginx安装例子</h1><p>创建 deployment</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="comment">#指定的对象名称</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-deployment</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    web:</span> <span class="string">nginx123</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="comment">#副本数</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">3</span></span><br><span class="line"><span class="comment">#选择器</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="comment">#匹配标签：app: nginx</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="comment">#创建具体的pod</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">        image:</span> <span class="attr">nginx:1.12</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>

<p>创建 service</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-service</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="comment">#标签要跟nginx-deployment中对应上</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - port:</span> <span class="number">89</span></span><br><span class="line"><span class="attr">    targetPort:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">nginx</span></span><br></pre></td></tr></table></figure>

<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用yaml文件创建，create创建，需要使用replace更新</span></span><br><span class="line">kubectl create -f nginx_service.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># apply创建，直接执行即更新</span></span><br><span class="line">kubectl apply -f nginx_service.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除配置</span></span><br><span class="line">kubectl delete -f nginx_service.yaml</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s之pod控制器</title>
    <url>/2020/05/26/k8s%E4%B9%8Bpod%E6%8E%A7%E5%88%B6%E5%99%A8/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Pod控制器是用于实现管理pod的中间层，确保pod资源符合预期的状态，pod的资源出现故障时，会尝试 进行重启，当根据重启策略无效，则会重新新建pod的资源。</p>
<p>pod控制器有多种类型：</p>
<ol>
<li><strong>ReplicaSet</strong>：代用户创建指定数量的pod副本数量，确保pod副本数量符合预期状态，并且支持滚动式自动扩容和缩容功能。主要用于配合<code>Deployment</code>控制器使用。</li>
<li><strong>Deployment</strong>：工作在ReplicaSet之上，用于管理无状态应用，目前来说最好的控制器。支持滚动更新和回滚功能，还提供声明式配置。</li>
<li><strong>DaemonSet</strong>：用于确保集群中的每一个节点只运行特定的pod副本，通常用于实现系统级后台任务。比如ELK服务</li>
<li><strong>StatefulSet</strong>：管理有状态应用</li>
</ol>
<h1 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h1><p>功能：</p>
<ul>
<li>（1）使用Deployment来创建ReplicaSet。ReplicaSet在后台创建pod。检查启动状态，看它是成功还是失败。</li>
<li>（2）然后，通过更新Deployment的PodTemplateSpec字段来声明Pod的新状态。这会创建一个新的ReplicaSet，Deployment会按照控制的速率将pod从旧的ReplicaSet移动到新的ReplicaSet中。</li>
<li>（3）如果当前状态不稳定，回滚到之前的Deployment revision。每次回滚都会更新Deployment的revision。</li>
<li>（4）扩容Deployment以满足更高的负载。</li>
<li>（5）暂停Deployment来应用PodTemplateSpec的多个修复，然后恢复上线。</li>
<li>（6）根据Deployment 的状态判断上线是否hang住了。</li>
<li>（7）清除旧的不必要的 ReplicaSet。</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span>　　<span class="comment">#api版本定义</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span>　　<span class="comment">#定义资源类型为Deployment</span></span><br><span class="line"><span class="attr">metadata:</span>　　<span class="comment">#元数据定义</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">myapp</span> <span class="comment">#Deployment名称</span></span><br><span class="line"><span class="attr">    namespace:</span> <span class="string">default</span> <span class="comment">#应用的名称空间</span></span><br><span class="line"><span class="attr">spec:</span>　　<span class="comment">#Deployment的规格定义</span></span><br><span class="line"><span class="attr">    replicas:</span> <span class="number">2</span>　　<span class="comment">#定义副本数量为2个</span></span><br><span class="line"><span class="attr">    selector:</span>　　　　<span class="comment">#标签选择器，定义匹配pod的标签</span></span><br><span class="line"><span class="attr">        matchLabels:</span></span><br><span class="line"><span class="attr">            app:</span> <span class="string">myapp</span></span><br><span class="line"><span class="attr">    template:</span>　　<span class="comment">#pod的模板定义</span></span><br><span class="line"><span class="attr">        metadata:</span>　　<span class="comment">#pod的元数据定义</span></span><br><span class="line"><span class="attr">            labels:</span> 　　<span class="comment">#定义pod的标签，需要和上面定义的标签一致，也可以多出其他标签</span></span><br><span class="line"><span class="attr">                app:</span> <span class="string">myapp</span></span><br><span class="line"><span class="attr">        spec:</span>　　<span class="comment">#pod的规格定义</span></span><br><span class="line"><span class="attr">            containers:</span>　　<span class="comment">#容器定义</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">myapp-container</span>　　<span class="comment">#容器名称</span></span><br><span class="line"><span class="attr">              image:</span> <span class="string">ikubernetes/myapp:v1</span>　　<span class="comment">#容器镜像</span></span><br><span class="line"><span class="attr">              ports:</span>　　<span class="comment">#暴露端口</span></span><br><span class="line"><span class="attr">              - name:</span> <span class="string">http</span></span><br><span class="line"><span class="attr">                containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>

<h1 id="DaemonSet"><a href="#DaemonSet" class="headerlink" title="DaemonSet"></a>DaemonSet</h1><p>DaemonSet 确保全部（或者一些）Node 上运行一个 Pod 的副本。当有 Node 加入集群时，也会为他们新增一个 Pod 。当有 Node 从集群移除时，这些 Pod 也会被回收。删除 DaemonSet 将会删除它创建的所有 Pod。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">metadata:</span> </span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">node-exporter</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">node-exporter</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">ns-monitor</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  revisionHistoryLimit:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">node-exporter</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">node-exporter</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">node-exporter</span></span><br><span class="line"><span class="attr">          image:</span> <span class="string">prom/node-exporter:v0.16.0</span></span><br><span class="line"><span class="attr">          ports:</span></span><br><span class="line"><span class="attr">            - containerPort:</span> <span class="number">9100</span></span><br><span class="line"><span class="attr">              protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">              name:</span>	<span class="string">http</span></span><br><span class="line"><span class="attr">      hostNetwork:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      hostPID:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h1 id="StatefulSet"><a href="#StatefulSet" class="headerlink" title="StatefulSet"></a>StatefulSet</h1><p>一个完整的StatefulSet控制器由一个Headless Service、一个StatefulSet和一个volumeClaimTemplate组成。如下资源清单中的定义：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">  clusterIP:</span> <span class="string">None</span> <span class="comment"># 集群设置None就是headless service 无头服务</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">nginx</span> <span class="comment"># 必须设置项</span></span><br><span class="line"><span class="attr">  serviceName:</span> <span class="string">"nginx"</span>  <span class="comment">#声明它属于哪个Headless Service.</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">3</span> <span class="comment"># 默认1</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">nginx</span> <span class="comment"># 必须设置项</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      terminationGracePeriodSeconds:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">        volumeMounts:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">www</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line"><span class="attr">  volumeClaimTemplates:</span>   <span class="comment">#可看作pvc的模板</span></span><br><span class="line"><span class="attr">  - metadata:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">www</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      accessModes:</span> <span class="string">[</span> <span class="string">"ReadWriteOnce"</span> <span class="string">]</span></span><br><span class="line"><span class="attr">      storageClassName:</span> <span class="string">"gluster-heketi"</span>  <span class="comment">#存储类名，改为集群中已存在的</span></span><br><span class="line"><span class="attr">      resources:</span></span><br><span class="line"><span class="attr">        requests:</span></span><br><span class="line"><span class="attr">          storage:</span> <span class="number">1</span><span class="string">Gi</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Headless Service：名为nginx，用来定义Pod网络标识( DNS domain)。</li>
<li>StatefulSet：定义具体应用，名为Nginx，有三个Pod副本，并为每个Pod定义了一个域名。</li>
<li>volumeClaimTemplates： 存储卷申请模板，创建PVC，指定pvc名称大小，将自动创建pvc，且pvc必须由存储类供应。</li>
</ul>
<p><strong>为什么需要 headless service 无头服务？</strong><br>在用Deployment时，每一个Pod名称是没有顺序的，是随机字符串，因此是Pod名称是无序的，但是在statefulset中要求必须是有序 ，每一个pod不能被随意取代，pod重建后pod名称还是一样的。而pod IP是变化的，所以是以Pod名称来识别。pod名称是pod唯一性的标识符，必须持久稳定有效。这时候要用到无头服务，它可以给每个Pod一个唯一的名称 。</p>
<p><strong>为什么需要volumeClaimTemplate？</strong><br>对于有状态的副本集都会用到持久存储，对于分布式系统来讲，它的最大特点是数据是不一样的，所以各个节点不能使用同一存储卷，每个节点有自已的专用存储，但是如果在Deployment中的Pod template里定义的存储卷，是所有副本集共用一个存储卷，数据是相同的，因为是基于模板来的 ，而statefulset中每个Pod都要自已的专有存储卷，所以statefulset的存储卷就不能再用Pod模板来创建了，于是statefulSet使用volumeClaimTemplate，称为卷申请模板，它会为每个Pod生成不同的pvc，并绑定pv， 从而实现各pod有专用存储。这就是为什么要用volumeClaimTemplate的原因。</p>
]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s之内存和cpu配置</title>
    <url>/2020/05/25/k8s%E4%B9%8B%E5%86%85%E5%AD%98%E5%92%8Ccpu%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>资源请求（requests）：即允许运行的最小资源，pod调度规则根据该值判断。</p>
<p>资源限制（limits）：即允许运行的最大资源，limits不会影响pod调度规则，因此limits总和可以超过服务器提供的总资源数，服务运行超过该值会被kill重启。</p>
<p>另外：k8s仅会确保pod能够获得他们请求的cpu时间额度，他们能否获得额外的cpu时间，则取决于其他正在运行的作业对cpu资源的占用情况。例如，对于总数为1000m的cpu来说，容器a请求使用200m，容器b请求使用500m，在不超出它们各自的最大限额的前提下，余下的300m在双方都需要时会以2:5的方式进行配置。（限制cpu是限制其运行占用cpu时间）</p>
<h1 id="名称空间资源配置"><a href="#名称空间资源配置" class="headerlink" title="名称空间资源配置"></a>名称空间资源配置</h1><p>设置名称空间<code>namespaces</code>默认资源</p>
<p>名称空间设置是应用到名称空间下所有未定义资源配置的pod中，如果pod单独定义资源配置，则优先使用pod定义的配置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看名称空间</span></span><br><span class="line">kubectl get ns</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建名称空间 default</span></span><br><span class="line">kubectl create namespace default</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看名称空间资源配置信息</span></span><br><span class="line">kubectl describe namespaces default</span><br></pre></td></tr></table></figure>

<p>创建 <code>limit-default.yaml</code>：编辑以下内容</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">LimitRange</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">limit-range</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  limits:</span></span><br><span class="line"><span class="attr">  - default:</span></span><br><span class="line"><span class="attr">      cpu:</span> <span class="number">0.25</span></span><br><span class="line"><span class="attr">      memory:</span> <span class="number">2048</span><span class="string">Mi</span></span><br><span class="line"><span class="attr">    defaultRequest:</span></span><br><span class="line"><span class="attr">      cpu:</span> <span class="number">0.1</span></span><br><span class="line"><span class="attr">      memory:</span> <span class="number">128</span><span class="string">Mi</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">Container</span></span><br></pre></td></tr></table></figure>

<p>更新配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 应用配置</span></span><br><span class="line">kubectl create -f <span class="built_in">limit</span>-default.yaml --namespace=default</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果配置还有更改，使用以下命令更新</span></span><br><span class="line">kubectl replace -f <span class="built_in">limit</span>-default.yaml --namespace=default</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看名称空间限制</span></span><br><span class="line">kubectl describe namespaces default</span><br></pre></td></tr></table></figure>

<h1 id="pod资源配置"><a href="#pod资源配置" class="headerlink" title="pod资源配置"></a>pod资源配置</h1><p>pod资源配置有<code>deployment</code> 控制器定义的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 deployment 控制器</span></span><br><span class="line">kubectl get deployment</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 deployment 控制器</span></span><br><span class="line">kubectl edit deployment nginx-deployment</span><br></pre></td></tr></table></figure>

<p>以下为修改内容</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - image:</span> <span class="attr">nginx:1.16</span></span><br><span class="line"><span class="attr">    imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">    lifecycle:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="attr">    - containerPort:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">      protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">    resources:</span></span><br><span class="line"><span class="attr">      limits:</span></span><br><span class="line"><span class="attr">        cpu:</span> <span class="number">500</span><span class="string">m</span></span><br><span class="line"><span class="attr">        memory:</span> <span class="number">500</span><span class="string">Mi</span></span><br><span class="line"><span class="attr">      requests:</span></span><br><span class="line"><span class="attr">        cpu:</span> <span class="number">100</span><span class="string">m</span></span><br><span class="line"><span class="attr">        memory:</span> <span class="number">128</span><span class="string">Mi</span></span><br></pre></td></tr></table></figure>

<p>查看pod修改后的配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get pod nginx-deployment-79788f59b6-nfvst --output=yaml --namespace=default</span><br></pre></td></tr></table></figure>

<p>查看pod所在node节点资源配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl  describe  node node01</span><br></pre></td></tr></table></figure>

<h1 id="资源配置详解"><a href="#资源配置详解" class="headerlink" title="资源配置详解"></a>资源配置详解</h1><p>配置示例</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">LimitRange</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">mylimits</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  limits:</span></span><br><span class="line"><span class="attr">  - max:</span></span><br><span class="line"><span class="attr">      cpu:</span> <span class="string">"4"</span></span><br><span class="line"><span class="attr">      memory:</span> <span class="number">2</span><span class="string">Gi</span></span><br><span class="line"><span class="attr">    min:</span></span><br><span class="line"><span class="attr">      cpu:</span> <span class="number">200</span><span class="string">m</span></span><br><span class="line"><span class="attr">      memory:</span> <span class="number">6</span><span class="string">Mi</span></span><br><span class="line"><span class="attr">    maxLimitRequestRatio:</span></span><br><span class="line"><span class="attr">      cpu:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">      memory:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">  - default:</span></span><br><span class="line"><span class="attr">      cpu:</span> <span class="number">300</span><span class="string">m</span></span><br><span class="line"><span class="attr">      memory:</span> <span class="number">200</span><span class="string">Mi</span></span><br><span class="line"><span class="attr">    defaultRequest:</span></span><br><span class="line"><span class="attr">      cpu:</span> <span class="number">200</span><span class="string">m</span></span><br><span class="line"><span class="attr">      memory:</span> <span class="number">100</span><span class="string">Mi</span></span><br><span class="line"><span class="attr">    max:</span></span><br><span class="line"><span class="attr">      cpu:</span> <span class="string">"2"</span></span><br><span class="line"><span class="attr">      memory:</span> <span class="number">1</span><span class="string">Gi</span></span><br><span class="line"><span class="attr">    min:</span></span><br><span class="line"><span class="attr">      cpu:</span> <span class="number">100</span><span class="string">m</span></span><br><span class="line"><span class="attr">      memory:</span> <span class="number">3</span><span class="string">Mi</span></span><br><span class="line"><span class="attr">    maxLimitRequestRatio:</span></span><br><span class="line"><span class="attr">      cpu:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">      memory:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">Container</span></span><br></pre></td></tr></table></figure>

<p><code>pod</code>部分：</p>
<ol>
<li><code>max</code>表示<code>pod</code>中所有容器资源的<code>Limit</code>值和的上限，也就是整个<code>pod</code>资源的最大<code>Limit</code>，如果<code>pod</code>定义中的<code>Limit</code>值大于<code>LimitRange</code>中的值，则<code>pod</code>无法成功创建。</li>
<li><code>min</code>表示<code>pod</code>中所有容器资源请求总和的下限，也就是所有容器<code>request</code>的资源总和不能小于<code>min</code>中的值，否则<code>pod</code>无法成功创建。</li>
<li><code>maxLimitRequestRatio</code>表示<code>pod</code>中所有容器资源请求的<code>Limit</code>值和<code>request</code>值比值的上限，例如该<code>pod</code>中<code>cpu</code>的<code>Limit</code>值为3，而<code>request</code>为0.5，此时比值为6，创建<code>pod</code>将会失败。</li>
</ol>
<p><code>container</code>部分</p>
<ol>
<li>在<code>container</code>的部分，<code>max</code>、<code>min</code>和<code>maxLimitRequestRatio</code>的含义和<code>pod</code>中的类似，只不过是针对单个的容器而言。下面说明几个情况：</li>
</ol>
<blockquote>
<p>如果<code>container</code>设置了<code>max</code>， <code>pod</code>中的容器必须设置<code>limit</code>，如果未设置，则使用<code>defaultlimt</code>的值，如果<code>defaultlimit</code>也没有设置，则无法成功创建</p>
<p>如果设置了<code>container</code>的<code>min</code>，创建容器的时候必须设置<code>request</code>的值，如果没有设置，则使用<code>defaultrequest</code>，如果没有<code>defaultrequest</code>，则默认等于容器的<code>limit</code>值，如果<code>limit</code>也没有，启动就会报错</p>
</blockquote>
<ol>
<li><code>defaultrequest</code>和<code>defaultlimit</code>则是默认值，注意：<code>pod</code>级别没有这两项设置</li>
</ol>
]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s之更新回滚</title>
    <url>/2020/05/24/k8s%E4%B9%8B%E6%9B%B4%E6%96%B0%E5%9B%9E%E6%BB%9A/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>记录k8s的更新操作</p>
<p>更新的三种方式：</p>
<ol>
<li>kubectl edit 修改配置</li>
<li>kubectl set image 修改镜像版本（只介绍该方法）</li>
<li>kubectl patch 修改配置</li>
</ol>
<h1 id="更新回滚"><a href="#更新回滚" class="headerlink" title="更新回滚"></a>更新回滚</h1><p>以一个简单的deployment为例来进行说明：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-deployment</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">  revisionHistoryLimit:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">        image:</span> <span class="attr">nginx:1.12</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>

<p>创建deployment</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> --record：记录版本，没有该参数无法回滚</span></span><br><span class="line">kubectl apply -f nginx-deployment.yaml --record</span><br></pre></td></tr></table></figure>

<p>更新与回滚</p>
<p>只有spec.template.spec.containers.image或者spec.template.metadata.labels发生变化时才会出发更新rolout操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新镜像版本</span></span><br><span class="line">kubectl <span class="built_in">set</span> image deployment nginx-deployment nginx=nginx:1.14 --record</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看已有版本，数字最大的为当前使用镜像</span></span><br><span class="line">kubectl rollout <span class="built_in">history</span> deployment nginx-deployment</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回滚上一个版本 </span></span><br><span class="line">kubectl rollout undo deployment nginx-deployment</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回滚到指定版本</span></span><br><span class="line">kubectl rollout undo deployment nginx-deployment --to-revision=2</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看升级状态</span></span><br><span class="line">kubectl rollout status deploy nginx </span><br><span class="line"></span><br><span class="line"><span class="comment">#升级暂停</span></span><br><span class="line">kubectl rollout pause deployment nginx </span><br><span class="line"></span><br><span class="line"><span class="comment">#恢复升级</span></span><br><span class="line">kubectl rollout resume deployment nginx</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s安装之sealos</title>
    <url>/2020/05/22/k8s%E5%AE%89%E8%A3%85%E4%B9%8Bsealos/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>极其方便的k8s安装方式</p>
<p>参考资料：</p>
<p>github地址：<a href="https://github.com/fanux/sealos" target="_blank" rel="noopener">https://github.com/fanux/sealos</a></p>
<p>Kuboard：<a href="https://kuboard.cn/install/install-dashboard.html" target="_blank" rel="noopener">https://kuboard.cn/install/install-dashboard.html</a></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><font color="32CD32">虚拟机环境</font></p>
<table>
<thead>
<tr>
<th align="center">主机名</th>
<th align="center">IP地址</th>
<th align="center">系统</th>
</tr>
</thead>
<tbody><tr>
<td align="center">etc01</td>
<td align="center">192.168.10.121</td>
<td align="center">centos7.6</td>
</tr>
<tr>
<td align="center">etc02</td>
<td align="center">192.168.10.122</td>
<td align="center">centos7.6</td>
</tr>
<tr>
<td align="center">etc03</td>
<td align="center">192.168.10.123</td>
<td align="center">centos7.6</td>
</tr>
<tr>
<td align="center">node01</td>
<td align="center">192.168.10.124</td>
<td align="center">centos7.6</td>
</tr>
<tr>
<td align="center">node02</td>
<td align="center">192.168.10.125</td>
<td align="center">centos7.6</td>
</tr>
</tbody></table>
<p><font color="32CD32">安装环境</font></p>
<p>每台虚拟机执行以下脚本，简单的系统优化，也可以不需要执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CentOS-7.6</span></span><br><span class="line">rm -rf /etc/yum.repos.d/*</span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.163.com/.<span class="built_in">help</span>/CentOS7-Base-163.repo</span><br><span class="line">yum clean all &amp;&amp; yum makecache</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export PS1='\[\e[1;32m\][\u@\h \W]\\$ \[\e[0m\]'"</span> &gt;&gt; /etc/bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export TIME_STYLE='+%Y-%m-%d %H:%M:%S'"</span> &gt;&gt; /etc/bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export HISTTIMEFORMAT='%F %T '"</span> &gt;&gt; /etc/profile</span><br><span class="line">sed -i <span class="string">"s/^#UseDNS.*/UseDNS no/g"</span> /etc/ssh/sshd_config</span><br><span class="line">sed -i <span class="string">"s/SELINUX=.*/SELINUX=disabled/g"</span> /etc/selinux/config</span><br><span class="line">systemctl stop firewalld &amp;&amp; systemctl <span class="built_in">disable</span> firewalld &amp;&amp; rpm -e --nodeps firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> chronyd</span><br><span class="line">systemctl stop chronyd</span><br><span class="line">yum -y install iptables-services</span><br><span class="line">systemctl start iptables &amp;&amp; iptables -F &amp;&amp; service iptables save</span><br><span class="line">yum -y install lrzsz net-tools vim psmisc bash-completion kernel-tools tree wget dos2unix ntpdate unzip tcpdump</span><br><span class="line">cat &gt;&gt; ~/.vimrc &lt;&lt;EOF</span><br><span class="line"><span class="built_in">set</span> ts=4</span><br><span class="line"><span class="built_in">set</span> expandtab</span><br><span class="line"><span class="built_in">set</span> paste</span><br><span class="line">EOF</span><br><span class="line"><span class="comment"># 根据虚拟机设置的主机名更改</span></span><br><span class="line">hostnamectl <span class="built_in">set</span>-hostname node03</span><br><span class="line">rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="line">rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm</span><br><span class="line">yum --disablerepo=<span class="string">"*"</span> --enablerepo=<span class="string">"elrepo-kernel"</span> list available</span><br><span class="line">yum --enablerepo=elrepo-kernel install kernel-ml -y</span><br><span class="line">grub2-set-default 0</span><br><span class="line">grub2-mkconfig -o /boot/grub2/grub.cfg</span><br><span class="line">yum install ntp -y</span><br><span class="line">ntpdate -u ntp1.aliyun.com</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">安装命令</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载并安装sealos, sealos是个golang的二进制工具，直接下载拷贝到bin目录即可, release页面也可下载</span></span><br><span class="line">$ wget -c https://sealyun.oss-cn-beijing.aliyuncs.com/latest/sealos &amp;&amp; \</span><br><span class="line">    chmod +x sealos &amp;&amp; mv sealos /usr/bin </span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载离线资源包</span></span><br><span class="line">$ wget -c https://sealyun.oss-cn-beijing.aliyuncs.com/d551b0b9e67e0416d0f9dce870a16665-1.18.0/kube1.18.0.tar.gz </span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装一个三master的kubernetes集群，密码需要一致</span></span><br><span class="line">$ sealos init --passwd 123456 \</span><br><span class="line">	--master 192.168.10.121  --master 192.168.10.122  --master 192.168.10.123  \</span><br><span class="line">	--node 192.168.10.124 \</span><br><span class="line">	--pkg-url /root/kube1.18.0.tar.gz \</span><br><span class="line">	--version v1.18.0</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">集群操作</font></p>
<p>增加master</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sealos join --master 192.168.0.6 --master 192.168.0.7</span><br><span class="line">sealos join --master 192.168.0.6-192.168.0.9  <span class="comment"># 或者多个连续IP</span></span><br></pre></td></tr></table></figure>

<p>增加node</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sealos join --node 192.168.0.6 --node 192.168.0.7</span><br><span class="line">sealos join --node 192.168.0.6-192.168.0.9  <span class="comment"># 或者多个连续IP</span></span><br></pre></td></tr></table></figure>

<p>删除指定master节点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sealos clean --master 192.168.0.6 --master 192.168.0.7</span><br><span class="line">sealos clean --master 192.168.0.6-192.168.0.9  <span class="comment"># 或者多个连续IP</span></span><br></pre></td></tr></table></figure>

<p>删除指定node节点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sealos clean --node 192.168.0.6 --node 192.168.0.7</span><br><span class="line">sealos clean --node 192.168.0.6-192.168.0.9  <span class="comment"># 或者多个连续IP</span></span><br></pre></td></tr></table></figure>

<p>清理集群</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sealos clean</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s之权限管理</title>
    <url>/2020/05/24/k8s%E4%B9%8B%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<p><a href="https://www.orchome.com/1308" target="_blank" rel="noopener">https://www.orchome.com/1308</a></p>
]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s监控脚本</title>
    <url>/2020/07/04/k8s%E7%9B%91%E6%8E%A7%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment"># 获取k8s集群基本信息，根据kubernets模块提供的接口</span></span><br><span class="line">from kubernetes import client, config</span><br><span class="line">from collections import Counter</span><br><span class="line">import requests</span><br><span class="line">import datetime</span><br><span class="line"></span><br><span class="line">config.kube_config.load_kube_config(config_file=<span class="string">"/var/www/html/cgi-bin/b2b-kubeconfig.yaml"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择名称空间</span></span><br><span class="line">clusername = <span class="string">"b2b"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取API的CoreV1Api版本对象</span></span><br><span class="line">v1 = client.CoreV1Api()</span><br><span class="line">k8snamespaces = v1.list_pod_for_all_namespaces(watch=False)</span><br><span class="line">k8snamespacessvc = v1.list_namespaced_service(namespace=clusername)</span><br><span class="line"></span><br><span class="line">nodename = &#123;<span class="string">"192.168.1.10"</span>:<span class="string">"(外网IP1#k1)"</span>,<span class="string">"192.168.1.10"</span>:<span class="string">"(外网IP2#k2)"</span>,<span class="string">"192.168.1.10"</span>:<span class="string">"(外网IP3#k3)"</span>&#125;</span><br><span class="line"></span><br><span class="line">def k8sinfo(podname):</span><br><span class="line">    <span class="comment">#集群接口信息</span></span><br><span class="line">    k8spodinfo = v1.read_namespaced_pod(namespace=clusername,name=podname)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取pod信息</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"&lt;tr&gt;"</span>)</span><br><span class="line">    <span class="keyword">if</span> k8spodinfo.status.pod_ip != None:</span><br><span class="line">        global podip</span><br><span class="line">        podip = k8spodinfo.status.pod_ip</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"&lt;td bgcolor='e8e8e8'&gt;&amp;nbsp;%s&lt;font size='1' color='#575757'&gt;%s&lt;/font&lt;/td&gt;"</span> % (podip,nodename[k8spodinfo.status.host_ip]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"&lt;td bgcolor='e8e8e8' align='center'&gt;None&lt;/td&gt;"</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"&lt;td bgcolor='e8e8e8'&gt;&amp;nbsp;%s&lt;/td&gt;"</span> % (podname))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"&lt;td bgcolor='e8e8e8'&gt;&amp;nbsp;%s &lt;/td&gt;"</span> % (k8spodinfo.status.host_ip))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> k8spodinfo.spec.containers[0].ports[0].container_port != None:</span><br><span class="line">        k8spodport = k8spodinfo.spec.containers[0].ports[0].container_port</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"&lt;td bgcolor='e8e8e8' align='center'&gt;%s&lt;/td&gt;"</span> % (k8spodport))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"&lt;td bgcolor='e8e8e8' align='center'&gt;None&lt;/td&gt;"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取pod运行状态</span></span><br><span class="line">    k8sstatus = k8spodinfo.status.container_statuses[0].ready</span><br><span class="line">    <span class="keyword">if</span> k8sstatus == True:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"&lt;td bgcolor='e8e8e8' align='center'&gt;&lt;font color='green'&gt;&amp;nbsp;True&lt;/font&gt;&lt;/td&gt;"</span>)</span><br><span class="line">    <span class="keyword">elif</span> k8sstatus == False:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"&lt;td bgcolor='e8e8e8' align='center'&gt;&lt;font color='red'&gt;&amp;nbsp;False&lt;/font&gt;&lt;/td&gt;"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"&lt;td bgcolor='e8e8e8' align='center'&gt;&lt;font color='red'&gt;&amp;nbsp;Error&lt;/font&gt;&lt;/td&gt;"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 健康检查</span></span><br><span class="line">    <span class="keyword">if</span> k8spodinfo.spec.containers[0].readiness_probe != None:</span><br><span class="line">        <span class="keyword">if</span> k8spodinfo.spec.containers[0].readiness_probe.http_get != None:</span><br><span class="line">            checkurl = k8spodinfo.spec.containers[0].readiness_probe.http_get</span><br><span class="line">            url=<span class="string">"http://"</span>+podip+<span class="string">":"</span>+str(k8spodport)+checkurl.path</span><br><span class="line">        </span><br><span class="line">            try:</span><br><span class="line">                request = requests.get(url,timeout=2.2)</span><br><span class="line">                httpStatusCode = request.status_code</span><br><span class="line">            except requests.exceptions.ConnectTimeout:</span><br><span class="line">                httpStatusCode = 502</span><br><span class="line">            except requests.exceptions.Timeout:</span><br><span class="line">                httpStatusCode = 503</span><br><span class="line">            except requests.exceptions.ConnectionError:</span><br><span class="line">                httpStatusCode=504</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">if</span> httpStatusCode == 200:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"&lt;td bgcolor='e8e8e8' align='center'&gt;&lt;font color='green'&gt;"</span>+str(httpStatusCode)+<span class="string">"&lt;/font&gt;&lt;/td&gt;"</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"&lt;td bgcolor='e8e8e8' align='center'&gt;&lt;font color='red'&gt;"</span>+str(httpStatusCode)+<span class="string">"&lt;/font&gt;&lt;/td&gt;"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"&lt;td bgcolor='e8e8e8' align='center'&gt;none&lt;/td&gt;"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"&lt;td bgcolor='e8e8e8' align='center'&gt;none&lt;/td&gt;"</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="comment">#版本</span></span><br><span class="line">    <span class="keyword">if</span> k8spodinfo.metadata.annotations[<span class="string">'aliyun.kubernetes.io/deploy-timestamp'</span>] != None:</span><br><span class="line">        k8spodversion = k8spodinfo.metadata.annotations[<span class="string">'aliyun.kubernetes.io/deploy-timestamp'</span>]</span><br><span class="line">        k8spodversion1 = k8spodversion.split(<span class="string">"T"</span>)[0]+<span class="string">" "</span>+k8spodversion.split(<span class="string">"T"</span>)[1].split(<span class="string">"Z"</span>)[0]</span><br><span class="line">        k8spodversion2 = datetime.datetime.strptime(k8spodversion1,<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line">        add = datetime.timedelta(hours=8)</span><br><span class="line">        k8spodversion = (k8spodversion2+add).strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"&lt;td bgcolor='e8e8e8' align='center'&gt;%s&lt;/td&gt;"</span> % (k8spodversion))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"&lt;td bgcolor='e8e8e8' align='center'&gt;None&lt;/td&gt;"</span>)</span><br><span class="line">   </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 重启次数</span></span><br><span class="line">    k8srestart = k8spodinfo.status.container_statuses[0].restart_count</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"&lt;td bgcolor='e8e8e8' align='center'&gt;%s&lt;/td&gt;"</span> % (k8srestart))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#最后重启时间</span></span><br><span class="line">    <span class="keyword">if</span> k8spodinfo.status.container_statuses[0].state.running != None:</span><br><span class="line">        restarttime = k8spodinfo.status.container_statuses[0].state.running.started_at</span><br><span class="line">        restarttime1 = str(restarttime).split(<span class="string">"+"</span>)[0]</span><br><span class="line">        restarttime2 = datetime.datetime.strptime(restarttime1,<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line">        addtime = datetime.timedelta(hours=8)</span><br><span class="line">        restarttime = (restarttime2+addtime).strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"&lt;td bgcolor='e8e8e8' align='center'&gt;%s&lt;/td&gt;"</span> % (restarttime))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"&lt;td bgcolor='e8e8e8' align='center'&gt;None&lt;/td&gt;"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"&lt;/tr&gt;"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 获取pod名，去重，相同pod打印同一表格内</span></span><br><span class="line">def podinfo():</span><br><span class="line">    podapp = []</span><br><span class="line">    podlist = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> k8snamespaces.items:</span><br><span class="line">        <span class="keyword">if</span> i.metadata.namespace == clusername:</span><br><span class="line">            podapp.append(i.metadata.labels[<span class="string">'app'</span>])</span><br><span class="line">            podlist.append(i.metadata.name)</span><br><span class="line">    b = dict(Counter(podapp))</span><br><span class="line">    c = [key <span class="keyword">for</span> key, value <span class="keyword">in</span> b.items() <span class="keyword">if</span> value &gt; 0]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> c:</span><br><span class="line">        <span class="keyword">for</span> cluster <span class="keyword">in</span> k8snamespacessvc.items:</span><br><span class="line">            <span class="keyword">if</span> cluster.spec.selector[<span class="string">'app'</span>] == y:</span><br><span class="line">                cluster_ip = cluster.spec.cluster_ip</span><br><span class="line">                cluster_port = cluster.spec.ports[0].port</span><br><span class="line">                </span><br><span class="line">        <span class="comment">#num = 0</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"&lt;b&gt;&lt;font size=4&gt;%s&lt;/font&gt;&lt;/b&gt;"</span> % (y))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'&lt;table border=1 cellspacing=0&gt;&lt;tr style="color: #ffffff" bgcolor="#444444" align="center"&gt;&lt;td width=220px&gt;&lt;b&gt;Container IP&lt;/b&gt;&lt;/td&gt;&lt;td width=360px&gt;&lt;b&gt;&amp;nbsp;Name&lt;/b&gt;&lt;/td&gt;&lt;td width=150px&gt;&lt;b&gt;node IP&lt;/b&gt;&lt;/td&gt;&lt;td width=62px&gt;&lt;b&gt;&amp;nbsp;Port&lt;/b&gt;&lt;/td&gt;&lt;td width=80px&gt;&lt;b&gt;Status&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;&lt;font size=1&gt;UrlCheck(2.2s)&lt;/font&gt;&lt;/b&gt;&lt;/td&gt;&lt;td width=130px&gt;&lt;b&gt;Version&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;&lt;font size=1&gt;Refresh_Conf&lt;/font&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;Log&lt;/b&gt;&lt;/td&gt;&lt;td&gt;restart&lt;/td&gt;&lt;td&gt;restarttime&lt;/td&gt;&lt;/tr&gt;'</span>)</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> podlist:</span><br><span class="line">            <span class="keyword">if</span> x.startswith(y):</span><br><span class="line">                <span class="comment">#num = num+1</span></span><br><span class="line">                k8sinfo(x)</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">'&lt;/table&gt;'</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"&lt;br&gt;&lt;br&gt;"</span>)</span><br><span class="line">        </span><br><span class="line">podinfo()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>脚本</category>
      </categories>
      <tags>
        <tag>python脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>kvm安装与使用</title>
    <url>/2019/10/26/kvm%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><strong>kvm：</strong> 全称“基于内核的虚拟机”，是一个开源的软件，基于内核的虚拟化技术，实际是嵌入系统的一个虚拟化模块，通过优化内核来使用虚拟技术，该内核模块使得Linux变成一个hypervisor，虚拟机使用Linux自身的调度器进行管理。（就是说Linux要部署一个kvm模块，他才能变成hypervisor层）。</p>
<p>kvm是基于CPU的类型进行管理。</p>
<ol>
<li>用户空间：指的是用户得到一个虚拟机。</li>
<li>内核空间：指的是你的kvm宿主机里面它部署的虚拟化的软件，是通过驱动内核来实现的。</li>
</ol>
<p><strong>组件说明：</strong></p>
<ol>
<li>虚机：指的是用户的得到一个虚拟机层。</li>
<li>Guest：指的我们虚拟机，也称VM。</li>
<li>kvm：运行在内核空间，提供CPU和内存的虚拟。</li>
<li>QEMU（扩展软件）：帮我们提供了虚拟机的I/O设备（CPU 内存 显示器），其他的硬件虚拟化。</li>
<li>kvm有一个内核模块叫kvm.ko，它来提供我们CPU和内存。</li>
<li>Libvirt：kvm的管理工具。</li>
<li>virt-viewer：轻量级桌面工具。</li>
<li>bridge-utils ：网桥工具。</li>
<li>virt-install：KVM虚拟机的管理主要是通过virsh命令对虚拟机进行管理。</li>
</ol>
<p><strong>环境要求：</strong></p>
<ol>
<li>KVM需要硬件⽀持, 所以需要开启虚拟化⽀持。</li>
<li>硬件设备直接在BIOS设置开启CPU虚拟化。</li>
<li>个⼈电脑同样进⼊BIOS开启虚拟化⽀持。</li>
<li>VM需要找到对应虚拟机开启对应的VT-EPT虚拟化技术。</li>
</ol>
<h1 id="部署kvm"><a href="#部署kvm" class="headerlink" title="部署kvm"></a>部署kvm</h1><p><strong>安装</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y qemu-kvm libvirt virt-install bridge-utils virt-viewer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否开启虚拟化</span></span><br><span class="line">lsmod |grep kvm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动管理工具</span></span><br><span class="line">systemctl start  libvirtd</span><br><span class="line">systemctl <span class="built_in">enable</span> libvirtd</span><br></pre></td></tr></table></figure>

<p><strong>修改网卡</strong></p>
<p>vim  /etc/sysconfig/network-scripts/ifcfg-ens33</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">NAME=ens33</span><br><span class="line">DEVICE=ens33</span><br><span class="line">BOOTPROTO=none</span><br><span class="line">NM_CONTROLLED=no</span><br><span class="line">ONBOOT=yes</span><br><span class="line">BRIDGE=br0</span><br></pre></td></tr></table></figure>

<p>vim ifcfg-br0<br>设置为本机IP，当作网桥</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">NAME=br0</span><br><span class="line">DEVICE=br0</span><br><span class="line">ONBOOT=yes</span><br><span class="line">NETBOOT=yes</span><br><span class="line">IPV6INIT=no</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">NM_CONTROLLED=no</span><br><span class="line">TYPE=Bridge</span><br><span class="line">IPADDR=192.168.0.127</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=192.168.0.1</span><br><span class="line">DNS1=8.8.8.8</span><br></pre></td></tr></table></figure>

<p>重启网卡</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure>

<p>查看网桥</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brctl show</span><br></pre></td></tr></table></figure>

<p><strong>创建虚拟机</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建目录，iso用于存放系统镜像，kvm用于存放创建的虚拟机磁盘文件，保证空间</span></span><br><span class="line">mkdir -p /data/&#123;iso,kvm&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入镜像到iso目录下</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建虚拟磁盘</span></span><br><span class="line"><span class="built_in">cd</span> /data/kvm/; qemu-img create -f qcow2 /data/kvm/disk/flink02.qcow2 200G</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建虚拟机</span></span><br><span class="line"><span class="comment"># --arch=x86_64 为虚拟机请求一个非本地CPU架构，这个选项当前只对qemu客户机有效，但是不能够使用加速机制。如果忽略，在虚拟机中将使用主机CPU架构。</span></span><br><span class="line"><span class="comment"># --vcpus=1 cpu数</span></span><br><span class="line"><span class="comment"># --disk 指定磁盘类型，bus：磁盘总结类型，其值可以为ide、scsi、usb、virtio或xen；cache：缓存模型，其值有none、writethrouth（缓存读）及writeback（缓存读写）。</span></span><br><span class="line"><span class="comment"># --os-type 针对一类操作系统优化虚拟机配置</span></span><br><span class="line"><span class="comment"># --vnc vnc监听端口</span></span><br><span class="line">virt-install -n flink02 --arch=x86_64 --vcpus=4 -r 16384 --disk path=/data/kvm/disk/flink02.qcow2,io=native,bus=virtio,cache=none --network bridge=br0,model=virtio --os-type=linux --os-variant=rhel7 --cdrom /data/ISO/CentOS-7-x86_64-DVD-1611.iso --vnc --vncport=7001 --vnclisten=0.0.0.0 --video=vga</span><br><span class="line"></span><br><span class="line"><span class="comment"># 另开一个终端，查看虚拟机列表</span></span><br><span class="line">virsh list</span><br></pre></td></tr></table></figure>

<h1 id="安装vnc"><a href="#安装vnc" class="headerlink" title="安装vnc"></a>安装vnc</h1><p><strong>linux下载vnc服务端</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y tigervnc-server tigervnc-server-module</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动vnc，进入交互式界面，设置vnc连接密码</span></span><br><span class="line">vncserver</span><br></pre></td></tr></table></figure>

<p><strong>在windows：</strong> <a href="https://d11.baidupcs.com/file/19d5f22dd5351b10c7a82795ae827a35?bkt=en-40ebf341379bd9a045bd167e394aeff34204e2a7e4b35305754d10c11832e851a73cb4e9880a6a61235817c8f4333c966853e26d73ff6081d3426a1254004497&xcode=b706998e826bf38845c23a653cfd0e778ba2f1aa68560750fa8414341c215772bd8a81a5f5880760f5ba5cbb0ec279470b2977702d3e6764&fid=2102443798-250528-571824942489132&time=1571651441&sign=FDTAXGERLQBHSKf-DCb740ccc5511e5e8fedcff06b081203-FFA8cEc5B5k%2BrjpzUNnP3YFmVUc%3D&to=d11&size=257415&sta_dx=257415&sta_cs=536&sta_ft=rar&sta_ct=7&sta_mt=7&fm2=MH%2CYangquan%2CAnywhere%2C%2Czhejiang%2Ccnc&ctime=1480492285&mtime=1480492285&resv0=cdnback&resv1=0&resv2=&resv3=&resv4=257415&vuk=2119336240&iv=0&htype=&randtype=&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-5bb5273a92a673518b9592e9aacfc8b85a43abf896bfd998c53c12f594777c6d230f09398f426c034cca91fa8f01245e72cd9c07e86e37c1305a5e1275657320&sl=68616270&expires=8h&rt=sh&r=515599588&vbdid=3495373818&fin=vnc_82537_82537.rar&fn=vnc_82537_82537.rar&rtype=1&dp-logid=6812741667613920645&dp-callid=0.1&hps=1&tsl=200&csl=200&csign=6zDaKLjJFnzw3jAXKwtvq08JXtQ%3D&so=0&ut=6&uter=4&serv=0&uc=370421133&ti=54c943154d8629031741981d4efd601089cd4022ba64c95a&reqlabel=250528_f&by=themis" target="_blank" rel="noopener">下载vncviewer客户端</a></p>
<p>打开vncviewer，连接虚拟机，端口为创建系统时指定的7000，可以看到图形化安装显示，安装系统。<br>注：配置ip，需要同一局域网，如果不同，需要设置路由记录，之后就可以使用ssh工具连接虚拟机了。</p>
<p><strong>查看vnc密码</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/libvirt/qemu</span><br><span class="line">vim 虚拟机配置文件</span><br></pre></td></tr></table></figure>

<h1 id="修改虚拟机root密码"><a href="#修改虚拟机root密码" class="headerlink" title="修改虚拟机root密码"></a>修改虚拟机root密码</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装编辑工具</span></span><br><span class="line">yum -y install libguestfs-tools</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在你的另外的机器上面，查看root的shadow文件，复制root的密码文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关掉虚拟机</span></span><br><span class="line">virsh xxxx shutdown  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑虚拟机shadow文件</span></span><br><span class="line">virt-edit xxx /etc/shadow</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动虚拟机 </span></span><br><span class="line">virsh xxxx start</span><br></pre></td></tr></table></figure>

<h1 id="扩大虚拟机内存和cpu"><a href="#扩大虚拟机内存和cpu" class="headerlink" title="扩大虚拟机内存和cpu"></a>扩大虚拟机内存和cpu</h1><p><strong>方法一</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看虚拟机信息</span></span><br><span class="line">virsh dominfo etc01</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭虚拟机</span></span><br><span class="line">virsh shutdown etc01</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置虚拟机最大内存</span></span><br><span class="line">virsh setmaxmem etc01 8388608</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启虚拟机</span></span><br><span class="line">virsh start etc01</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置虚拟机可以内存</span></span><br><span class="line"><span class="comment"># 临时修改</span></span><br><span class="line">virsh setmem etc01 8388608</span><br><span class="line"><span class="comment"># 永久修改，编辑配置文件</span></span><br><span class="line">virsh edit etc01</span><br></pre></td></tr></table></figure>

<p><strong>方法二</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 永久修改，编辑配置文件</span></span><br><span class="line">virsh edit etc01</span><br></pre></td></tr></table></figure>

<h1 id="磁盘扩容"><a href="#磁盘扩容" class="headerlink" title="磁盘扩容"></a>磁盘扩容</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭虚拟机</span></span><br><span class="line">virsh destroy test1</span><br><span class="line"><span class="comment"># 添加容量</span></span><br><span class="line">qemu-img resize /data/kvm/disk/test1.qcow2 +100G</span><br><span class="line"><span class="comment"># 查看容量</span></span><br><span class="line">qemu-img info /data/kvm/disk/test1.qcow2</span><br><span class="line"><span class="comment"># 启动虚拟机</span></span><br><span class="line">virsh start test1</span><br><span class="line"><span class="comment"># 使用vnc登录</span></span><br><span class="line"><span class="comment"># 查看磁盘分区</span></span><br><span class="line">fdisk -l</span><br><span class="line"><span class="comment"># 给多余容量分区，按n添加分区，按p添加主分区，按w保存推出，按t修改分区格式为8e</span></span><br><span class="line">fdisk /dev/vda3</span><br><span class="line"><span class="comment"># 重新加载分区</span></span><br><span class="line">partprobe</span><br><span class="line"><span class="comment"># 创建pv</span></span><br><span class="line">pvcreate /dev/vda3</span><br><span class="line"><span class="comment"># 查看并添加pv搭配vg中</span></span><br><span class="line">vgdisplay</span><br><span class="line">vgextend centos /dev/vda3</span><br><span class="line"><span class="comment"># 查看并扩容已有分区</span></span><br><span class="line">lvdisplay</span><br><span class="line">lvresize -L +50G /dev/mapper/centos-root</span><br><span class="line"><span class="comment"># 扩充文件系统</span></span><br><span class="line">resize2fs /dev/mapper/centos-root</span><br></pre></td></tr></table></figure>

<h1 id="kvm常用命令"><a href="#kvm常用命令" class="headerlink" title="kvm常用命令"></a>kvm常用命令</h1><p><strong>命令帮助</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">virsh --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>

<p><strong>查看虚拟机状态</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">virsh list --all</span><br></pre></td></tr></table></figure>

<p><strong>关机</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">virsh shutdown win2k8r2</span><br></pre></td></tr></table></figure>

<p><strong>强制关闭电源</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">virsh destroy win2k8r2</span><br></pre></td></tr></table></figure>

<p><strong>通过配置文件创建虚拟机</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">virsh create /etc/libvirt/qemu/win2k8r2.xml</span><br></pre></td></tr></table></figure>

<p><strong>设置虚拟机开机自启</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开机启动</span></span><br><span class="line">virsh autostart win2k8r2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消开机启动</span></span><br><span class="line">virsh autostart --<span class="built_in">disable</span> win2k8r2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看虚拟机是否自启</span></span><br><span class="line">ll /etc/libvirt/qemu/autostart/</span><br></pre></td></tr></table></figure>

<p><strong>删除虚拟机</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 该命令只删除配置文件，并不删除磁盘文件</span></span><br><span class="line">virsh undefine win2k8r2</span><br></pre></td></tr></table></figure>

<p><strong>导出虚拟机配置文件</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">virsh dumpxml win2k8r2 &gt; /etc/libvirt/qemu/win2k8r2_bak.xml</span><br></pre></td></tr></table></figure>

<p><strong>通过配置文件恢复原KVM虚拟机</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv /etc/libvirt/qemu/win2k8r2_bak.xml /etc/libvirt/qemu/win2k8r2.xml</span><br><span class="line">virsh define /etc/libvirt/qemu/win2k8r2.xml</span><br></pre></td></tr></table></figure>

<p><strong>编辑配置文件</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">virsh edit win2k8r2</span><br></pre></td></tr></table></figure>

<p><strong>挂起</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">virsh <span class="built_in">suspend</span> win2k8r2</span><br></pre></td></tr></table></figure>

<p><strong>恢复</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">virsh resume win2k8r2</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux基础</category>
      </categories>
      <tags>
        <tag>kvm</tag>
      </tags>
  </entry>
  <entry>
    <title>linux优化</title>
    <url>/2019/11/05/linux%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>linux相关优化</p>
<h1 id="虚拟机优化"><a href="#虚拟机优化" class="headerlink" title="虚拟机优化"></a>虚拟机优化</h1><p>用于第一次安装完linux后，执行，关闭防火墙和安装常用工具。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CentOS-7.4.1708</span></span><br><span class="line">rm -rf /etc/yum.repos.d/*</span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.163.com/.<span class="built_in">help</span>/CentOS7-Base-163.repo </span><br><span class="line">yum clean all &amp;&amp; yum makecache</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export PS1='\[\e[1;32m\][\u@\h \W]\\$ \[\e[0m\]'"</span> &gt;&gt; /etc/bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export TIME_STYLE='+%Y-%m-%d %H:%M:%S'"</span> &gt;&gt; /etc/bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export HISTTIMEFORMAT='%F %T '"</span> &gt;&gt; /etc/profile</span><br><span class="line">sed -i <span class="string">"s/^#UseDNS.*/UseDNS no/g"</span> /etc/ssh/sshd_config </span><br><span class="line">sed -i <span class="string">"s/SELINUX=.*/SELINUX=disabled/g"</span> /etc/selinux/config</span><br><span class="line">systemctl stop firewalld &amp;&amp; systemctl <span class="built_in">disable</span> firewalld &amp;&amp; rpm -e --nodeps firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> chronyd </span><br><span class="line">systemctl stop chronyd</span><br><span class="line">yum -y install iptables-services</span><br><span class="line">systemctl start iptables &amp;&amp; iptables -F &amp;&amp; service iptables save</span><br><span class="line">yum -y install lrzsz net-tools vim psmisc bash-completion kernel-tools tree wget dos2unix ntpdate unzip tcpdump </span><br><span class="line">cat &gt;&gt; ~/.vimrc &lt;&lt;EOF</span><br><span class="line"><span class="built_in">set</span> ts=4</span><br><span class="line"><span class="built_in">set</span> expandtab</span><br><span class="line"><span class="built_in">set</span> paste</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CentOS-8.2</span></span><br><span class="line">rm -rf /etc/yum.repos.d/*</span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-8.repo</span><br><span class="line">yum clean all &amp;&amp; yum makecache</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export PS1='\[\e[1;32m\][\u@\h \W]\\$ \[\e[0m\]'"</span> &gt;&gt; /etc/bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export TIME_STYLE='+%Y-%m-%d %H:%M:%S'"</span> &gt;&gt; /etc/bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export HISTTIMEFORMAT='%F %T '"</span> &gt;&gt; /etc/profile</span><br><span class="line">sed -i <span class="string">"s/^#UseDNS.*/UseDNS no/g"</span> /etc/ssh/sshd_config </span><br><span class="line">sed -i <span class="string">"s/SELINUX=.*/SELINUX=disabled/g"</span> /etc/selinux/config</span><br><span class="line">sed -i <span class="string">"s/pool 2.centos.pool.ntp.org iburst/#pool 2.centos.pool.ntp.org iburst/g"</span> /etc/chrony.conf</span><br><span class="line">sed -i <span class="string">'4a server ntp.aliyun.com iburst'</span> /etc/chrony.conf</span><br><span class="line">systemctl restart chronyd.service</span><br><span class="line">systemctl <span class="built_in">enable</span> chronyd.service</span><br><span class="line">chronyc sources -v</span><br><span class="line">timedatectl <span class="built_in">set</span>-timezone Asia/Shanghai</span><br><span class="line">systemctl stop firewalld &amp;&amp; systemctl <span class="built_in">disable</span> firewalld &amp;&amp; rpm -e --nodeps firewalld</span><br><span class="line">yum -y install iptables-services</span><br><span class="line">systemctl start iptables &amp;&amp; iptables -F &amp;&amp; service iptables save</span><br><span class="line">yum -y install lrzsz net-tools vim psmisc bash-completion kernel-tools tree wget dos2unix unzip tcpdump </span><br><span class="line">cat &gt;&gt; ~/.vimrc &lt;&lt;EOF</span><br><span class="line"><span class="built_in">set</span> ts=4</span><br><span class="line"><span class="built_in">set</span> expandtab</span><br><span class="line"><span class="built_in">set</span> paste</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h1 id="内核优化"><a href="#内核优化" class="headerlink" title="内核优化"></a>内核优化</h1><p>Linux服务器内核参数优化,主要是指在Linux系统中针对业务服务应用而进行的系统内核参数调整,优化并无一定的标准.下面是生产环境下Linux常见的内核优化:</p>
<p>vim /etc/sysctl.conf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭ipv6</span></span><br><span class="line">net.ipv6.conf.all.disable_ipv6 = 1</span><br><span class="line">net.ipv6.conf.default.disable_ipv6 = 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 避免放大攻击</span></span><br><span class="line">net.ipv4.icmp_echo_ignore_broadcasts = 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启恶意icmp错误消息保护</span></span><br><span class="line">net.ipv4.icmp_ignore_bogus_error_responses = 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭路由转发</span></span><br><span class="line">net.ipv4.ip_forward = 0</span><br><span class="line">net.ipv4.conf.all.send_redirects = 0</span><br><span class="line">net.ipv4.conf.default.send_redirects = 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启反向路径过滤</span></span><br><span class="line">net.ipv4.conf.all.rp_filter = 1</span><br><span class="line">net.ipv4.conf.default.rp_filter = 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理无源路由的包</span></span><br><span class="line">net.ipv4.conf.all.accept_source_route = 0</span><br><span class="line">net.ipv4.conf.default.accept_source_route = 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭sysrq功能</span></span><br><span class="line">kernel.sysrq = 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># core文件名中添加pid作为扩展名</span></span><br><span class="line">kernel.core_uses_pid = 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启SYN洪水攻击保护</span></span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改消息队列长度</span></span><br><span class="line">kernel.msgmnb = 65536</span><br><span class="line">kernel.msgmax = 65536</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置最大内存共享段大小bytes</span></span><br><span class="line">kernel.shmmax = 68719476736</span><br><span class="line">kernel.shmall = 4294967296</span><br><span class="line"></span><br><span class="line"><span class="comment"># timewait的数量，默认180000</span></span><br><span class="line">net.ipv4.tcp_max_tw_buckets = 6000</span><br><span class="line">net.ipv4.tcp_sack = 1</span><br><span class="line">net.ipv4.tcp_window_scaling = 1</span><br><span class="line">net.ipv4.tcp_rmem = 4096        87380   4194304</span><br><span class="line">net.ipv4.tcp_wmem = 4096        16384   4194304</span><br><span class="line">net.core.wmem_default = 8388608</span><br><span class="line">net.core.rmem_default = 8388608</span><br><span class="line">net.core.rmem_max = 16777216</span><br><span class="line">net.core.wmem_max = 16777216</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目</span></span><br><span class="line">net.core.netdev_max_backlog = 262144</span><br><span class="line"></span><br><span class="line"><span class="comment"># 限制仅仅是为了防止简单的DoS 攻击</span></span><br><span class="line">net.ipv4.tcp_max_orphans = 3276800</span><br><span class="line"></span><br><span class="line"><span class="comment"># 未收到客户端确认信息的连接请求的最大值</span></span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 262144</span><br><span class="line">net.ipv4.tcp_timestamps = 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 内核放弃建立连接之前发送SYNACK 包的数量</span></span><br><span class="line">net.ipv4.tcp_synack_retries = 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 内核放弃建立连接之前发送SYN 包的数量</span></span><br><span class="line">net.ipv4.tcp_syn_retries = 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用timewait 快速回收</span></span><br><span class="line">net.ipv4.tcp_tw_recycle = 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启重用。允许将TIME-WAIT sockets 重新用于新的TCP 连接</span></span><br><span class="line">net.ipv4.tcp_tw_reuse = 1</span><br><span class="line">net.ipv4.tcp_mem = 94500000 915000000 927000000</span><br><span class="line">net.ipv4.tcp_fin_timeout = 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当keepalive 起用的时候，TCP 发送keepalive 消息的频度。缺省是2 小时</span></span><br><span class="line">net.ipv4.tcp_keepalive_time = 30</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许系统打开的端口范围</span></span><br><span class="line">net.ipv4.ip_local_port_range = 1024    65000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改防火墙表大小，默认65536</span></span><br><span class="line">net.netfilter.nf_conntrack_max=655350</span><br><span class="line">net.netfilter.nf_conntrack_tcp_timeout_established=1200</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保无人能修改路由表</span></span><br><span class="line">net.ipv4.conf.all.accept_redirects = 0</span><br><span class="line">net.ipv4.conf.default.accept_redirects = 0</span><br><span class="line">net.ipv4.conf.all.secure_redirects = 0</span><br><span class="line">net.ipv4.conf.default.secure_redirects = 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 系统最大进程设置</span></span><br><span class="line">kernel.pid_max = 32768</span><br><span class="line"></span><br><span class="line"><span class="comment"># 系统最大文件数设置</span></span><br><span class="line">fs.file-max = 6553560</span><br></pre></td></tr></table></figure>

<h1 id="ulimit（进程占用资源优化）"><a href="#ulimit（进程占用资源优化）" class="headerlink" title="ulimit（进程占用资源优化）"></a>ulimit（进程占用资源优化）</h1><p>配置文件位置：vim /etc/security/limits.conf<br>centos6：/etc/security/limits.d/90-nproc.conf<br>centos7：/etc/security/limits.d/20-nproc.conf</p>
<p>ulimit -a</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">core file size  		//限制内核文件的大小限制</span><br><span class="line">data seg size   		//最大数据大小限制</span><br><span class="line">scheduling priority   	//调度优先级，一般根据nice设置</span><br><span class="line">file size        		//最大文件大小限制</span><br><span class="line">pending signals  		//信号可以被挂起的最大数，这个值针对所有用户,表示可以被挂起/阻塞的最大信号数量。</span><br><span class="line">max locked memory  		//内存锁定值的限制</span><br><span class="line">max memory size    		//最大可以使用内存限制</span><br><span class="line">open files     			//进程打开文件数的限制</span><br><span class="line">pipe size        		//管道文件大小限制</span><br><span class="line">POSIX message queues   	//可以创建使用POSIX消息队列的最大值,单位为bytes</span><br><span class="line">real-time priority  	//限制程序实时优先级的范围,只针对普通用户</span><br><span class="line">stack size           	//限制进程使用堆栈段的大小</span><br><span class="line">cpu time            	//程序占用CPU的时间,单位是秒</span><br><span class="line">max user processes   	//限制程序可以fork的进程数,只对普通用户有效</span><br><span class="line">virtual memory       	//限制进程使用虚拟内存的大小</span><br><span class="line">file locks           	//锁定文件大小限制</span><br></pre></td></tr></table></figure>

<p>同时还有个要注意的值 file-max 是设置 系统所有进程一共可以打开的文件数量 ,可以通过如下方法进行修改echo 6553560 &gt; /proc/sys/fs/file-max<br>或修改 /etc/sysctl.conf, 加入fs.file-max = 6553560 重启生效<br>另外还有一个，/proc/sys/fs/file-nr，可以看到整个系统目前使用的文件句柄数量</p>
]]></content>
      <categories>
        <category>linux基础</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux ssh免密登录设置</title>
    <url>/2019/06/04/linux%20ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="什么是ssh"><a href="#什么是ssh" class="headerlink" title="什么是ssh"></a>什么是ssh</h1><p>SSH是一种网络协议，用于计算机之间的加密登录。<br>相比传统的账户密码登录，SSH提供了一种更便捷安全的登录方式。</p>
<h1 id="设置思路"><a href="#设置思路" class="headerlink" title="设置思路"></a>设置思路</h1><p>本博客中一律以：A电脑为登录机，IP为192.168.1.101，B电脑为被登录机，IP为192.168.1.100，也就是A登录到B是免密的。</p>
<ol>
<li>在A电脑生成免密的公钥和私钥</li>
<li>把A电脑的公钥传到B电脑上</li>
<li>验证</li>
<li>总结</li>
</ol>
<h2 id="1-生成免密的公钥和私钥"><a href="#1-生成免密的公钥和私钥" class="headerlink" title="1. 生成免密的公钥和私钥"></a>1. 生成免密的公钥和私钥</h2><p>在A电脑上执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>

<p>一路回车就行<br>查看家目录下，会生成一个.ssh的隐藏目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ls -a ~/</span></span><br><span class="line">.  ..  anaconda-ks.cfg  .bash_history  .bash_logout  .bash_profile  .bashrc  .cshrc  .ssh  .tcshrc  .viminfo</span><br></pre></td></tr></table></figure>

<p>在.ssh目录下三个文件：</p>
<ul>
<li>id_rsa : 生成的私钥文件</li>
<li>id_rsa.pub ： 生成的公钥文件</li>
<li>know_hosts : 已知的主机公钥清单</li>
</ul>
<h2 id="2-把A电脑的公钥传到B电脑上"><a href="#2-把A电脑的公钥传到B电脑上" class="headerlink" title="2. 把A电脑的公钥传到B电脑上"></a>2. 把A电脑的公钥传到B电脑上</h2><p>在A电脑上执行命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-copy-id root@192.168.1.100</span><br></pre></td></tr></table></figure>

<p>在跳出的输入框中输入yes<br>之后需要输入B电脑的登录密码，回车完成<br>该命令是把本机的公钥直接传到B电脑上的.ssh目录下，自动生成authorized_keys文件，这个文件是用来存放远程免密登录的公钥,主要通过这个文件记录多台机器的公钥</p>
<h2 id="3-验证"><a href="#3-验证" class="headerlink" title="3. 验证"></a>3. 验证</h2><p>现在在A电脑上直接连接B电脑，验证是否需要密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh root@192.168.1.100</span><br></pre></td></tr></table></figure>

<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><ol>
<li>实现远程免密登录不需要去被登录机上操作，只需要有其登录密码就行。</li>
<li>免密的原理：在被登录机上有本机生成的公钥，在本机用私钥去连接远程机，公钥是锁，私钥是钥匙。</li>
<li>如果有错误，可以把.ssh目录删除在重复以上操作。</li>
</ol>
]]></content>
      <categories>
        <category>linux基础</category>
      </categories>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>linux查询命令</title>
    <url>/2019/12/27/linux%E6%9F%A5%E8%AF%A2%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>查看系统的相关信息</p>
<h1 id="常用查看命令"><a href="#常用查看命令" class="headerlink" title="常用查看命令"></a>常用查看命令</h1><h2 id="系统硬件信息"><a href="#系统硬件信息" class="headerlink" title="系统硬件信息"></a><font color="32CD32">系统硬件信息</font></h2><p>#查看 CPU 物理个数<br>grep ‘physical id’ /proc/cpuinfo | sort -u | wc -l</p>
<p>#查看 CPU 核心数量<br>grep ‘core id’ /proc/cpuinfo | sort -u | wc -l</p>
<p>#查看 CPU 线程数<br>grep ‘processor’ /proc/cpuinfo | sort -u | wc -l</p>
<p>#查看 CPU  型号<br>dmidecode -s processor-version</p>
<p>#查看 CPU 的详细信息：<br>cat /proc/cpuinfo</p>
<h2 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a><font color="32CD32">系统信息</font></h2><p>#查看内核/操作系统/CPU信息的linux系统信息命令<br>uname -a     </p>
<p>#系统版本<br>cat /etc/redhat-release </p>
<h2 id="系统资源信息"><a href="#系统资源信息" class="headerlink" title="系统资源信息"></a><font color="32CD32">系统资源信息</font></h2><p>#系统最大打开文件描述符数<br>cat /proc/sys/fs/file-max</p>
<p>#单个进程可分配最大文件数<br>cat/proc/sys/fs/nr_open        </p>
<p>#查看当前系统使用的打开文件描述符数<br>cat /proc/sys/fs/file-nr        </p>
<h2 id="yum-rpm查询命令"><a href="#yum-rpm查询命令" class="headerlink" title="yum|rpm查询命令"></a><font color="32CD32">yum|rpm查询命令</font></h2><p>#列出所有可更新的软件清单命令<br>yum check-update</p>
<p>#更新所有软件命令<br>yum update</p>
<p>#仅安装指定的软件命令<br>yum install <package_name></package_name></p>
<p>#仅更新指定的软件命令<br>yum update <package_name></package_name></p>
<p>#列出所有可安裝的软件清单命令<br>yum list</p>
<p>#删除软件包命令<br>yum remove <package_name></package_name></p>
<p>#查找软件包 命令<br>yum search <keyword></keyword></p>
<p>#清除缓存命令<br>yum clean all</p>
<p>#建立缓存<br>yum makecache</p>
<h2 id="systemctl系统命令"><a href="#systemctl系统命令" class="headerlink" title="systemctl系统命令"></a><font color="32CD32">systemctl系统命令</font></h2><p>#查看服务启动项<br>systemctl list-unit-files </p>
]]></content>
      <categories>
        <category>linux基础</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>maven-3.6.1安装脚本</title>
    <url>/2019/09/01/maven-3.6.1%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Maven 翻译为”专家”、”内行”，是 Apache 下的一个纯 Java 开发的开源项目。基于项目对象模型（缩写：POM）概念，Maven利用一个中央信息片断能管理一个项目的构建、报告和文档等步骤。</p>
<p>Maven 是一个项目管理工具，可以对 Java 项目进行构建、依赖管理。</p>
<p>Maven 也可被用于构建和管理各种项目，例如 C#，Ruby，Scala 和其他语言编写的项目。Maven 曾是 Jakarta 项目的子项目，现为由 Apache 软件基金会主持的独立 Apache 项目。</p>
<h1 id="安装脚本"><a href="#安装脚本" class="headerlink" title="安装脚本"></a>安装脚本</h1><p><a href="https://hxqxiaoqi.gitee.io/2019/06/04/JDK1.8%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85-linux/">事先安装号jdk1.8环境</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://mirror.bit.edu.cn/apache/maven/maven-3/3.6.1/binaries/apache-maven-3.6.1-bin.tar.gz</span><br><span class="line"></span><br><span class="line">tar xf apache-maven-3.6.1-bin.tar.gz -C /usr/<span class="built_in">local</span>/</span><br><span class="line"></span><br><span class="line"><span class="comment">#maven</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"</span></span><br><span class="line"><span class="string">export MAVEN_HOME=/usr/local/apache-maven-3.6.1</span></span><br><span class="line"><span class="string">export PATH=\$&#123;PATH&#125;:\$&#123;MAVEN_HOME&#125;/bin</span></span><br><span class="line"><span class="string">"</span> &gt;&gt; /etc/profile</span><br><span class="line">	</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>

<h1 id="更换仓库镜像站"><a href="#更换仓库镜像站" class="headerlink" title="更换仓库镜像站"></a>更换仓库镜像站</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置文件</span></span><br><span class="line">vim /usr/<span class="built_in">local</span>/apache-maven-3.6.1/conf/settings.xml</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 阿里云站点 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>        </span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="java源码编译测试"><a href="#java源码编译测试" class="headerlink" title="java源码编译测试"></a>java源码编译测试</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载zk源码</span></span><br><span class="line">git <span class="built_in">clone</span> https://gitee.com/Outsrkem/zkweb.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line"><span class="built_in">cd</span> zkweb</span><br><span class="line">mvn clean package</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装包位置</span></span><br><span class="line">zkweb/target/zkWeb-v1.2.1.war</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux基础</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>mongodb 非正常关闭</title>
    <url>/2020/01/01/mongodb%20%E9%9D%9E%E6%AD%A3%E5%B8%B8%E5%85%B3%E9%97%AD/</url>
    <content><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>mongodb 没有一个正常的关闭指令，经常会遇到服务器重启，或磁盘满了等问题，导致mongodb崩溃，无法启动。</p>
<p><font color="32CD32">解决方法</font></p>
<ol>
<li>删除 mongodb data目录下的<code>mongod.lock</code> 文件</li>
<li>启动修复模式：/opt/mongodb/bin/mongod -f  /opt/mongodb/mongodb.conf –repair</li>
<li>修复后再次正常启动：/opt/mongodb/bin/mongod -f  /opt/mongodb/mongodb.conf </li>
</ol>
<p>如果以上方法无效，需要删除 <code>data/journal</code> 目录下的文件再次执行以上操作启动。</p>
<p>mongodb的<code>journal</code>，简单来说就是用于数据故障恢复和持久化数据的，它以日志方式来记录。从1.8版本开始有此功能，2.0开始默认打开此功能，但32位的系统是默认关闭的。journal除了故障恢复的作用之外，还可以提高写入的性能，批量提交（batch-commit），journal一般默认100ms刷新一次，在这个过程中，所有的写入都可以一次提交，是单事务的，全部成功或者全部失败，刷新时间，可以更改，范围是2-300ms。当系统非正常情况下突然挂掉，再次启动时候mongodb就会从journal日志中恢复数据，而确保数据不丢失，最多丢失s级别的数据。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown语法</title>
    <url>/2019/09/04/markdown%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th align="center">表头</th>
<th align="center">条目一</th>
<th align="center">条目二</th>
</tr>
</thead>
<tbody><tr>
<td align="center">项目</td>
<td align="center">项目一</td>
<td align="center">项目二</td>
</tr>
<tr>
<td align="center">项目</td>
<td align="center">项目一</td>
<td align="center">项目二</td>
</tr>
</tbody></table>
<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一级标题</span></span><br><span class="line"><span class="comment">## 二级标题</span></span><br><span class="line"><span class="comment">### 三级标题</span></span><br><span class="line"><span class="comment">#### 四级标题</span></span><br><span class="line"><span class="comment">##### 五级标题</span></span><br><span class="line"><span class="comment">###### 六级标题</span></span><br></pre></td></tr></table></figure>

<h1 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h1><figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">*这里是斜体*</span><br><span class="line"><span class="symbol">_</span>这里是斜体<span class="symbol">_</span></span><br><span class="line"></span><br><span class="line">**这里是加粗**</span><br><span class="line"><span class="symbol">__</span>这里是加粗<span class="symbol">__</span></span><br></pre></td></tr></table></figure>

<p>#如何给文字上色</p>
<p><a href="https://www.114la.com/other/rgb.htm" target="_blank" rel="noopener">查看颜色代码表</a> </p>
<figure class="highlight hsp"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">font</span> <span class="keyword">color</span>=<span class="string">'98F5FF'</span>&gt;这是颜色内容&lt;/<span class="keyword">font</span>&gt;</span><br></pre></td></tr></table></figure>

<h1 id="背景框标记"><a href="#背景框标记" class="headerlink" title="背景框标记"></a>背景框标记</h1><p>段落前加“&gt;”号</p>
<blockquote>
<p>这是框</p>
</blockquote>
<h1 id="背景高亮"><a href="#背景高亮" class="headerlink" title="背景高亮"></a>背景高亮</h1><p>段落前加“Tab”号</p>
<pre><code>这是背景高亮</code></pre><h1 id="插入链接和图片"><a href="#插入链接和图片" class="headerlink" title="插入链接和图片"></a>插入链接和图片</h1><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">点击跳转至百度</span>](<span class="link">http://www.baidu.com</span>)</span><br><span class="line">![<span class="string">图片</span>](<span class="link">/images/top.png</span>)</span><br></pre></td></tr></table></figure>

<h1 id="插入表格"><a href="#插入表格" class="headerlink" title="插入表格"></a>插入表格</h1><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">表头<span class="params">|条目一|</span>条目二</span><br><span class="line"><span class="symbol">:---</span><span class="symbol">:|</span><span class="symbol">:---</span><span class="symbol">:|</span><span class="symbol">:---</span><span class="symbol">:</span></span><br><span class="line">项目<span class="params">|项目一|</span>项目二</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>mongodb主从与仲裁搭建</title>
    <url>/2019/10/28/mongodb%E4%B8%BB%E4%BB%8E%E4%B8%8E%E4%BB%B2%E8%A3%81%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>中文翻译叫做副本集。其实简单来说就是集群当中包含了多份数据，保证主节点挂掉了，备节点能继续提供数据服务，提供的前提就是数据需要和主节点一致。</p>
<p>默认设置下，主节点提供所有增删查改服务，备节点不提供任何服务。但是可以通过设置使备节点提供查询服务，这样就可以减少主节点的压力，当客户端进行数据查询时，请求自动转到备节点上。</p>
<p>仲裁节点是一种特殊的节点，它本身并不存储数据，主要的作用是决定哪一个备节点在主节点挂掉之后提升为主节点，所以客户端不需要连接此节点。这里虽然只有一个备节点，但是仍然需要一个仲裁节点来提升备节点级别。</p>
<h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p><strong>部署环境：</strong><br>以下每台安装mongodb</p>
<ol>
<li>192.168.40.100 master</li>
<li>192.168.40.101 slave</li>
<li>192.168.40.102 arbiter</li>
</ol>
<p>安装mongodb请看该文档：<a href="https://hxqxiaoqi.gitee.io/2019/10/28/mongodb%E6%90%AD%E5%BB%BA/">mongodb安装</a><br>注：配置文件需要更改为以下配置启动。</p>
<p><strong>配置文件</strong></p>
<p>注：master，slave，arbiter配置都是一致的，配置中replSet=RS1为集群名称，之后根据该名称设置集群</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bind_ip=0.0.0.0</span><br><span class="line">port=27017</span><br><span class="line"><span class="comment"># 持久化存储引擎</span></span><br><span class="line">storageEngine=wiredTiger</span><br><span class="line"></span><br><span class="line"><span class="comment"># 内部缓存的大小</span></span><br><span class="line">wiredTigerCacheSizeGB=2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是设置从内存同步到硬盘的时间间隔，默认为60秒，可以设置的少一些</span></span><br><span class="line">syncdelay=30</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设定压缩策略 snappy 是一种压缩速度非常快的压缩策略</span></span><br><span class="line">wiredTigerCollectionBlockCompressor=snappy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 集群名称</span></span><br><span class="line">replSet=RS1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件位置</span></span><br><span class="line">dbpath=/data/mongodb-linux-x86_64-3.6.14/data</span><br><span class="line">logpath=/data/mongodb-linux-x86_64-3.6.14/logs/mongodb.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># mongodb操作日志文件的最大大小。单位为Mb，默认为硬盘剩余空间的5%</span></span><br><span class="line">oplogSize=6144</span><br><span class="line"></span><br><span class="line"><span class="comment"># 追加方式写入日志</span></span><br><span class="line">logappend=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 后台运行</span></span><br><span class="line">fork=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用日志文件，默认启用</span></span><br><span class="line">journal=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为每一个数据库按照数据库名建立文件夹存放</span></span><br><span class="line">directoryperdb=<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><strong>启动</strong><br>全部启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin/monood -f mongodb.conf </span><br><span class="line">./bin/mongod -f mongodb.conf </span><br><span class="line">./bin/mongod -f mongodb.conf</span><br></pre></td></tr></table></figure>

<p><strong>配置主，备，仲裁节点</strong></p>
<p>可以通过客户端连接mongodb，也可以直接在三个节点中选择一个连接mongodb。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 登录</span></span><br><span class="line">./bin/mongo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换库</span></span><br><span class="line">&gt;use admin;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置仲裁，根据实际IP地址配置</span></span><br><span class="line">&gt;cfg=&#123; _id:<span class="string">"testrs"</span>, members:[ &#123;_id:0,host:<span class="string">'192.168.40.100:27017'</span>,priority:2&#125;, &#123;_id:1,host:<span class="string">'192.168.40.101:27017'</span>,priority:1&#125;, &#123;_id:2,host:<span class="string">'192.168.40.102:27017'</span>,arbiterOnly:<span class="literal">true</span>&#125;] &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态：PRIMARY为主，SECONDARY为从，ARBITER为仲裁</span></span><br><span class="line">rs.status()</span><br></pre></td></tr></table></figure>

<p>cfg是可以任意的名字，当然最好不要是mongodb的关键字，conf，config都可以。最外层的_id表示replica set的名字，members里包含的是所有节点的地址以及优先级。优先级最高的即成为主节点，即这里的10.10.148.130:27017。特别注意的是，对于仲裁节点，需要有个特别的配置——arbiterOnly:true。这个千万不能少了，不然主备模式就不能生效。</p>
<h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><ol>
<li>杀死主（db.shutdownServer();）</li>
<li>查看仲裁日志</li>
<li>查看从状态</li>
</ol>
<h1 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加节点</span></span><br><span class="line">&gt; rs.add(<span class="string">"192.168.40.101:27017"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加仲裁节点</span></span><br><span class="line">&gt; rs.addArb(<span class="string">"192.168.40.102:27017"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除节点</span></span><br><span class="line">&gt; rs.remove(<span class="string">"192.168.40.101:27020"</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>mongodb搭建</title>
    <url>/2019/10/28/mongodb%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><strong>MongoDB：</strong> 是由C++语言编写的一个基于分布式文件存储的开源数据库系统，它的目的在于为WEB应用提供可扩展的高性能数据存储解决方案。是一个介于关系型数据库和非关系型数据库之间的产品，是非关系型数据库当中功能最丰富，最像关系型数据库的。它支持的数据结构非常松散，会将数据存储为一个文档，数据结构由键值对(key=&gt;value)组成，是类似于json的bson格式，字段值可以包含其它文档、数组和文档数组，因此可以存储比较复杂的数据类型。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><a href="https://fastdl.mongodb.org" target="_blank" rel="noopener">官网下载</a><br>以下为自动安装脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 自动安装mongodb</span></span><br><span class="line">workdir=/data</span><br><span class="line">mongodb_version=mongodb-linux-x86_64-3.6.14</span><br><span class="line">[ -e <span class="variable">$workdir</span> ] || mkdir <span class="variable">$workdir</span> </span><br><span class="line">mongodb_dir=<span class="variable">$workdir</span>/<span class="variable">$mongodb_version</span></span><br><span class="line"></span><br><span class="line">yum -y install wget</span><br><span class="line">wget https://fastdl.mongodb.org/linux/<span class="variable">$mongodb_version</span>.tgz</span><br><span class="line"></span><br><span class="line">tar xf <span class="variable">$mongodb_version</span>.tgz -C /data</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$mongodb_dir</span></span><br><span class="line">mkdir &#123;data,logs&#125;</span><br><span class="line"></span><br><span class="line">cat &gt; mongodb.conf &lt;&lt;EOF</span><br><span class="line"><span class="comment"># 数据库路径</span></span><br><span class="line">dbpath=<span class="variable">$mongodb_dir</span>/data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志输出文件路径</span></span><br><span class="line">logpath=<span class="variable">$mongodb_dir</span>/logs/mongodb.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 错误日志采用追加模式</span></span><br><span class="line">logappend=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用日志文件，默认启用</span></span><br><span class="line">journal=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个选项可以过滤掉一些无用的日志信息，若需要调试使用请设置为false</span></span><br><span class="line">quiet=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 端口号 默认为27017</span></span><br><span class="line">port=27017</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许远程访问</span></span><br><span class="line">bind_ip=0.0.0.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启子进程</span></span><br><span class="line">fork=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为每一个数据库按照数据库名建立文件夹存放</span></span><br><span class="line">directoryperdb=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#开启认证，必选先添加用户</span></span><br><span class="line"><span class="comment">#auth=true</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="variable">$mongodb_dir</span>/bin/mongod -f <span class="variable">$mongodb_dir</span>/mongodb.conf</span><br></pre></td></tr></table></figure>

<h1 id="启动脚本"><a href="#启动脚本" class="headerlink" title="启动脚本"></a>启动脚本</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># mongodb启动脚本</span></span><br><span class="line"><span class="comment"># chkconfig: 2345 10 90</span></span><br><span class="line">dir=/data/mongodb-linux-x86_64-3.6.14</span><br><span class="line"><span class="function"><span class="title">start</span></span>() &#123;</span><br><span class="line"><span class="variable">$dir</span>/bin/mongod --config <span class="variable">$dir</span>/mongodb.conf</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">stop</span></span>() &#123;</span><br><span class="line"><span class="variable">$dir</span>/bin/mongod --config <span class="variable">$dir</span>/mongodb.conf --shutdown</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">start)</span><br><span class="line"> start</span><br><span class="line"> ;;</span><br><span class="line">stop)</span><br><span class="line"> stop</span><br><span class="line"> ;;</span><br><span class="line">restart)</span><br><span class="line"> stop</span><br><span class="line"> start</span><br><span class="line"> ;;</span><br><span class="line">*)</span><br><span class="line"> <span class="built_in">echo</span> $<span class="string">"Usage: <span class="variable">$0</span> &#123;start|stop|restart&#125;"</span></span><br><span class="line"> <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>

<h2 id="开机自启动"><a href="#开机自启动" class="headerlink" title="开机自启动"></a>开机自启动</h2><p>把以上启动脚本存为mongodb</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv mongodb /etc/rc.d/init.d/</span><br><span class="line">chmod +x /etc/rc.d/init.d/mongodb</span><br><span class="line">chkconfig --add mongodb</span><br><span class="line">chkconfig mongodb on</span><br><span class="line">chkconfig --list</span><br></pre></td></tr></table></figure>

<h1 id="备份和恢复"><a href="#备份和恢复" class="headerlink" title="备份和恢复"></a>备份和恢复</h1><p><strong>备份整个库</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">例如： </span><br><span class="line">mongodump -h localhost -d users -o /root/mongdbbak/</span><br><span class="line"></span><br><span class="line">-h：</span><br><span class="line">MongDB所在服务器地址，例如：127.0.0.1或localhost，当然也可以指定端口号：127.0.0.1:27017</span><br><span class="line"></span><br><span class="line">-d：</span><br><span class="line">需要备份的数据库实例名，例如：users</span><br><span class="line"></span><br><span class="line">-o：</span><br><span class="line">指定备份的数据存放的目录位置，例如：/root/mongdbbak/，当然该目录需要提前建立，在备份完成后，系统自动在/root/mongdbbak/目录下建立一个users目录，这个目录里面存放该数据库实例的备份数据。数据形式是以JSON的格式文件存储。</span><br></pre></td></tr></table></figure>

<p><strong>恢复整个库</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">例如：</span><br><span class="line">mongorestore -h localhost -d users --dir /root/mongdbbak/users</span><br><span class="line"></span><br><span class="line">--host &lt;:port&gt;, -h &lt;:port&gt;：</span><br><span class="line">MongoDB所在服务器地址，默认为:localhost:27017</span><br><span class="line"></span><br><span class="line">-d ：</span><br><span class="line">需要恢复的数据库实例名，例如：users，当然这个名称也可以和备份时候的不一样，比如user2</span><br><span class="line"></span><br><span class="line">--dir：</span><br><span class="line">指定备份的目录。</span><br></pre></td></tr></table></figure>

<p><strong>导出集合</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">例如：</span><br><span class="line">mongoexport -d mydb -c promotionConfiguration -o promotionConfiguration.json</span><br><span class="line"></span><br><span class="line">-h ：数据库地址，MongoDB 服务器所在的 IP 与 端口，如 localhost:27017</span><br><span class="line"></span><br><span class="line">-d ：指明使用的数据库实例，如 <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">-c 指明要导出的集合，如 demo</span><br><span class="line"></span><br><span class="line">-o 指明要导出的文件名，demo.json，文件类型支持txt、xls、docs 等等</span><br></pre></td></tr></table></figure>

<p><strong>导入集合</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">例如：</span><br><span class="line">mongoimport -d mydb -c u_vip_card_item  --<span class="built_in">type</span>=json --file u_vip_card_item.json</span><br><span class="line"></span><br><span class="line">-h ： 数据库地址，MongoDB 服务器所在的 IP 与 端口，如 localhost:27017</span><br><span class="line"></span><br><span class="line">-d ：指明使用的库，指明使用的数据库实例，如 <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">-c ：指明要导入的集合，如 demo可以和导出时不一致，自定义即可，不存在时会直接创建。</span><br></pre></td></tr></table></figure>

<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p><strong>关闭mongodb</strong><br>mongod  –shutdown  –dbpath /database/mongodb/data/<br>或
use admin;<br>db.shutdownServer();</p>
<p><strong>查看库大小</strong><br>单位B查看<br>db.stats();</p>
<p>单位M查看<br>db.stats(1048576);</p>
<p>单位G查看<br>db.stats(1073741824);</p>
<p><strong>查看表大小(单位字节)</strong><br>db.tables.stats()</p>
<p><strong>查看全部数据库</strong><br>show dbs;                  </p>
<p><strong>显示当前数据库中的集合</strong>（类似关系数据库中的表）<br>show collections;  </p>
<p><strong>查看当前数据库的用户信息</strong><br>show users;                </p>
<p> <strong>切换数据库跟mysql一样</strong> （如果没用库，则创建，需要有数据才能生成库）<br>use <db name>;            </db></p>
<p><strong>查看当前所在数据库</strong><br>db;<br>db.getName(); </p>
<p> <strong>对于当前数据库中的foo集合进行数据查找</strong>（由于没有条件，会列出所有数据）<br>db.foo.find();          </p>
<p><strong>对于当前数据库中的foo集合进行查找</strong> （条件是数据中有一个属性叫a，且a的值为1）<br>db.foo.find( { a : 1 } );  </p>
<p><strong>创建表</strong><br>db.test.insert({“_id”:”520”,”name”:”xiaoming”})        </p>
<p><strong>创建用户</strong><br>use admin<br>db.createUser({user:”xiaoming”,pwd:”123456”,roles:[{role:”userAdmin”,db:”test”}]})   </p>
<p> <strong>删除用户</strong><br>db.removeUser(“userName”);      </p>
<p><strong>显示当前所有用户</strong><br>show users;   </p>
<p><strong>删除当前所在库</strong><br>db.dropDatabase();</p>
<p><strong>查看当前库状态</strong><br>db.stats();</p>
<p><strong>查看当前连接数和最大连接数</strong><br>db.serverStatus().connections</p>
<p><strong>实时查运行状态</strong><br>mongostat</p>
<p><strong>查看压力</strong><br>mongotop</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>mongodb监控与日志分析</title>
    <url>/2019/11/13/mongodb%E7%9B%91%E6%8E%A7%E4%B8%8E%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>mongodb自带监控命令</p>
<h1 id="监控命令"><a href="#监控命令" class="headerlink" title="监控命令"></a>监控命令</h1><h2 id="mongostat"><a href="#mongostat" class="headerlink" title="mongostat"></a>mongostat</h2><p>mongostat是mongodb自带的状态检测工具，在命令行下使用，会间隔固定时间获取mongodb的当前运行状态，并输出。</p>
<p><strong>常用命令格式：</strong></p>
<p>mongostat –host 192.168.1.100:27017 -uroot -p123456 –authenticationDatabase admin<br>参数说明：<br>host:指定IP地址和端口，也可以只写IP，然后使用–port参数指定端口号<br>-u： 如果开启了认证，则需要在其后填写用户名<br>-p: 不用多少，肯定是密码<br>–authenticationDatabase：若开启了认证，则需要在此参数后填写认证库（注意是认证上述账号的数据库）</p>
<p><strong>命令输出格式解释</strong></p>
<p><strong>insert/s :</strong> 官方解释是每秒插入数据库的对象数量，如果是slave，则数值前有<em>,则表示复制集操作<br>*</em>query/s :** 每秒的查询操作次数<br><strong>update/s :</strong> 每秒的更新操作次数<br><strong>delete/s :</strong> 每秒的删除操作次数<br><strong>getmore/s:</strong> 每秒查询cursor(游标)时的getmore操作数<br><strong>command:</strong> 每秒执行的命令数，在主从系统中会显示两个值(例如 3|0),分表代表 本地|复制 命令<br>注： 一秒内执行的命令数比如批量插入，只认为是一条命令（所以意义应该不大）<br><strong>dirty:</strong> 仅仅针对WiredTiger引擎，官网解释是脏数据字节的缓存百分比<br><strong>used:</strong> 仅仅针对WiredTiger引擎，官网解释是正在使用中的缓存百分比<br><strong>flushes:</strong><br>For WiredTiger引擎：指checkpoint的触发次数在一个轮询间隔期间<br>For MMAPv1 引擎：每秒执行fsync将数据写入硬盘的次数<br>注：一般都是0，间断性会是1， 通过计算两个1之间的间隔时间，可以大致了解多长时间flush一次。flush开销是很大的，如果频繁的flush，可能就要找找原因了<br><strong>vsize:</strong> 虚拟内存使用量，单位MB （这是 在mongostat 最后一次调用的总数据）<br><strong>res:</strong>  物理内存使用量，单位MB （这是 在mongostat 最后一次调用的总数据）<br>注：这个和你用top看到的一样, vsize一般不会有大的变动， res会慢慢的上升，如果res经常突然下降，去查查是否有别的程序狂吃内存。</p>
<p><strong>qr:</strong> 客户端等待从MongoDB实例读数据的队列长度<br><strong>qw：</strong> 客户端等待从MongoDB实例写入数据的队列长度<br><strong>ar:</strong> 执行读操作的活跃客户端数量<br><strong>aw:</strong> 执行写操作的活客户端数量<br>注：如果这两个数值很大，那么就是DB被堵住了，DB的处理速度不及请求速度。看看是否有开销很大的慢查询。如果查询一切正常，确实是负载很大，就需要加机器了<br><strong>netIn:</strong> MongoDB实例的网络进流量<br><strong>netOut:</strong> MongoDB实例的网络出流量<br>注：此两项字段表名网络带宽压力，一般情况下，不会成为瓶颈<br><strong>conn:</strong> 打开连接的总数，是qr,qw,ar,aw的总和<br>注：MongoDB为每一个连接创建一个线程，线程的创建与释放也会有开销，所以尽量要适当配置连接数的启动参数，maxIncomingConnections，阿里工程师建议在5000以下，基本满足多数场景</p>
<h2 id="mongotop"><a href="#mongotop" class="headerlink" title="mongotop"></a>mongotop</h2><p>mongotop用来跟踪MongoDB的实例， 提供每个集合的统计数据。默认情况下，mongotop每一秒刷新一次。</p>
<p><strong>输出字段说明</strong></p>
<p>ns：数据库命名空间，后者结合了数据库名称和集合。<br>db：数据库的名称。名为 . 的数据库针对全局锁定，而非特定数据库。<br>total：mongod在这个命令空间上花费的总时间。<br>read：在这个命令空间上mongod执行读操作花费的时间。<br>write：在这个命名空间上mongod进行写操作花费的时间。</p>
<h1 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h1><p><strong>日志信息的格式</strong><br>&lt;日志时间&gt; &lt;严重级别&gt; &lt;信息所属分类&gt; [&lt;内容&gt;] &lt;消息&gt;</p>
<p><strong>日志信息严重级别</strong></p>
<p>级别    级别描述<br>F    Fatal<br>E    Error<br>W    Warning<br>I    Informational, for Verbosity Level of 0<br>D    Debug, for All Verbosity Levels &gt; 0</p>
<p><strong>信息所属分类</strong></p>
<p>登入信息<br>ACCESS：登入访问相关的信息，例如登录验证情况。</p>
<p>命令信息<br>COMMAND：数据库执行命令相关信息，例如，查询。</p>
<p>控制管理信息<br>CONTROL：记录控制管理相关的信息，例如数据库初始化。</p>
<p>FTDC信息<br>FTDC（full-time diagnostic data ）：全程检测数据信息，例如Server的状态统计信息。</p>
<p>索引信息<br>INDEX：索引相关信息，例如索引的创建过程信息。</p>
<p>网络信息<br>NETWORK：网络相关信息，例如网络连接信息。</p>
<p>查询信息<br>QUERY：查询相关信息，例如查询计划信息。</p>
<p>副本集信息<br>REPL：副本集相关信息，例如副本集初始过程、心跳、回滚等信息</p>
<p>分片信息<br>SHARDING：分片相关信息，例如mongos的启动信息</p>
<p>存储信息<br>STORAGE：存储相关信息，例如将 storage 层的数据刷入磁盘的信息。</p>
<p>还原信息<br>RECOVERY：还原活动相关的信息</p>
<p>日志信息<br>JOURNAL：日志相关的信息</p>
<p>写操作信息<br>WRITE：写操作相关的信息，例如更新（update）的命令。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql8.0 安装</title>
    <url>/2020/04/02/mysql%208.0%20%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>mysql8 安装，复制以下脚本执行即可</p>
<h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 安装mysql8.0</span></span><br><span class="line">rpm -qa|grep mysql|awk <span class="string">'&#123;print "yum -y remove\t" $1&#125;'</span>|sh</span><br><span class="line">rpm -qa|grep mariadb|awk <span class="string">'&#123;print "yum -y remove\t" $1&#125;'</span>|sh</span><br><span class="line">rpm -Uvh http://dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpm </span><br><span class="line">sed -i <span class="string">"34s/enabled=1/enabled=0/g"</span> /etc/yum.repos.d/mysql-community.repo</span><br><span class="line">sed -i <span class="string">"41s/enabled=0/enabled=1/g"</span> /etc/yum.repos.d/mysql-community.repo</span><br><span class="line">yum repolist enabled | grep mysql</span><br><span class="line">yum install -y mysql-community-server</span><br><span class="line">systemctl start mysqld</span><br><span class="line">systemctl <span class="built_in">enable</span> mysqld</span><br><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line">dbpw=`grep <span class="string">'temporary password'</span> /var/<span class="built_in">log</span>/mysqld.log|cut -d <span class="string">' '</span> -f 13`</span><br><span class="line">newdbpw=<span class="string">"123456Aa"</span></span><br><span class="line">mysql --connect-expired-password -uroot -p<span class="variable">$dbpw</span> &lt;&lt; EOF</span><br><span class="line"><span class="built_in">set</span> global validate_password.policy=0;</span><br><span class="line"><span class="built_in">set</span> global validate_password.length=1;</span><br><span class="line">ALTER USER <span class="string">'root'</span>@<span class="string">'localhost'</span> IDENTIFIED BY <span class="variable">$&#123;newdbpw&#125;</span>;</span><br><span class="line">create user <span class="string">'root'</span>@<span class="string">'%'</span> identified by <span class="variable">$&#123;newdbpw&#125;</span>;</span><br><span class="line">grant all privileges on *.* to root@<span class="string">'%'</span> with grant option;</span><br><span class="line">flush privileges;</span><br><span class="line">quit</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>my.cnf 默认配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">datadir=/var/lib/mysql</span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line"><span class="comment"># Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class="line">symbolic-links=0</span><br><span class="line"><span class="comment"># Settings user and group are ignored when systemd is used.</span></span><br><span class="line"><span class="comment"># If you need to run mysqld under a different user or group,</span></span><br><span class="line"><span class="comment"># customize your systemd unit file for mariadb according to the</span></span><br><span class="line"><span class="comment"># instructions in http://fedoraproject.org/wiki/Systemd</span></span><br><span class="line"></span><br><span class="line">[mysqld_safe]</span><br><span class="line"><span class="built_in">log</span>-error=/var/<span class="built_in">log</span>/mariadb/mariadb.log</span><br><span class="line">pid-file=/var/run/mariadb/mariadb.pid</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># include all files from the config directory</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">!includedir /etc/my.cnf.d</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql-5.7.24二进制包安装</title>
    <url>/2019/09/03/mysql-5.7.24%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8C%85%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>MySQL 是最流行的关系型数据库管理系统，在 WEB 应用方面 MySQL 是最好的 RDBMS(Relational Database Management System：关系数据库管理系统)应用软件之一。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>下载地址：<a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/mysql/</a></p>
<p>安装步骤：</p>
<ol>
<li>下载解压，进入到目录中</li>
<li>创建数据目录，配置目录，日志目录和配置文件，修改配置文件</li>
<li>初始化数据库和启动数据库</li>
<li>配置开机自启动</li>
<li>常见错误</li>
</ol>
<h2 id="下载解压，改名"><a href="#下载解压，改名" class="headerlink" title="下载解压，改名"></a>下载解压，改名</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.27-el7-x86_64.tar</span><br><span class="line"></span><br><span class="line">tar xf mysql-5.7.24-linux-glibc2.12-x86_64.tar.gz -C /data/</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /data</span><br><span class="line">mv mysql-5.7.24-linux-glibc2.12-x86_64/ mysql-5.7.24</span><br><span class="line"></span><br><span class="line"><span class="comment"># data目录：用于存放数据,logs目录：存放日志和PID文件d</span></span><br><span class="line"><span class="built_in">cd</span> mysql-5.7.24/</span><br><span class="line">mkdir data logs</span><br></pre></td></tr></table></figure>

<h2 id="创建需要的目录和文件"><a href="#创建需要的目录和文件" class="headerlink" title="创建需要的目录和文件"></a>创建需要的目录和文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br><span class="line"><span class="comment"># 修改</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># *** DO NOT EDIT THIS FILE. It's a template which will be copied to the</span></span><br><span class="line"><span class="comment"># *** default location during install, and will be replaced if you</span></span><br><span class="line"><span class="comment"># *** upgrade to a newer version of MySQL.</span></span><br><span class="line">[client]</span><br><span class="line">port = 3306</span><br><span class="line">default-character-set=utf8</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line"><span class="comment"># 一般配置选项</span></span><br><span class="line">basedir = /data/mysql-5.7.24</span><br><span class="line">datadir = /data/mysql-5.7.24/data</span><br><span class="line"><span class="built_in">log</span>-error=/data/mysql-5.7.24/logs/error.log</span><br><span class="line">port = 3306</span><br><span class="line">character-set-server=utf8</span><br><span class="line">default_storage_engine = InnoDB</span><br><span class="line"></span><br><span class="line">binlog-format=Row</span><br><span class="line"><span class="built_in">log</span>-bin=/data/mysql-5.7.24/logs/binlog/binlog</span><br><span class="line">server-id=1</span><br><span class="line"></span><br><span class="line">slow_query_log=ON</span><br><span class="line">slow_query_log_file=/data/mysql-5.7.24/logs/mysql-slow.log</span><br><span class="line">long_query_time=1</span><br><span class="line"></span><br><span class="line">sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br></pre></td></tr></table></figure>

<p>授权</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">useradd -r -s /sbin/nologin mysql</span><br><span class="line">chown -R mysql:mysql /data/mysql-5.7.24</span><br></pre></td></tr></table></figure>

<h2 id="初始化数据库和启动"><a href="#初始化数据库和启动" class="headerlink" title="初始化数据库和启动"></a>初始化数据库和启动</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /data/mysql-5.7.24/bin/</span><br><span class="line"></span><br><span class="line"><span class="comment">#初始化数据库</span></span><br><span class="line">./mysqld --user=mysql --basedir=/data/mysql-5.7.24  --datadir=/data/mysql-5.7.24/data --initialize</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动脚本</span></span><br><span class="line">cp ../support-files/mysql.server /etc/init.d/mysqld</span><br><span class="line">vim /etc/init.d/mysqld</span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line">basedir=/data/mysql-5.7.24</span><br><span class="line">datadir=/data/mysql-5.7.24/data</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动</span></span><br><span class="line">service mysqld start</span><br></pre></td></tr></table></figure>

<h2 id="配置开机自启动"><a href="#配置开机自启动" class="headerlink" title="配置开机自启动"></a>配置开机自启动</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chkconfig mysqld on</span><br><span class="line">chkconfig --list mysqld</span><br></pre></td></tr></table></figure>

<h1 id="设置密码，远程登录"><a href="#设置密码，远程登录" class="headerlink" title="设置密码，远程登录"></a>设置密码，远程登录</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#默认密码</span></span><br><span class="line">cat /data/mysql-5.7.24/logs/error.log |grep root@localhost</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录</span></span><br><span class="line">./mysql -u root -p</span><br><span class="line"></span><br><span class="line"><span class="comment">#密码修改为 aaa</span></span><br><span class="line">mysql&gt; <span class="built_in">set</span> password=password(<span class="string">"123123"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置远程登录权限</span></span><br><span class="line">mysql&gt; grant all privileges on *.* to <span class="string">'root'</span>@<span class="string">'%'</span> identified by <span class="string">'123123'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#刷新登录权限:</span></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line"></span><br><span class="line"><span class="comment">#远程登录</span></span><br><span class="line">./mysql -u root -p -P3306 -h192.168.1.23</span><br></pre></td></tr></table></figure>

<h1 id="备份和恢复"><a href="#备份和恢复" class="headerlink" title="备份和恢复"></a>备份和恢复</h1><p><strong>备份</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导出数据库中所有表结构；只导出表结构, 不导出表中的数据</span></span><br><span class="line">mysqldump --opt -d 数据库名称 -u用户名 -p密码 &gt; 保存文件路径</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出数据库中所有表中的数据；只导出表中的数据，不导出表结构</span></span><br><span class="line">mysqldump -t 数据库名称 -u用户名 -p密码 &gt; 保存文件路径</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出数据库中所有的表结构和数据；导出表结构和数据</span></span><br><span class="line">mysqldump 数据库名称 -u用户名 -p密码 &gt; 保存文件路径</span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份单个库，并压缩</span></span><br><span class="line">mysqldump -uroot -p123123 --database xxl_job | gzip &gt; ./xxl_job.sql.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出指定表的结构和数据</span></span><br><span class="line">mysqldump -u用户名 -p密码 -B 数据库名称 --table 表名 &gt; 保存文件路径</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出指定表数据，只导出数据，不导出表结构</span></span><br><span class="line">mysqldump -t 数据库名称 -u用户名 -p密码 --table 表名 &gt; 保存文件路径</span><br></pre></td></tr></table></figure>

<p><strong>恢复</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将备份文件导入到数据库</span></span><br><span class="line">mysql -u用户名 -p密码 数据库名称 &lt; 用于恢复数据库的数据文件路径</span><br></pre></td></tr></table></figure>

<h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><p>安装mysql报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#报错内容</span></span><br><span class="line">bin/mysqld: error <span class="keyword">while</span> loading shared libraries: libaio.so.1: cannot open shared object file: No such file or directory</span><br><span class="line"><span class="comment">#由于缺少依赖包，通过yum安装libaio包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装libaio</span></span><br><span class="line">yum -y install libaio</span><br></pre></td></tr></table></figure>

<p>启动mysql报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动mysql报错内容</span></span><br><span class="line">line 647: /var/<span class="built_in">log</span>/mariadb/mariadb.log: No such file or directory</span><br><span class="line">2018-04-06T16:59:36.091735Z mysqld_safe error: <span class="built_in">log</span>-error <span class="built_in">set</span> to <span class="string">'/var/log/mariadb/mariadb.log'</span>, however file don<span class="string">'t exists. Create writable for user '</span>2iuser<span class="string">'.</span></span><br><span class="line"><span class="string">bin/mysqld_safe: line 144: /var/log/mariadb/mariadb.log: No such file or directory</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#当前系统中安装了mariadb，mariadb的配置文件路径/etc/my.cnf，mysql根据配置文件无法找到相关的文件，所以报错。</span></span><br><span class="line"><span class="string">#查找mariadb，删除mariadb。</span></span><br><span class="line"><span class="string">rpm -qa | grep mariadb</span></span><br><span class="line"><span class="string">rpm -e mariadb-libs-5.5.56-2.el7.x86_64</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#在启动命令中加上--defaults-file参数指定配置文件</span></span><br><span class="line"><span class="string">bin/mysqld_safe \</span></span><br><span class="line"><span class="string">--defaults-file=/data/mysql/conf/my.cnf \</span></span><br><span class="line"><span class="string">--user=mysql &amp;</span></span><br></pre></td></tr></table></figure>

<p>登陆mysql报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#登陆报错内容</span></span><br><span class="line">Enter password: </span><br><span class="line">ERROR 2002 (HY000): Can<span class="string">'t connect to local MySQL server through socket '</span>/tmp/mysql.sock<span class="string">' (2)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#其中一种解决方法是在命令行里指定sock文件即可登陆，由于本机已安装mysql数据库，sock文件在/tmp/mysql.sock已存在，所以建议这种方式登录，后续再想办法优化。</span></span><br><span class="line"><span class="string">./mysql -u root -p -S /data/mysql/conf/mysql.sock</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#由于mysql是在路径/tmp/mysql.sock寻找sock文件，我们配置文件里指定的路径是/data/mysql/conf/mysql.sock，所以加上软连接即可。</span></span><br><span class="line"><span class="string">ln -s /data/mysql/conf/mysql.sock /tmp/mysql.sock</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>nfs 目录共享</title>
    <url>/2019/06/05/nfs%20%E7%9B%AE%E5%BD%95%E5%85%B1%E4%BA%AB/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>NFS 是Network File System的缩写，即网络文件系统。一种使用于分散式文件系统的协定，由Sun公司开发，于1984年向外公布。功能是通过网络让不同的机器、不同的操作系统能够彼此分享个别的数据，让应用程序在客户端通过网络访问位于服务器磁盘中的数据，是在类Unix系统间实现磁盘文件共享的一种方法。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><font color="32CD32">实验环境</font></p>
<table>
<thead>
<tr>
<th align="center">服务器IP</th>
<th align="center">安装服务</th>
</tr>
</thead>
<tbody><tr>
<td align="center">192.168.40.100</td>
<td align="center">nfs-utils</td>
</tr>
<tr>
<td align="center">192.168.40.101</td>
<td align="center">nfs-utils</td>
</tr>
</tbody></table>
<p><font color="32CD32">nfs 服务端安装</font></p>
<p>在192.168.40.100 操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装nfs（实际上需要安装两个包nfs-utils和rpcbind, 不过当使用yum安装nfs-utils时会把rpcbind一起安装上）</span></span><br><span class="line">yum -y install nfs-utils</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建共享目录</span></span><br><span class="line">mkdir /data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建文件用户，uid为1000</span></span><br><span class="line">useradd huang</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改nfs配置文件</span></span><br><span class="line">vim /etc/exports</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/data 192.168.40.101(rw,all_squash,anonuid=1000,anongid=1000)</span><br></pre></td></tr></table></figure>

<ul>
<li>/data：为共享目录</li>
<li>192.168.40.101：为允许的客户端ip，可以是IP段（192.168.40.0/24），也可以是单个IP，或域名</li>
<li>sync ：同步模式，内存中数据时时写入磁盘；async ：不同步，把内存中数据定期写入磁盘中</li>
<li>no_root_squash ：加上这个选项后，root用户就会对共享的目录拥有至高的权限控制，就像是对本机的目录操作一样。不安全，不建议使用；root_squash：和上面的选项对应，root用户对共享目录的权限不高，只有普通用户的权限，即限制了root；all_squash：不管使用NFS的用户是谁，他的身份都会被限定成为一个指定的普通用户身份</li>
<li>anonuid/anongid ：要和root_squash 以及all_squash一同使用，用于指定使用NFS的用户限定后的uid和gid，前提是本机的/etc/passwd中存在这个uid和gid</li>
<li>fsid=0：表示将/opt/nfs整个目录包装成根目录</li>
<li>如果需要共享多目录，可以在另取一行按以上格式填写</li>
</ul>
<p><font color="32CD32">启动</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start rpcbind.service</span><br><span class="line">systemctl start nfs.service</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">查看是否启动</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过查看service列中是否有nfs服务来确认NFS是否启动。</span></span><br><span class="line">rpcinfo -p</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">查看可挂载目录及可连接的IP</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">showmount -e 192.168.40.100</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">重新加载exports配置</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">exportfs -arv</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">nfs客户端</font></p>
<p>在192.168.40.101 操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建挂在目录</span></span><br><span class="line">mkdir -p /data/<span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看nfs服务端可用共享目录</span></span><br><span class="line">showmount -e 192.168.40.100</span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂载目录</span></span><br><span class="line">mount -t nfs 192.168.40.100:/data /data/<span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否挂在</span></span><br><span class="line">df -h</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">开机启动挂载</font></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>fstab</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">192.168.40.100:/opt/nfs /data/<span class="built_in">test</span> nfs nolock 0 0</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux基础</category>
      </categories>
      <tags>
        <tag>nfs</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql常用命令</title>
    <url>/2019/12/19/mysql%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>记录mysql常用命令</p>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p>慢查询设置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启慢查询日志</span></span><br><span class="line">mysql&gt; <span class="built_in">set</span> global slow_query_log=1;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义时间SQL查询的超时时间</span></span><br><span class="line">mysql&gt; <span class="built_in">set</span> global long_query_time = 0.005;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看慢查询信息</span></span><br><span class="line">mysql&gt; show global variables;</span><br><span class="line">mysql&gt; show global variables like <span class="string">'slow_query_log_file'</span>;</span><br><span class="line">mysql&gt; show global variables like <span class="string">'long_query_time'</span>;</span><br><span class="line">mysql&gt; show global variables like <span class="string">'slow_query_log'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看慢查询</span></span><br><span class="line">cat /var/<span class="built_in">log</span>/mysql/slow.log</span><br></pre></td></tr></table></figure>

<p>慢查询分析</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 按时间截取日志</span></span><br><span class="line">sed -n   <span class="string">'/# Time: 200220/,$'</span>p slow.log &gt; test.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取执行时间最长的 10个 TOP SQL。</span></span><br><span class="line">mysqldumpslow -s t -t 10 test10.log &gt; slow_t_top_sql.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取平均查询时间最长的 10 个 TOP SQL。</span></span><br><span class="line">mysqldumpslow -s  at -t 10 test10.log &gt; slow_at_top_sql.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取锁定时间最长的 10个 TOP SQL。</span></span><br><span class="line">mysqldumpslow -s l -t 10 test10.log &gt; slow_l_top_sql.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取平均锁定时间最长的 10个 TOP SQL。</span></span><br><span class="line">mysqldumpslow -s al -t 10 test10.log &gt; slow_l_top_sql.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取返回记录最多的 10个 TOP SQL。</span></span><br><span class="line">mysqldumpslow -s r -t 10 test10.log &gt; slow_r_top_sql.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取平均返回记录最多的 10个 TOP SQL。</span></span><br><span class="line">mysqldumpslow -s ar -t 10 test10.log &gt; slow_r_top_sql.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取执行次数最多的 10个 TOP SQL。</span></span><br><span class="line">mysqldumpslow -s c -t 10 test10.log &gt; slow_r_top_sql.txt</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx-1.14.2自动安装脚本</title>
    <url>/2019/06/04/nginx-1.14.2%E8%87%AA%E5%8A%A8%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h1 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h1><p>前提服务器需要联网</p>
<ol>
<li>在服务器上新建文件：nginx.sh</li>
<li>把代码复制到文件中</li>
<li>赋予执行权限：chmod 755 nginx.sh</li>
<li>执行脚本：./nginx.sh</li>
</ol>
<h1 id="脚本代码"><a href="#脚本代码" class="headerlink" title="脚本代码"></a>脚本代码</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 安装目录</span></span><br><span class="line">dir=/usr/<span class="built_in">local</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装依赖</span></span><br><span class="line">yum -y install gcc gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel wget</span><br><span class="line"></span><br><span class="line"><span class="comment">#下载nginx</span></span><br><span class="line">wget http://nginx.org/download/nginx-1.14.2.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#解压并安装</span></span><br><span class="line">useradd -r -s /sbin/nologin nginx</span><br><span class="line">tar xf ./nginx-1.14.2.tar.gz</span><br><span class="line"><span class="built_in">cd</span> nginx-1.14.2/</span><br><span class="line">./configure --prefix=<span class="variable">$dir</span>/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_stub_status_module --with-http_gzip_static_module --with-http_realip_module</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<h1 id="nginx基本命令"><a href="#nginx基本命令" class="headerlink" title="nginx基本命令"></a>nginx基本命令</h1><p>启动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx</span><br></pre></td></tr></table></figure>

<p>热重启：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure>

<p>停止：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -s stop</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>脚本</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>shell脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx之健康检查</title>
    <url>/2020/07/20/nginx%E4%B9%8B%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>nginx健康检查分为：</p>
<ul>
<li>被动：ngx_http_proxy_module 模块和ngx_http_upstream_module模块，会有失败的连接。（自带）</li>
<li>主动：nginx 模块 nginx_upstream_check_module，通过它可以用来检测后端 realserver 的健康状态。（淘宝第三方）</li>
</ul>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>被动检查</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream name &#123;</span><br><span class="line">    server 10.1.1.110:8080 max_fails=1 fail_timeout=10s;</span><br><span class="line">    server 10.1.1.122:8080 max_fails=1 fail_timeout=10s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">max_fails=number        <span class="comment"># 设定Nginx与服务器通信的尝试失败的次数。在fail_timeout参数定义的时间段内，如果失败的次数达到此值，Nginx就认为服务器不可用。在下一个fail_timeout时间段，服务器不会再被尝试。 失败的尝试次数默认是1。设为0就会停止统计尝试次数，认为服务器是一直可用的。 你可以通过指令proxy_next_upstream、fastcgi_next_upstream和 memcached_next_upstream来配置什么是失败的尝试。 默认配置时，http_404状态不被认为是失败的尝试。</span></span><br><span class="line">fail_timeout=time       <span class="comment"># 设定服务器被认为不可用的时间段以及统计失败尝试次数的时间段。在这段时间中，服务器失败次数达到指定的尝试次数，服务器就被认为不可用。默认情况下，该超时时间是10秒。</span></span><br></pre></td></tr></table></figure>

<p>主动检查</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># interval检测间隔时间，单位为毫秒，rsie请求2次正常的话，标记此realserver的状态为up，fall表示请求5次都失败的情况下，标记此realserver的状态为down，timeout为超时时间，单位为毫秒。</span></span><br><span class="line">upstream linuxyan &#123;</span><br><span class="line">    server 192.168.10.21:80;</span><br><span class="line">    server 192.168.10.22:80;</span><br><span class="line">    check interval=3000 rise=2 fall=5 timeout=1000;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># web查看realserver状态的页面</span></span><br><span class="line">location /nstatus &#123;</span><br><span class="line">check_status;</span><br><span class="line">access_log off;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux基础</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx之php-fpm</title>
    <url>/2020/06/04/nginx%E4%B9%8Bphp-fpm/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>nginx 是一个高性能的http服务器和反向代理服务器。即nginx可以作为一个HTTP服务器进行网站的发布处理，也可以作为一个反向代理服务器进行负载均衡。但需要注意的是：nginx本身并不会对php文件进行解析。对PHP页面的请求将会被nginx交给FastCGI进程监听的IP地址及端口，由php-fpm(第三方的fastcgi进程管理器)作为动态解析服务器处理，最后将处理结果再返回给nginx。即nginx通过反向代理功能将动态请求转向后端php-fpm，从而实现对PHP的解析支持，这就是Nginx实现PHP动态解析的基本原理。 </p>
<ul>
<li>Nginx 是非阻塞IO &amp; IO复用模型，通过操作系统提供的类似 epoll 的功能，可以在一个线程里处理多个客户端的请求。Nginx 的进程就是线程，即每个进程里只有一个线程，但这一个线程可以服务多个客户端。</li>
<li>PHP-FPM 是阻塞的单线程模型，pm.max_children 指定的是最大的进程数量，pm.max_requests 指定的是每个进程处理多少个请求后重启(因为 PHP 偶尔会有内存泄漏，所以需要重启)。PHP-FPM 的每个进程也只有一个线程，但是一个进程同时只能服务一个客户端。</li>
<li>fastCGI ：为了解决不同的语言解释器(如php、python解释器)与webserver的通信，于是出现了cgi协议。只要你按照cgi协议去编写程序，就能实现语言解释器与webwerver的通信。如php-cgi程序。但是webserver每收到一个请求，都会去fork一个cgi进程，请求结束再kill掉这个进程。这样有10000个请求，就需要fork、kill php-cgi进程10000次。 fastcgi是cgi的改良版本。fast-cgi每次处理完请求后，不会kill掉这个进程，而是保留这个进程，使这个进程可以一次处理多个请求。大大提高了效率。</li>
</ul>
<h1 id="php-fpm安装"><a href="#php-fpm安装" class="headerlink" title="php-fpm安装"></a>php-fpm安装</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum -y remove php*</span><br><span class="line">yum install epel-release -y</span><br><span class="line">rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</span><br><span class="line">yum -y install php72w php72w-cli php72w-fpm php72w-common php72w-devel php72w-embedded php72w-gd php72w-mbstring php72w-mysqlnd php72w-opcache php72w-pdo php72w-xml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改/etc/php-fpm.d/www.conf，解决访问403问题</span></span><br><span class="line">security.limit_extensions = .php .php3 .php4 .php5 .php7 .html .js .css .jpg .jpeg .gif .png .htm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> php-fpm.service</span><br><span class="line">systemctl start php-fpm.service</span><br></pre></td></tr></table></figure>

<h1 id="nginx配置php"><a href="#nginx配置php" class="headerlink" title="nginx配置php"></a>nginx配置php</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">    server &#123;</span><br><span class="line">        listen       86;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        root /data/winbb;</span><br><span class="line">        location / &#123;</span><br><span class="line">            index  index.php index.html index.htm;</span><br><span class="line">            try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.php?<span class="variable">$args</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#php 的单独写一个匹配location,这样让静态文件走location /&#123;&#125;</span></span><br><span class="line">        location ~* \.php &#123;</span><br><span class="line">            fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">            fastcgi_index  index.php;</span><br><span class="line">            fastcgi_param  SCRIPT_FILENAME  <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">            include  fastcgi_params;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上配置，当一个http请求到来时，被处理的过程如下：</p>
<ol>
<li>http请求到来后，通过server全局块里监听的端口号，匹配到相应server。然后接下来进行location路径的匹配。</li>
<li>首先匹配到location / ，在这个匹配规则中，通过try_files 先在root目录(/home/leimengyao/api/app/htdocs)下查找是否有$uri文件；没有匹配到，然后再查找root目录下是否有$uri/目录；同样没有匹配到，则匹配最后一项/index.php?$args，即发出一个”内部子请求”，也就相当于nginx发起了一个http请求到<a href="http://10.94.120.124:8000/index.php?c=1&amp;d=4" target="_blank" rel="noopener">http://10.94.120.124:8000/index.php?c=1&amp;d=4</a></li>
<li>这个子请求会被location ~ .php${ … }catch住，也就是进入 FastCGI 的处理程序（nginx需要通过FastCGI模块配置，将相关php参数传递给php-fpm处理。在该项中设置了fastcgi_pass相关参数，将用户请求的资源发给php-fpm进行解析，这里涉及到nginx FastCGI模块的相关配置语法下文会介绍）。而具体的 URI 及参数是在 REQUEST_URI 中传递给 FastCGI 和 WordPress 程序的，因此不受 URI 变化的影响！！！！。</li>
</ol>
]]></content>
      <categories>
        <category>linux基础</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx之添加模块</title>
    <url>/2020/07/20/nginx%E4%B9%8B%E6%B7%BB%E5%8A%A0%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<p>查看模块</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看可用模块及已安装模块</span></span><br><span class="line"><span class="built_in">cd</span> nginx-1.14.2</span><br><span class="line">cat auto/options | grep YES</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看已安装模块</span></span><br><span class="line">./nginx -V</span><br></pre></td></tr></table></figure>

<p>添加模块</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 到安装包</span></span><br><span class="line"><span class="built_in">cd</span> nginx-1.14.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译，别make install，会覆盖原配置</span></span><br><span class="line">./configure --prefix=/opt/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_stub_status_module --with-http_gzip_static_module --with-http_realip_module</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份nginx文件</span></span><br><span class="line">cp /opt/nginx/sbin/nginx /mnt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制新的nginx文件到nginx安装目录下</span></span><br><span class="line">cp objs/nginx /opt/nginx/sbin/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看安装模块</span></span><br><span class="line">/opt/nginx/sbin/nginx -V</span><br></pre></td></tr></table></figure>

<p>添加第三方模块 (nginx_upstream_check_module-master)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载、解压</span></span><br><span class="line">wget https://codeload.github.com/yaoweibin/nginx_upstream_check_module/zip/master</span><br><span class="line">tar xf nginx_upstream_check_module-master.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 到nginx安装包下</span></span><br><span class="line"><span class="built_in">cd</span> nginx-1.14.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入模块</span></span><br><span class="line">patch -p1 &lt; ../nginx_upstream_check_module-master/check_1.14.0+.patch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 试编译</span></span><br><span class="line">./configure --prefix=/opt/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_stub_status_module --with-http_gzip_static_module --with-http_realip_module --add-module=../nginx_upstream_check_module-master/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译，千万别执行：make install</span></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份nginx文件</span></span><br><span class="line">cp /opt/nginx/sbin/nginx /mnt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制新的nginx文件到nginx安装目录下</span></span><br><span class="line">cp objs/nginx /opt/nginx/sbin/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看安装模块</span></span><br><span class="line">/opt/nginx/sbin/nginx -V</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux基础</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx日志备份脚本</title>
    <url>/2019/06/04/nginx%E6%97%A5%E5%BF%97%E5%A4%87%E4%BB%BD%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h1 id="定时任务配置"><a href="#定时任务配置" class="headerlink" title="定时任务配置"></a>定时任务配置</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定时任务</span></span><br><span class="line"><span class="comment">#30 0 * * * /usr/bin/bash /usr/local/nginx/logs/nginx-log.sh &amp;&gt; /dev/null</span></span><br></pre></td></tr></table></figure>

<h1 id="备份脚本配置"><a href="#备份脚本配置" class="headerlink" title="备份脚本配置"></a>备份脚本配置</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#此脚本用于自动分割Nginx的日志，包括access.log和error.log</span></span><br><span class="line"><span class="comment">#将前一天的access.log重命名为access-xxxx-xx-xx.log格式，并重新打开日志文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Nginx日志文件所在目录</span></span><br><span class="line">LOG_PATH=/usr/<span class="built_in">local</span>/nginx/logs/</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取昨天的日期</span></span><br><span class="line">YESTERDAY=$(date -d <span class="string">"yesterday"</span> +%Y-%m-%d)</span><br><span class="line">WEEK=$(date -d -7day +%Y-%m-%d)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取pid文件路径</span></span><br><span class="line">PID=/usr/<span class="built_in">local</span>/nginx/logs/nginx.pid</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建备份目录</span></span><br><span class="line">mkdir -p /usr/<span class="built_in">local</span>/nginx/logs/bak</span><br><span class="line"></span><br><span class="line"><span class="comment">#分割日志</span></span><br><span class="line">mv <span class="variable">$&#123;LOG_PATH&#125;</span>access.log <span class="variable">$&#123;LOG_PATH&#125;</span>bak/access-<span class="variable">$&#123;YESTERDAY&#125;</span>.<span class="built_in">log</span></span><br><span class="line">mv <span class="variable">$&#123;LOG_PATH&#125;</span>error.log <span class="variable">$&#123;LOG_PATH&#125;</span>bak/error-<span class="variable">$&#123;YESTERDAY&#125;</span>.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除一周前日志</span></span><br><span class="line">rm -rf <span class="variable">$&#123;LOG_PATH&#125;</span>bak/access-<span class="variable">$&#123;WEEK&#125;</span>.<span class="built_in">log</span></span><br><span class="line">rm -rf <span class="variable">$&#123;LOG_PATH&#125;</span>bak/error-<span class="variable">$&#123;WEEK&#125;</span>.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#向Nginx主进程发送USR1信号，重新打开日志文件</span></span><br><span class="line"><span class="built_in">kill</span> -USR1 `cat <span class="variable">$&#123;PID&#125;</span>`</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>脚本</category>
      </categories>
      <tags>
        <tag>shell脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>node.js和PM2安装和使用</title>
    <url>/2019/10/26/node.js%E5%92%8CPM2%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><strong>Node.js：</strong> 就是运行在服务端的 JavaScript。<br>Node.js 是一个基于Chrome JavaScript 运行时建立的一个平台。<br>Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。</p>
<p><strong>NPM：</strong> 是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：</p>
<ol>
<li>允许用户从NPM服务器下载别人编写的第三方包到本地使用。</li>
<li>允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。</li>
<li>允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。</li>
</ol>
<p><strong>PM2：</strong> 是node进程管理工具，可以利用它来简化很多node应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，而且使用非常简单。</p>
<p>下面就对PM2进行入门性的介绍，基本涵盖了PM2的常用的功能和配置。</p>
<h1 id="node-js安装"><a href="#node-js安装" class="headerlink" title="node.js安装"></a>node.js安装</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://cdn.npm.taobao.org/dist/node/v12.13.0/node-v12.13.0-linux-x64.tar.xz</span><br><span class="line"></span><br><span class="line">tar xf node-v12.13.0-linux-x64.tar.xz -C /opt/</span><br><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">mv node-v12.13.0-linux-x64 node</span><br><span class="line">ln -s /opt/node/bin/npm /usr/<span class="built_in">local</span>/bin/</span><br><span class="line">ln -s /opt/node/bin/node /usr/<span class="built_in">local</span>/bin/</span><br><span class="line"></span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<h2 id="npm常用命令"><a href="#npm常用命令" class="headerlink" title="npm常用命令"></a>npm常用命令</h2><ol>
<li><strong>查看node版本</strong><br>node –version</li>
<li><strong>查看npm 版本</strong><br>npm -v</li>
<li><strong>安装cnpm (国内淘宝镜像源)</strong><br>npm install cnpm -g –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></li>
<li><strong>安装express模块</strong><br>npm install express</li>
<li><strong>全局安装express模块</strong><br>npm install -g express</li>
<li><strong>列出已安装模块</strong><br>npm list</li>
<li><strong>显示模块详情</strong><br>npm show express</li>
<li><strong>升级当前目录下的项目的所有模块</strong><br>npm update</li>
<li><strong>升级当前目录下的项目的指定模块</strong><br>npm update express</li>
<li><strong>升级全局安装的express模块</strong><br>npm update -g express</li>
<li><strong>删除指定的模块</strong><br>npm uninstall express</li>
<li><strong>更新node 版本</strong><br>首先需要确保是否安装 n 模块，这个是node升级需要<br>没有安装执行：npm i n -g -f<br>检测使用: n –version<br>更新node命令：n stable</li>
</ol>
<h2 id="pm2常用命令"><a href="#pm2常用命令" class="headerlink" title="pm2常用命令"></a>pm2常用命令</h2><ol>
<li><strong>启动app.js应用程序</strong><br>pm2 start app.js              </li>
<li><strong>cluster mode 模式启动4个app.js的应用实例</strong><br>pm2 start app.js -i 4</li>
<li><strong>启动应用程序并命名为 “api”</strong><br>pm2 start app.js –name=”api” </li>
<li><strong>当文件变化时自动重启应用</strong><br>pm2 start app.js –watch     </li>
<li><strong>启动 bash 脚本</strong><br>pm2 start script.sh</li>
<li><strong>列表 PM2 启动的所有的应用程序</strong><br>pm2 list                      </li>
<li><strong>显示每个应用程序的CPU和内存占用情况</strong><br>pm2 monit                    </li>
<li><strong>显示应用程序的所有信息</strong><br>pm2 show app          </li>
<li><strong>显示所有应用程序的日志</strong><br>pm2 logs                      </li>
<li><strong>显示指定应用程序的日志</strong><br>pm2 logs app</li>
<li><strong>清空所有日志文件</strong><br>pm2 flush</li>
<li><strong>停止所有的应用程序</strong><br>pm2 stop all                  </li>
<li><strong>停止 id为 0的指定应用程序</strong><br>pm2 stop 0                   </li>
<li><strong>重启所有应用</strong><br>pm2 restart all              </li>
<li><strong>重启 cluster mode下的所有应用</strong><br>pm2 reload all               </li>
<li><strong>重启集群所有应用</strong><br>pm2 gracefulReload all</li>
<li><strong>关闭并删除所有应用</strong><br>pm2 delete all                </li>
<li><strong>删除指定应用 id 0</strong><br>pm2 delete 0                  </li>
<li><strong>把名字叫api的应用扩展到10个实例</strong><br>pm2 scale api 10              </li>
<li><strong>重置重启数量</strong><br>pm2 reset app   </li>
<li><strong>创建开机自启动命令</strong><br>pm2 startup                   </li>
<li><strong>保存当前应用列表</strong><br>pm2 save                      </li>
<li><strong>重新加载保存的应用列表</strong><br>pm2 resurrect                 </li>
</ol>
]]></content>
      <categories>
        <category>linux基础</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx重写与重定向</title>
    <url>/2020/03/18/nginx%E9%87%8D%E5%86%99%E4%B8%8E%E9%87%8D%E5%AE%9A%E5%90%91/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>重写与重定向功能是现在大多数Web服务器都支持的一项功能，相对于其他产品而言,Nginx中的rewrite模块提供的功能在配置上更加的灵活自由,可定制性非常的高。它的实现方式也非常的简单,只需要通过rewrite指令根据Nginx提供的全局变量或自定义的变量,结合正则表达式以及进一步处理的标识就可以完成URL重写或重定向。</p>
<p>rewrite参数：</p>
<ul>
<li><code>last</code> 本条规则匹配完成后继续向下匹配新的location URI规则</li>
<li><code>break</code> 本条规则匹配完成后终止，不在匹配任何规则</li>
<li><code>redirect</code> 返回302临时重定向</li>
<li><code>permanent</code> 返回301永久重定向</li>
</ul>
<p>注：当flag的值为last或break时，标识当前的设置为重写，当flag的值为redirect或permanent时表示重定向。</p>
<h1 id="rewrite-重写"><a href="#rewrite-重写" class="headerlink" title="rewrite 重写"></a>rewrite 重写</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">	listen 80;</span><br><span class="line">	server_name localhost;</span><br><span class="line">	index index.html index.htm;</span><br><span class="line">	root html;</span><br><span class="line">	<span class="keyword">if</span> (!-e <span class="variable">$request_filename</span>)&#123;</span><br><span class="line">		rewrite <span class="string">"^/.*"</span> /default/default.html <span class="built_in">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述第6行配置,通过if指令判断访问不到用户请求的文件或目录时,执行第7行指令。其中,!-e用于判断不存在指定的文件或目录时，执行if块内的语句。内置变量$request_ filename 表示当前请求的文件路径;^/.*用于匹配当前网站下的所有请求，/default/default.html用于替换符合指定规则的请求。</p>
<p>值得一提的是,if指令根据给定的条件进行判断,如果判断结果为true,则执行大括号“{}”内的指令。当判断条件仅是一个变量时,如果值为空或任何以0开头的字符串都会当做false,不再执行大括号内的指令。</p>
<p>在根目录下创建default目录，并在该目录下编写default.html文件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome to html/default/default.html!<span class="tag">&lt;/<span class="name">h</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>访问一个不存在的文件：<code>localhost/ffff.df</code></p>
<p>break和last标识的区别：</p>
<p>在使用rewrite实现重写时,需要注意flag可选参数值break和last的区别，前者在rewrite指令匹配成功后就不再进行匹配，而后者在rewrite后会根据rewrite匹配的规则重新发起一个请求继续进行匹配。为了明确地看到两者的区别，下面通过二个案例进行验证。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">	listen 80;</span><br><span class="line">	server_name localhost;</span><br><span class="line">	root html;</span><br><span class="line">	location /<span class="built_in">break</span>/ &#123;</span><br><span class="line">		rewrite ^/<span class="built_in">break</span>/(.*) /<span class="built_in">test</span>/<span class="variable">$1</span> <span class="built_in">break</span>;</span><br><span class="line">		<span class="built_in">echo</span> <span class="string">"break page"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	location /last/ &#123;</span><br><span class="line">		rewrite ^/last/(.*) /<span class="built_in">test</span>/<span class="variable">$1</span> last;</span><br><span class="line">		<span class="built_in">echo</span> <span class="string">"last page"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	location /<span class="built_in">test</span>/ &#123;</span><br><span class="line">		<span class="built_in">echo</span> <span class="string">"test page"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当用户的请求符合第5行location 规则时,执行第6行rewrite指令后，根据break的指定,继续执行第7行配置。而当用户的请求符合第9行location规则时,执行第10行rewrite指令后,根据last的指定,按照匹配到的替换算法发起一个新的请求<a href="http://test" target="_blank" rel="noopener">http://test</a>. ng. test/ test/ last. html,最终匹配到第13行的location规则,然后执行第14行的echo输出语句。</p>
<p>因此,在实际使用rewrite配置重写时，要根据实际情况选择合适的flag可选参数值，，否则会造成与预期不一样的结果。</p>
<h1 id="rewrite重定向"><a href="#rewrite重定向" class="headerlink" title="rewrite重定向"></a>rewrite重定向</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">	listen 80;</span><br><span class="line">	server_name localhost;</span><br><span class="line">	root html;</span><br><span class="line">	<span class="built_in">set</span> <span class="variable">$name</span> <span class="variable">$1</span>;</span><br><span class="line">	rewrite ^/img-([0-9]+).jpg$/img/<span class="variable">$name</span>.jpg permanent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 域名重写</span></span><br><span class="line">server &#123;</span><br><span class="line">	listen 80;</span><br><span class="line">	server_name localhost;</span><br><span class="line">	root html;</span><br><span class="line">    rewrite ^/(.*)$ https://winbb.com/<span class="variable">$1</span> permanent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述第5行配置，利用set指令为变量$name赋值，$1表示符合正则表达式第一个子模式的值，如第6行中的子模式([0-9]+ )匹配到的值,可以是2、45等由一个或多个数字组成的字符串。第6行用于在用户请求“<a href="http://localhost/img-数字" target="_blank" rel="noopener">http://localhost/img-数字</a>. jpg”时，重定向到“<a href="http://localhost/img/数字jpg&quot;。" target="_blank" rel="noopener">http://localhost/img/数字jpg&quot;。</a></p>
<p>接下来，在localhost的网站目录中创建一个用于存放图片的img目录，然后在该目录中保存一个文件名为2.jpg的图片。为了测试当前配置是否成功，通过浏览器访问<a href="http://localhost/img-2" target="_blank" rel="noopener">http://localhost/img-2</a>. jpg，会跳转到<a href="http://localhost/img/2.jpg。" target="_blank" rel="noopener">http://localhost/img/2.jpg。</a></p>
<p>需要注意的是，redirect和permanent在使用时有一定的区别，前者返回的HTTP状态码是302(临时重定向),使得搜索引擎在抓取新内容的同时保留旧的网址,后者返回的HTTP状态码是，301(永久重定向)会让搜索引擎在抓取新内容的同时也将旧的网址永久替换为重定向之后的网址。</p>
]]></content>
      <categories>
        <category>linux基础</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>oss安装</title>
    <url>/2020/01/23/oss%E5%91%BD%E4%BB%A4%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>oss是阿里云存储服务，可以使用客户端或命令行工具上传下载文件。</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>下载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://gosspublic.alicdn.com/ossutil/1.6.10/ossutil64?spm=a2c4g.11186623.2.12.3467448aqUzNnH</span><br><span class="line">mv ossutil64?spm=a2c4g.11186623.2.12.3467448aqUzNnH ossutil64</span><br><span class="line">chmod 755 ossutil64</span><br></pre></td></tr></table></figure>

<p>注册</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置信息</span></span><br><span class="line">ossutil64 config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建的bucket上可以看到endpoint信息</span></span><br><span class="line">endpoint=oss-cn-hangzhou-fawefwae.aliyuncs.com</span><br><span class="line"><span class="comment"># 登录账号设置</span></span><br><span class="line">accessKeyID=efwaefaw</span><br><span class="line">accessKeySecret=efawefawefwae</span><br></pre></td></tr></table></figure>

<p>上传</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ossutil64 cp delete_promoter_memcache.py oss://aliyun-mysql-storage</span><br></pre></td></tr></table></figure>

<p>下载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/bin/ossutil64 cp oss://aliyun-mysql-storage/test.sql.gz .</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux基础</category>
      </categories>
      <tags>
        <tag>阿里云</tag>
      </tags>
  </entry>
  <entry>
    <title>openvpn搭建配置</title>
    <url>/2020/06/06/openvpn%E6%90%AD%E5%BB%BA%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p><a href="https://www.cnblogs.com/lemon-le/p/6266921.html" target="_blank" rel="noopener">https://www.cnblogs.com/lemon-le/p/6266921.html</a></p>
]]></content>
      <categories>
        <category>linux基础</category>
      </categories>
      <tags>
        <tag>vpn</tag>
      </tags>
  </entry>
  <entry>
    <title>prometheus+grafana监控部署</title>
    <url>/2019/08/04/prometheus%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Prometheus是一个开源监控系统，它前身是SoundCloud的警告工具包。从2012年开始，许多公司和组织开始使用Prometheus。该项目的开发人员和用户社区非常活跃，越来越多的开发人员和用户参与到该项目中。目前它是一个独立的开源项目，且不依赖与任何公司。为了强调这点和明确该项目治理结构，Prometheus在2016年继Kurberntes之后，加入了Cloud Native Computing Foundation。</p>
<h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><p>监控机安装：192.168.1.24</p>
<ol>
<li>安装prometheus，监控服务</li>
<li>安装node-exporter，节点数据收集服务</li>
<li>安装alertmanager，报警服务</li>
<li>安装grafana，图形化展示服务</li>
</ol>
<h2 id="一、监控机安装prometheus"><a href="#一、监控机安装prometheus" class="headerlink" title="一、监控机安装prometheus"></a>一、监控机安装prometheus</h2><h3 id="1、安装命令"><a href="#1、安装命令" class="headerlink" title="1、安装命令"></a>1、安装命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget https://github.com/prometheus/prometheus/releases/download/v2.12.0/prometheus-2.12.0.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">tar xf prometheus-2.12.0.linux-amd64.tar.gz</span><br><span class="line"><span class="built_in">cd</span> prometheus-2.12.0.linux-amd64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据下面yml配置文件配置需要信息</span></span><br><span class="line">vim prometheus.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">nohup ./prometheus --config.file=./prometheus.yml &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问prometheus</span></span><br><span class="line">http://192.168.1.24:9090</span><br></pre></td></tr></table></figure>

<h3 id="2、配置修改：vim-prometheus-yml"><a href="#2、配置修改：vim-prometheus-yml" class="headerlink" title="2、配置修改：vim prometheus.yml"></a>2、配置修改：vim prometheus.yml</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="comment"># 每隔15秒向pushgateway采集一次指标数据</span></span><br><span class="line"><span class="attr">  scrape_interval:</span>    <span class="number">15</span><span class="string">s</span> </span><br><span class="line">  <span class="comment"># 每隔15秒根据所配置的规则集，进行规则计算</span></span><br><span class="line"><span class="attr">  evaluation_interval:</span> <span class="number">15</span><span class="string">s</span> </span><br><span class="line"></span><br><span class="line"><span class="attr">alerting:</span></span><br><span class="line"><span class="attr">  alertmanagers:</span></span><br><span class="line"><span class="attr">  - static_configs:</span></span><br><span class="line">  <span class="comment"># 设置altermanager的地址，altermanager报警规则服务</span></span><br><span class="line"><span class="attr">    - targets:</span> <span class="string">['192.168.1.24:9093']</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 指定所配置报价模板文件，下面给出模板配置</span></span><br><span class="line"><span class="attr">rule_files:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">"rules.yml"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="comment"># 用于获取被控主机数据，可以添加多条</span></span><br><span class="line"><span class="attr">  - job_name:</span> <span class="string">'测试-25'</span></span><br><span class="line"><span class="attr">    static_configs:</span></span><br><span class="line"><span class="attr">    - targets:</span> <span class="string">['192.168.1.25:9100']</span></span><br></pre></td></tr></table></figure>

<h3 id="3、rules-yml报警模板配置"><a href="#3、rules-yml报警模板配置" class="headerlink" title="3、rules.yml报警模板配置"></a>3、rules.yml报警模板配置</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">groups:</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">down</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">  - alert:</span> <span class="string">"down报警"</span></span><br><span class="line"><span class="attr">    expr:</span> <span class="string">up</span> <span class="string">==</span> <span class="number">0</span></span><br><span class="line"><span class="attr">    for:</span> <span class="number">1</span><span class="string">m</span></span><br><span class="line"><span class="attr">    labels:</span></span><br><span class="line"><span class="attr">      severity:</span> <span class="string">warning</span></span><br><span class="line"><span class="attr">    annotations:</span></span><br><span class="line"><span class="attr">      summary:</span> <span class="string">"down报警"</span></span><br><span class="line"><span class="attr">      description:</span> <span class="string">"报警时间:"</span></span><br><span class="line"><span class="attr">      value:</span> <span class="string">"已使用：<span class="template-variable">&#123;&#123; $value &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">memory</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">  - alert:</span> <span class="string">"内存报警"</span></span><br><span class="line"><span class="attr">    expr:</span> <span class="string">((node_memory_MemTotal_bytes</span> <span class="bullet">-(node_memory_MemFree_bytes+node_memory_Buffers_bytes+node_memory_Cached_bytes)</span> <span class="string">)/node_memory_MemTotal_bytes</span> <span class="string">)</span> <span class="string">*</span> <span class="number">100</span> <span class="string">&gt; 90</span></span><br><span class="line"><span class="string"></span><span class="attr">    for:</span> <span class="number">1</span><span class="string">m</span></span><br><span class="line"><span class="attr">    labels:</span></span><br><span class="line"><span class="attr">      severity:</span> <span class="string">warning</span></span><br><span class="line"><span class="attr">    annotations:</span></span><br><span class="line"><span class="attr">      summary:</span> <span class="string">"内存报警"</span></span><br><span class="line"><span class="attr">      description:</span> <span class="string">"报警时间:"</span></span><br><span class="line"><span class="attr">      value:</span> <span class="string">"已使用：<span class="template-variable">&#123;&#123; $value &#125;&#125;</span>%"</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">cpu</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">  - alert:</span> <span class="string">"cpu报警"</span></span><br><span class="line"><span class="attr">    expr:</span> <span class="number">100</span> <span class="bullet">-</span> <span class="string">((avg</span> <span class="string">by</span> <span class="string">(instance,job,env)(irate(node_cpu_seconds_total&#123;mode="idle"&#125;[30s])))</span> <span class="string">*100)</span> <span class="string">&gt; 90</span></span><br><span class="line"><span class="string"></span><span class="attr">    for:</span> <span class="number">1</span><span class="string">m</span></span><br><span class="line"><span class="attr">    labels:</span></span><br><span class="line"><span class="attr">      severity:</span> <span class="string">warning</span></span><br><span class="line"><span class="attr">    annotations:</span></span><br><span class="line"><span class="attr">      summary:</span> <span class="string">"cpu报警"</span></span><br><span class="line"><span class="attr">      description:</span> <span class="string">"报警时间:"</span></span><br><span class="line"><span class="attr">      value:</span> <span class="string">"已使用：<span class="template-variable">&#123;&#123; $value &#125;&#125;</span>%"</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">disk</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">  - alert:</span> <span class="string">"disk报警"</span></span><br><span class="line"><span class="attr">    expr:</span> <span class="number">100</span> <span class="bullet">-</span> <span class="string">(node_filesystem_avail_bytes&#123;fstype</span> <span class="string">!~</span> <span class="string">"nfs|rpc_pipefs|rootfs|tmpfs"</span><span class="string">,device!~"/etc/auto.misc|/dev/mapper/centos-home",mountpoint</span> <span class="string">!~</span> <span class="string">"/boot|/net|/selinux"</span><span class="string">&#125;</span> <span class="string">/node_filesystem_size_bytes&#123;fstype</span> <span class="string">!~</span> <span class="string">"nfs|rpc_pipefs|rootfs|tmpfs"</span><span class="string">,device!~"/etc/auto.misc|/dev/mapper/centos-home",mountpoint</span> <span class="string">!~</span> <span class="string">"/boot|/net|/selinux"</span><span class="string">&#125;</span> <span class="string">)</span> <span class="string">*</span> <span class="number">100</span>  <span class="string">&gt; 80</span></span><br><span class="line"><span class="string"></span><span class="attr">    for:</span> <span class="number">1</span><span class="string">m</span></span><br><span class="line"><span class="attr">    labels:</span></span><br><span class="line"><span class="attr">      severity:</span> <span class="string">warning</span></span><br><span class="line"><span class="attr">    annotations:</span></span><br><span class="line"><span class="attr">      summary:</span> <span class="string">"disk报警"</span></span><br><span class="line"><span class="attr">      description:</span> <span class="string">"报警时间:"</span></span><br><span class="line"><span class="attr">      value:</span> <span class="string">"已使用：<span class="template-variable">&#123;&#123; $value &#125;&#125;</span>%"</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">net</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">  - alert:</span> <span class="string">"net报警"</span></span><br><span class="line"><span class="attr">    expr:</span> <span class="string">(irate(node_network_transmit_bytes_total&#123;device!~"lo"&#125;[1m])</span> <span class="string">/</span> <span class="number">1000</span><span class="string">)</span> <span class="string">&gt; 80000</span></span><br><span class="line"><span class="string"></span><span class="attr">    for:</span> <span class="number">1</span><span class="string">m</span></span><br><span class="line"><span class="attr">    labels:</span></span><br><span class="line"><span class="attr">      severity:</span> <span class="string">warning</span></span><br><span class="line"><span class="attr">    annotations:</span></span><br><span class="line"><span class="attr">      summary:</span> <span class="string">"net报警"</span></span><br><span class="line"><span class="attr">      description:</span> <span class="string">"报警时间:"</span></span><br><span class="line"><span class="attr">      value:</span> <span class="string">"已使用：<span class="template-variable">&#123;&#123; $value &#125;&#125;</span>KB"</span></span><br></pre></td></tr></table></figure>

<h2 id="二、监控机安装node-exporter"><a href="#二、监控机安装node-exporter" class="headerlink" title="二、监控机安装node-exporter"></a>二、监控机安装node-exporter</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget https://github.com/prometheus/node_exporter/releases/download/v0.18.1/node_exporter-0.18.1.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">tar xf node_exporter-0.18.1.linux-amd64.tar.gz</span><br><span class="line"><span class="built_in">cd</span> node_exporter-0.18.1.linux-amd64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">nohup ./node_exporter &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问</span></span><br><span class="line">http://192.168.1.24:9100</span><br></pre></td></tr></table></figure>

<h2 id="三、监控机安装alertmanager"><a href="#三、监控机安装alertmanager" class="headerlink" title="三、监控机安装alertmanager"></a>三、监控机安装alertmanager</h2><h3 id="1、安装命令-1"><a href="#1、安装命令-1" class="headerlink" title="1、安装命令"></a>1、安装命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget https://github.com/prometheus/alertmanager/releases/download/v0.19.0/alertmanager-0.19.0.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">tar xf alertmanager-0.19.0.linux-amd64.tar.gz</span><br><span class="line"><span class="built_in">cd</span> alertmanager-0.19.0.linux-amd64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置，下面给出配置信息</span></span><br><span class="line">vim alertmanager.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">nohup ./alertmanager --config.file=./alertmanager.yml &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问</span></span><br><span class="line">http://192.168.1.24:9093</span><br></pre></td></tr></table></figure>

<h3 id="2、alertmanager-yml报警规则配置"><a href="#2、alertmanager-yml报警规则配置" class="headerlink" title="2、alertmanager.yml报警规则配置"></a>2、alertmanager.yml报警规则配置</h3><p>以下是邮箱报警配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="comment">#处理超时时间，默认为5min</span></span><br><span class="line"><span class="attr">  resolve_timeout:</span> <span class="number">5</span><span class="string">m</span>   </span><br><span class="line">  <span class="comment"># 邮箱smtp服务器代理</span></span><br><span class="line"><span class="attr">  smtp_smarthost:</span> <span class="string">'smtp.163.com:25'</span>   </span><br><span class="line">  <span class="comment"># 发送邮箱名称</span></span><br><span class="line"><span class="attr">  smtp_from:</span> <span class="string">'hxqxiaoqi1990@163.com'</span>    </span><br><span class="line">  <span class="comment"># 邮箱名称</span></span><br><span class="line"><span class="attr">  smtp_auth_username:</span> <span class="string">'hxqxiaoqi1990@163.com'</span>   </span><br><span class="line">  <span class="comment"># 邮箱密码或授权码</span></span><br><span class="line"><span class="attr">  smtp_auth_password:</span> <span class="string">'Hxq7996026'</span>      </span><br><span class="line"><span class="attr">  smtp_require_tls:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">route:</span></span><br><span class="line">  <span class="comment"># 报警分组依据</span></span><br><span class="line"><span class="attr">  group_by:</span> <span class="string">['alertname']</span>       </span><br><span class="line">  <span class="comment"># 最初即第一次等待多久时间发送一组警报的通知</span></span><br><span class="line"><span class="attr">  group_wait:</span> <span class="number">10</span><span class="string">s</span>       </span><br><span class="line">  <span class="comment"># 在发送新警报前的等待时间</span></span><br><span class="line"><span class="attr">  group_interval:</span> <span class="number">1</span><span class="string">h</span>    </span><br><span class="line">  <span class="comment"># 发送重复警报的周期 对于email配置中，此项不可以设置过低，否则将会由于邮件发送太多频繁，被smtp服务器拒绝</span></span><br><span class="line"><span class="attr">  repeat_interval:</span> <span class="number">1</span><span class="string">h</span>   </span><br><span class="line">  <span class="comment"># 发送警报的接收者的名称，以下receivers name的名称</span></span><br><span class="line"><span class="attr">  receiver:</span> <span class="string">'mail'</span>      </span><br><span class="line"><span class="attr">receivers:</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">'mail'</span></span><br><span class="line"><span class="attr">  email_configs:</span></span><br><span class="line"><span class="attr">  - to:</span> <span class="string">'hxqxiaoqi1990@163.com'</span></span><br><span class="line"><span class="attr">inhibit_rules:</span></span><br><span class="line"><span class="attr">  - source_match:</span></span><br><span class="line"><span class="attr">      severity:</span> <span class="string">'critical'</span></span><br><span class="line"><span class="attr">    target_match:</span></span><br><span class="line"><span class="attr">      severity:</span> <span class="string">'warning'</span></span><br><span class="line"><span class="attr">    equal:</span> <span class="string">['alertname',</span> <span class="string">'dev'</span><span class="string">,</span> <span class="string">'instance'</span><span class="string">]</span></span><br></pre></td></tr></table></figure>

<h2 id="四、监控机安装grafana"><a href="#四、监控机安装grafana" class="headerlink" title="四、监控机安装grafana"></a>四、监控机安装grafana</h2><h3 id="1、安装命令-2"><a href="#1、安装命令-2" class="headerlink" title="1、安装命令"></a>1、安装命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://dl.grafana.com/oss/release/grafana-6.3.5.linux-amd64.tar.gz </span><br><span class="line"></span><br><span class="line">tar xf grafana-6.3.5.linux-amd64.tar.gz </span><br><span class="line"><span class="built_in">cd</span> grafana-6.3.5.linux-amd64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">nohup ./alertmanager --config.file=./alertmanager.yml &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问</span></span><br><span class="line">http://192.168.1.24:3000</span><br></pre></td></tr></table></figure>

<h3 id="2、添加数据源"><a href="#2、添加数据源" class="headerlink" title="2、添加数据源"></a>2、添加数据源</h3><p>1.在设置中：Configuration–&gt;Date Sources<br>2.配置prometheus服务信息：<a href="http://192.168.1.24:9090" target="_blank" rel="noopener">http://192.168.1.24:9090</a></p>
<h3 id="3、添加仪表盘"><a href="#3、添加仪表盘" class="headerlink" title="3、添加仪表盘"></a>3、添加仪表盘</h3><p>1.在创建中：Create–&gt;Import<br>2.去下载：<a href="https://grafana.com/grafana/dashboards" target="_blank" rel="noopener">https://grafana.com/grafana/dashboards</a> 或复制模板ID号<br>3.填写ID号，或上传仪表盘模板</p>
]]></content>
      <categories>
        <category>监控</category>
      </categories>
      <tags>
        <tag>prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>python2之requests模块</title>
    <url>/2019/11/02/python2%E4%B9%8Brequests%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Requests 是使用 Apache2 Licensed 许可证的 基于Python开发的HTTP 库，其在Python内置模块的基础上进行了高度的封装，从而使得Pythoner进行网络请求时，变得美好了许多，使用Requests可以轻而易举的完成浏览器可有的任何操作。requests可以模拟浏览器的请求，比起之前用到的urllib，requests模块的api更加便捷（其本质就是封装了urllib3）</p>
<h1 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h1><h2 id="get示例"><a href="#get示例" class="headerlink" title="get示例"></a>get示例</h2><p><strong>获取网页内容</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">response = requests.get(<span class="string">'http://httpbin.org/'</span>)</span><br><span class="line"><span class="keyword">print</span> response.text</span><br></pre></td></tr></table></figure>

<p><strong>获取状态码</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">response = requests.get(<span class="string">'http://httpbin.org/'</span>).status_code</span><br><span class="line"><span class="keyword">print</span> response</span><br></pre></td></tr></table></figure>

<p><strong>打印json结果</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">"http://httpbin.org/get"</span>)</span><br><span class="line">print(type(response.text))</span><br><span class="line">print(type(response.json()))</span><br><span class="line"></span><br><span class="line">print(json.loads(response.text))</span><br><span class="line">print(response.json())</span><br></pre></td></tr></table></figure>

<p><strong>添加请求头</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment"># 不加请求头，有些服务会直接报500的错误</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">response = requests.get(<span class="string">"https://www.zhihu.com/explore"</span>)</span><br><span class="line">print(response.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加请求头</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(<span class="string">"https://www.zhihu.com/explore"</span>, headers=headers)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python2之threading模块多线程</title>
    <url>/2019/11/02/python2%E4%B9%8Bthreading%E6%A8%A1%E5%9D%97%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>多线程类似于同时执行多个不同程序，多线程运行有如下优点：</p>
<p>1.使用线程可以把占据长时间的程序中的任务放到后台去处理。<br>2.用户界面可以更加吸引人，这样比如用户点击了一个按钮去触发某些事件的处理，可以弹出一个进度条来显示处理的进度<br>3.程序的运行速度可能加快<br>4.在一些等待的任务实现上如用户输入、文件读写和网络收发数据等，线程就比较有用了。在这种情况下我们可以释放一些珍贵的资源如内存占用等等。</p>
<h1 id="简单的示例"><a href="#简单的示例" class="headerlink" title="简单的示例"></a>简单的示例</h1><h2 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h2><p>手动创建三个线程同时执行，打印和后，等待5秒结束。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(a1, a2)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> a1 + a2</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建线程</span></span><br><span class="line">t = threading.Thread(target=f1, args=(<span class="number">111</span>, <span class="number">111</span>))  </span><br><span class="line"><span class="comment"># 开启线程</span></span><br><span class="line">t.start()  </span><br><span class="line"></span><br><span class="line">t = threading.Thread(target=f1, args=(<span class="number">222</span>, <span class="number">222</span>))</span><br><span class="line">t.start()</span><br><span class="line"></span><br><span class="line">t = threading.Thread(target=f1, args=(<span class="number">333</span>, <span class="number">333</span>))</span><br><span class="line">t.start()</span><br></pre></td></tr></table></figure>

<h2 id="示例二"><a href="#示例二" class="headerlink" title="示例二"></a>示例二</h2><p>这段代码执行的效果是2秒内全部执行完成，而不是每执行一次函数等待两秒，打开了三个线程同时执行函数，打印三次时间。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个函数交给多线程执行</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(x)</span>:</span></span><br><span class="line">    date = time.time()</span><br><span class="line">    <span class="keyword">print</span> x</span><br><span class="line">    <span class="keyword">print</span> date</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">threads = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># target=执行的函数，args=传给函数的值，range代表打开几个线程执行，变量i传给函数test的x</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    t = threading.Thread(target=test, args=(i,))</span><br><span class="line">    threads.append(t)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开线程活动</span></span><br><span class="line"><span class="keyword">for</span> thr <span class="keyword">in</span> threads:</span><br><span class="line">    thr.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待至线程中止</span></span><br><span class="line"><span class="keyword">for</span> thr <span class="keyword">in</span> threads:</span><br><span class="line">    thr.join()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>redis安装</title>
    <url>/2019/09/04/redis-5.0.2%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>REmote DIctionary Server(Redis) 是一个由Salvatore Sanfilippo写的key-value存储系统。</p>
<p>Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p>
<p>它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Hash), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。</p>
<h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><ol>
<li>安装环境，下载，解压，编译</li>
<li>修改配置</li>
<li>启动，登录</li>
</ol>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>以下为一键安装脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># redis自动安装脚本</span></span><br><span class="line"></span><br><span class="line">redis_dir=/usr/<span class="built_in">local</span></span><br><span class="line">redis_version=redis-stable</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget http://download.redis.io/<span class="variable">$redis_version</span>.tar.gz</span><br><span class="line">yum -y install gcc</span><br><span class="line"></span><br><span class="line">tar xf <span class="variable">$redis_version</span>.tar.gz -C <span class="variable">$redis_dir</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$redis_dir</span>/<span class="variable">$redis_version</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">mkdir <span class="variable">$redis_dir</span>/<span class="variable">$redis_version</span>/&#123;data,logs&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入配置</span></span><br><span class="line">cat &gt; redis.conf &lt;&lt;EOF</span><br><span class="line">daemonize yes</span><br><span class="line">protected-mode no</span><br><span class="line">port 6379</span><br><span class="line">pidfile <span class="string">"<span class="variable">$redis_dir</span>/<span class="variable">$redis_version</span>/logs/redis.pid"</span></span><br><span class="line">logfile <span class="string">"<span class="variable">$redis_dir</span>/<span class="variable">$redis_version</span>/logs/redis.log"</span></span><br><span class="line">dbfilename <span class="string">"dump.rdb"</span></span><br><span class="line">dir <span class="string">"./data"</span></span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line"><span class="variable">$redis_dir</span>/<span class="variable">$redis_version</span>/src/redis-server <span class="variable">$redis_dir</span>/<span class="variable">$redis_version</span>/redis.conf</span><br></pre></td></tr></table></figure>

<h2 id="启动，登录"><a href="#启动，登录" class="headerlink" title="启动，登录"></a>启动，登录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/redis-stable</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">./src/redis-server ./redis.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">./src/redis-cli -p 6379 shutdown</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录</span></span><br><span class="line">./src/redis-cli -h 127.0.0.1 -p 6379</span><br></pre></td></tr></table></figure>

<h1 id="自启动脚本"><a href="#自启动脚本" class="headerlink" title="自启动脚本"></a>自启动脚本</h1><p>将以下文件保存为redis.service，并放在：/usr/lib/systemd/system/<br>每次更改文件必须重启：systemctl daemon-reload</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Redis</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=1</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/redis-stable/src/redis-server /usr/<span class="built_in">local</span>/redis-stable/redis.conf  --daemonize no</span><br><span class="line">ExecStop=/usr/<span class="built_in">local</span>/redis-stable/src/redis-cli -h 127.0.0.1 -p 6379 shutdown</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<p>[Unit] 表示这是基础信息<br>Description 是描述<br>After 是在那个服务后面启动，一般是网络服务启动后启动<br>[Service] 表示这里是服务信息<br>Restart=always 定义何种情况 Systemd 会自动重启当前服务，可能的值包括always（总是重启）、on-success、on-failure、on-abnormal、on-abort、on-watchdog<br>RestartSec=1 定义 Systemd 停止当前服务之前等待的秒数<br>ExecStart 是启动服务的命令<br>ExecStop 是停止服务的指令<br>[Install] 表示这是是安装相关信息<br>WantedBy 是以哪种方式启动：multi-user.target表明当系统以多用户方式（默认的运行级别）启动时，这个服务需要被自动运行。</p>
<h1 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 报错</span></span><br><span class="line">WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is <span class="built_in">set</span> to the lower value of 128.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决</span></span><br><span class="line">net.core.somaxconn= 1024  <span class="comment">#sysctl.conf</span></span><br><span class="line">vm.overcommit_memory=1	  <span class="comment">#sysctl.conf</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>python3之数据库连接</title>
    <url>/2019/11/02/python3%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>PyMySQL 是在 Python3.x 版本中用于连接 MySQL 服务器的一个库，Python2中则使用mysqldb。</p>
<p>PyMySQL 遵循 Python 数据库 API v2.0 规范，并包含了 pure-Python MySQL 客户端库。</p>
<h1 id="安装PyMySQL模块"><a href="#安装PyMySQL模块" class="headerlink" title="安装PyMySQL模块"></a>安装PyMySQL模块</h1><p><a href="https://www.runoob.com/python3/python3-mysql.html" target="_blank" rel="noopener">菜鸟教程</a></p>
]]></content>
      <categories>
        <category>linux基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>redis主从与哨兵模式搭建</title>
    <url>/2019/10/18/redis%E4%B8%BB%E4%BB%8E%E4%B8%8E%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="主从介绍"><a href="#主从介绍" class="headerlink" title="主从介绍"></a>主从介绍</h1><p>主从：主节点负责写数据，从节点负责读数据，主节点定期把数据同步到从节点保证数据的一致性</p>
<h1 id="哨兵机制介绍"><a href="#哨兵机制介绍" class="headerlink" title="哨兵机制介绍"></a>哨兵机制介绍</h1><p><strong>主要功能如下</strong></p>
<ol>
<li>集群监控：负责监控redis master和slave进程是否正常工作 </li>
<li>消息通知：如果某个redis实例有故障，那么哨兵负责发送消息作为报警通知给管理员 </li>
<li>故障转移：如果master node挂掉了，会自动转移到slave node上 </li>
<li>配置中心：如果故障转移发生了，通知client客户端新的master地址</li>
</ol>
<p><strong>哨兵的核心知识</strong></p>
<ol>
<li>故障转移时，判断一个master node是宕机了，需要大部分的哨兵都同意才行，涉及到了分布式选举的问题</li>
<li>哨兵至少需要3个实例，来保证自己的健壮性</li>
<li>哨兵 + redis主从的部署架构，是不会保证数据零丢失的，只能保证redis集群的高可用性</li>
</ol>
<h1 id="部署主从"><a href="#部署主从" class="headerlink" title="部署主从"></a>部署主从</h1><p><strong>环境说明：</strong></p>
<ol>
<li>master安装：redis主   192.168.40.100:6739</li>
<li>node1安装：redis从    192.168.40.101:6739</li>
<li>node2安装：哨兵1和哨兵2    192.168.40.102:16739与192.168.40.101:26739</li>
<li>安装目录均在 /data 下</li>
</ol>
<p><strong>安装redis主：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://download.redis.io/redis-stable.tar.gz</span><br><span class="line"></span><br><span class="line">tar xf redis-stable.tar.gz -C /data</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /data/redis-stable/</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<p><strong>配置文件</strong></p>
<p><a href="https://hxqxiaoqi.gitee.io/2019/10/19/redis%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/">redis配置文件详解</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">daemonize yes</span><br><span class="line">protected-mode no</span><br><span class="line">port 6379</span><br><span class="line">pidfile <span class="string">"/var/run/redis.pid"</span></span><br><span class="line">logfile <span class="string">"/var/log/redis.log"</span></span><br><span class="line"></span><br><span class="line">dbfilename <span class="string">"dump.rdb"</span></span><br><span class="line">dir <span class="string">"./data"</span></span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br></pre></td></tr></table></figure>

<p><strong>启动</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /data/redis-stable/</span><br><span class="line">./src/redis-server ./redis.conf</span><br></pre></td></tr></table></figure>

<p><strong>安装redis从</strong><br>全部与安装redis主一致，只是配置文件中多一条配置，之后启动从，日志中可以看出已经连接master，并同步数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从服务指定主服务的IP和port</span></span><br><span class="line">slaveof 192.168.40.100 6379</span><br></pre></td></tr></table></figure>

<h1 id="部署哨兵"><a href="#部署哨兵" class="headerlink" title="部署哨兵"></a>部署哨兵</h1><p><strong>安装哨兵1</strong><br>安装redis与上面步骤一致</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /data/redis-stable/</span><br><span class="line">vim sentinel.conf</span><br></pre></td></tr></table></figure>

<p><strong>sentinel.conf配置文件</strong><br><a href="https://hxqxiaoqi.gitee.io/2019/10/19/redis%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/">redis配置文件详解</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置成：protected-mode no；保护模式关闭，如果你不关闭保护模式，启动哨兵的时候，无法正常运行。还有个解决办法就是你设置密码，但是一般都不设置redis的密码。麻烦，我每次连接还得输入密码。</span></span><br><span class="line">protected-mode no</span><br><span class="line">daemonize yes</span><br><span class="line">port 16379</span><br><span class="line">dir <span class="string">"/tmp"</span></span><br><span class="line">logfile <span class="string">"/var/log/redis_sen1.log"</span></span><br><span class="line">sentinel monitor redis01 192.168.40.100 6379 2</span><br><span class="line">sentinel down-after-milliseconds redis01 10000</span><br><span class="line">sentinel failover-timeout redis01 100000</span><br><span class="line">sentinel parallel-syncs redis01 1</span><br><span class="line">sentinel config-epoch redis01 5</span><br></pre></td></tr></table></figure>

<p><strong>启动</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /data/redis-stable/</span><br><span class="line">./src/redis-sentinel ./sentinel.conf</span><br></pre></td></tr></table></figure>

<p><strong>安装哨兵2</strong><br>安装步骤与哨兵1一致，注意区分端口和日志文件位置<br>查看日志，如果有主从服务的相关信息，则哨兵模式部署完成</p>
<h1 id="测试主从与哨兵"><a href="#测试主从与哨兵" class="headerlink" title="测试主从与哨兵"></a>测试主从与哨兵</h1><h2 id="验证主从"><a href="#验证主从" class="headerlink" title="验证主从"></a>验证主从</h2><p>登录主服务器，主从模式，只有主可写入数据，从不可写</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 登录主</span></span><br><span class="line"><span class="built_in">cd</span> /data/redis-stable/</span><br><span class="line">./src/redis-cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看主从状态</span></span><br><span class="line">127.0.0.1:6379&gt; info Replication</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入数据</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> <span class="built_in">test</span> 12312312</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据</span></span><br><span class="line">127.0.0.1:6379&gt; get <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<p>登录从服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看主从状态</span></span><br><span class="line">127.0.0.1:6379&gt; info Replication</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看主写入的数据是否同步到从</span></span><br><span class="line">127.0.0.1:6379&gt; get <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入数据，会提示无法写入，即是从</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> test1 343434</span><br></pre></td></tr></table></figure>

<h2 id="测试哨兵模式"><a href="#测试哨兵模式" class="headerlink" title="测试哨兵模式"></a>测试哨兵模式</h2><p> 1.实时查看哨兵1和哨兵2日志<br> 2.关闭redis主服务，等待10s，哨兵日志提示，主服务下线，从服务切换为主<br> 3.登录原从服务器，查看身份状态，身份改为主<br> 4.测试是否可以写入</p>
<h1 id="数据备份"><a href="#数据备份" class="headerlink" title="数据备份"></a>数据备份</h1><p><strong>备份</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 该命令将在 redis 安装目录中创建dump.rdb文件</span></span><br><span class="line">redis 127.0.0.1:6379&gt; SAVE </span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 redis 备份文件也可以使用命令 BGSAVE，该命令在后台执行。（推荐）</span></span><br><span class="line">redis 127.0.0.1:6379&gt; BGSAVE</span><br></pre></td></tr></table></figure>

<p><strong>恢复</strong></p>
<p>如果需要恢复数据，只需将备份文件 (dump.rdb) 移动到 redis 安装目录并启动服务即可。获取 redis 目录可以使用 CONFIG 命令，如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; CONFIG GET dir</span><br></pre></td></tr></table></figure>

<h1 id="启动警告"><a href="#启动警告" class="headerlink" title="启动警告"></a>启动警告</h1><p>警告一：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is <span class="built_in">set</span> to the lower value of 128.</span><br></pre></td></tr></table></figure>

<p>解决方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"net.core.somaxconn = 1024"</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>

<p>警告二：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">WARNING overcommit_memory is <span class="built_in">set</span> to 0! Background save may fail under low memory condition. To fix this issue add <span class="string">'vm.overcommit_memory = 1'</span> to /etc/sysctl.conf and <span class="keyword">then</span> reboot or run the <span class="built_in">command</span> <span class="string">'sysctl vm.overcommit_memory=1'</span> <span class="keyword">for</span> this to take effect</span><br></pre></td></tr></table></figure>

<p>解决方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"vm.overcommit_memory = 1"</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>

<p>警告三：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">WARNING you have Transparent Huge Pages (THP) support enabled <span class="keyword">in</span> your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the <span class="built_in">command</span> <span class="string">'echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled'</span> as root, and add it to your /etc/rc.local <span class="keyword">in</span> order to retain the setting after a reboot. Redis must be restarted after THP is disabled.</span><br></pre></td></tr></table></figure>

<p>解决方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 临时</span></span><br><span class="line"><span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line"><span class="comment"># 永久</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled"</span> &gt;&gt; /etc/rc.local</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis备份策略详解</title>
    <url>/2020/03/14/redis%E5%A4%87%E4%BB%BD%E7%AD%96%E7%95%A5%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>redis有三种不同的数据持久化机制：</p>
<ol>
<li>rdb</li>
<li>aof</li>
<li>混合持久化</li>
</ol>
<h2 id="rdb-持久化"><a href="#rdb-持久化" class="headerlink" title="rdb 持久化"></a>rdb 持久化</h2><p>RDB 持久化可以在指定的时间间隔内生成数据集的时间点快照（point-in-time snapshot）。</p>
<p><font color="32CD32">RDB 的优点：</font> </p>
<ol>
<li>RDB 是一个非常紧凑的文件，也就是数据保存的非常小，它保存了 Redis 在某个时间点上的数据集。</li>
<li>RDB 可以最大化 Redis 的性能：父进程在保存 RDB 文件时唯一要做的就是 fork 出一个子进程，然后这个子进程就会处理接下来的所有保存工作，父进程无须执行任何磁盘 I/O 操作。</li>
<li>RDB 在恢复大数据集时的速度比 AOF 的恢复速度要快。</li>
</ol>
<p><font color="32CD32">RDB 的缺点：</font></p>
<p>如果你需要尽量避免在服务器故障时丢失数据，那么 RDB 不适合你。 虽然 Redis 允许你设置不同的保存点（save point）来控制保存 RDB 文件的频率， 但是， 因为RDB 文件需要保存整个数据集的状态， 所以它并不是一个轻松的操作。 因此你可能会至少 5 分钟才保存一次 RDB 文件。 在这种情况下， 一旦发生故障停机， 你就可能会丢失好几分钟的数据。每次保存 RDB 的时候，Redis 都要 fork() 出一个子进程，并由子进程来进行实际的持久化工作。 在数据集比较庞大时， fork() 可能会非常耗时，造成服务器在某某毫秒内停止处理客户端； 如果数据集非常巨大，并且 CPU 时间非常紧张的话，那么这种停止时间甚至可能会长达整整一秒。</p>
<h2 id="aof-持久化"><a href="#aof-持久化" class="headerlink" title="aof 持久化"></a>aof 持久化</h2><p>AOF 持久化记录服务器执行的所有写操作命令，并在服务器启动时，通过重新执行这些命令来还原数据集。</p>
<p><font color="32CD32">AOF 的优点：</font></p>
<ol>
<li>使用 AOF 持久化会让 Redis 变得非常耐久（much more durable）：你可以设置不同的 fsync 策略，比如无 fsync ，每秒钟一次 fsync ，或者每次执行写入命令时 fsync 。AOF 的默认策略为每秒钟 fsync 一次，在这种配置下，Redis 仍然可以保持良好的性能，并且就算发生故障停机，也最多只会丢失一秒钟的数据（ fsync 会在后台线程执行，所以主线程可以继续努力地处理命令请求）。</li>
<li>AOF 文件是一个只进行追加操作的日志文件（append only log）， 因此对 AOF 文件的写入不需要进行 seek ， 即使日志因为某些原因而包含了未写入完整的命令（比如写入时磁盘已满，写入中途停机，等等）， redis-check-aof 工具也可以轻易地修复这种问题。</li>
<li>Redis 可以在 AOF 文件体积变得过大时，自动地在后台对 AOF 进行重写： 重写后的新 AOF 文件包含了恢复当前数据集所需的最小命令集合。 整个重写操作是绝对安全的，因为 Redis 在创建新 AOF 文件的过程中，会继续将命令追加到现有的 AOF 文件里面，即使重写过程中发生停机，现有的 AOF 文件也不会丢失。 而一旦新 AOF 文件创建完毕，Redis 就会从旧 AOF 文件切换到新 AOF 文件，并开始对新 AOF 文件进行追加操作。</li>
<li>AOF 文件有序地保存了对数据库执行的所有写入操作， 这些写入操作以 Redis 协议的格式保存， 因此 AOF 文件的内容非常容易被人读懂， 对文件进行分析（parse）也很轻松。 导出（export） AOF 文件也非常简单： 举个例子， 如果你不小心执行了 FLUSHALL 命令， 但只要 AOF 文件未被重写， 那么只要停止服务器， 移除 AOF 文件末尾的 FLUSHALL 命令， 并重启 Redis ， 就可以将数据集恢复到 FLUSHALL 执行之前的状态。</li>
</ol>
<p><font color="32CD32">AOF 的缺点：</font></p>
<p>对于相同的数据集来说，AOF 文件的体积通常要大于 RDB 文件的体积。根据所使用的 fsync 策略，AOF 的速度可能会慢于 RDB 。 在一般情况下， 每秒 fsync 的性能依然非常高， 而关闭 fsync 可以让 AOF 的速度和 RDB 一样快， 即使在高负荷之下也是如此。 不过在处理巨大的写入载入时，RDB 可以提供更有保证的最大延迟时间（latency）。AOF 在过去曾经发生过这样的 bug ： 因为个别命令的原因，导致 AOF 文件在重新载入时，无法将数据集恢复成保存时的原样。 （举个例子，阻塞命令 BRPOPLPUSH 就曾经引起过这样的 bug 。） 测试套件里为这种情况添加了测试： 它们会自动生成随机的、复杂的数据集， 并通过重新载入这些数据来确保一切正常。 虽然这种 bug 在 AOF 文件中并不常见， 但是对比来说， RDB 几乎是不可能出现这种 bug 的。</p>
<p>动态配置</p>
<p>为最新的 dump.rdb 文件创建一个备份。<br>将备份放到一个安全的地方。<br>执行以下两条命令：<br>redis-cli&gt; CONFIG SET appendonly yes<br>redis-cli&gt; CONFIG SET save “”<br>确保命令执行之后，数据库的键的数量没有改变。<br>确保写命令会被正确地追加到 AOF 文件的末尾。<br>步骤 3 执行的第一条命令开启了 AOF 功能： Redis 会阻塞直到初始 AOF 文件创建完成为止， 之后 Redis 会继续处理命令请求， 并开始将写入命令追加到 AOF 文件末尾。<br>步骤 3 执行的第二条命令用于关闭 RDB 功能。 这一步是可选的， 如果你愿意的话， 也可以同时使用 RDB 和 AOF 这两种持久化功能。<br>别忘了在 redis.conf 中打开 AOF 功能！ 否则的话， 服务器重启之后， 之前通过 CONFIG SET 设置的配置就会被遗忘， 程序会按原来的配置来启动服务器。</p>
<p>save</p>
<p>bgsave</p>
<p>bgrewriteaof</p>
<p>aof-use-rdb-preamble yes   </p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis常用命令</title>
    <url>/2019/10/19/redis%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>方便自己查询使用</p>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="登录查询命令"><a href="#登录查询命令" class="headerlink" title="登录查询命令"></a>登录查询命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 登录redis</span></span><br><span class="line">./redis-cli -h 主机IP -a 密码 -p 端口 [可执行命令]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看redis信息</span></span><br><span class="line">info</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看集群身份</span></span><br><span class="line">info Replication</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除当前数据库的所有keys</span></span><br><span class="line">flush db   </span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除所有数据库的所有keys</span></span><br><span class="line">flush all    </span><br><span class="line"></span><br><span class="line"> <span class="comment"># 查看所有keys</span></span><br><span class="line">keys *    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看前缀为"prefix_"的所有keys</span></span><br><span class="line">keys prefix_*     </span><br><span class="line"></span><br><span class="line"><span class="comment"># 确认一个key是否存在</span></span><br><span class="line">exists key      </span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置key和value</span></span><br><span class="line"><span class="built_in">set</span> key value   </span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取key的value</span></span><br><span class="line">get key        </span><br><span class="line"></span><br><span class="line"> <span class="comment"># 删除一个key</span></span><br><span class="line">del key        </span><br><span class="line"></span><br><span class="line"> <span class="comment"># 返回值的类型</span></span><br><span class="line"><span class="built_in">type</span> key       </span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回满足给定pattern的所有key</span></span><br><span class="line">keys pattern    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机返回key空间的一个</span></span><br><span class="line">random key      </span><br><span class="line"></span><br><span class="line"> <span class="comment"># 重命名key</span></span><br><span class="line">key rename oldname newname   </span><br><span class="line"></span><br><span class="line"> <span class="comment"># 返回当前数据库中key的数目</span></span><br><span class="line">db size        </span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择第0~15中的库</span></span><br><span class="line">select index   </span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动当前数据库中的key到dbindex数据库</span></span><br><span class="line">move key dbindex      </span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置key过期时间为120秒</span></span><br><span class="line"><span class="built_in">set</span> key value ex 120</span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量删除键</span></span><br><span class="line">redis-cli -h 192.168.10.71 -p 6379  keys <span class="string">"Mpos:base:user:info:key:*"</span> | xargs redis-cli -h 192.168.10.71 -p 6379 del</span><br></pre></td></tr></table></figure>

<h2 id="持久化存储命令"><a href="#持久化存储命令" class="headerlink" title="持久化存储命令"></a>持久化存储命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># SAVE命令会占用当前的redis服务进程进行重写</span></span><br><span class="line">127.0.0.1:6379&gt; SAVE</span><br><span class="line"></span><br><span class="line"><span class="comment"># BGSAVE命令会以redis服务进程启动一个名为redis-rdb-bgsave的子进程,因此temp-PID.rdb中的PID即是该子进程redis-rdb-bgsave的PID,因此不会阻塞redis服务进程，redis正常对外服务</span></span><br><span class="line">127.0.0.1:6379&gt; BGSAVE</span><br><span class="line"></span><br><span class="line"><span class="comment"># 该命令会以redis服务进程打开一个名为redis-aof-rewrite的子程序</span></span><br><span class="line">127.0.0.1:6379&gt; BGREWRITEAOF</span><br></pre></td></tr></table></figure>

<h2 id="客户端连接命令"><a href="#客户端连接命令" class="headerlink" title="客户端连接命令"></a>客户端连接命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前连接到redis的会话：</span></span><br><span class="line">redis-cli -h 192.168.77.100 -p 7000 client list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用awk格式化输出，生成简易报表：</span></span><br><span class="line">redis-cli  client list|sed <span class="string">'s/\r//'</span>|awk -F<span class="string">' |:'</span> <span class="string">'&#123;print $1,$2,$5,$6,$9,$19&#125;'</span>|column -t</span><br></pre></td></tr></table></figure>

<h2 id="参数命令"><a href="#参数命令" class="headerlink" title="参数命令"></a>参数命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 批量删除key</span></span><br><span class="line">cat token.txt |awk <span class="string">'&#123;print "redis-cli del""\t"$1 &#125;'</span>| sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取所有的参数</span></span><br><span class="line">redis-cli -h 192.168.77.100 -p 7000 CONFIG GET <span class="string">"*"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取最大内存参数</span></span><br><span class="line">redis-cli -h 192.168.77.100 -p 7000 CONFIG GET maxmemory</span><br><span class="line"><span class="comment"># 返回值 6871947673</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置参数，当前生效，无需重启</span></span><br><span class="line">redis-cli -h 192.168.77.100 -p 7000 CONFIG SET maxmemory 7000000000</span><br><span class="line">redis-cli -h 192.168.77.100 -p 7000 CONFIG GET maxmemory</span><br><span class="line"><span class="comment"># 返回值 7000000000</span></span><br><span class="line"></span><br><span class="line">cat redis_7000.conf |grep ^maxmemory</span><br><span class="line"><span class="comment"># maxmemory 6871947673</span></span><br><span class="line"><span class="comment"># 配置文件并没有被修改，redis重启参数设置回滚</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将当前参数刷入配置文件</span></span><br><span class="line">redis-cli -h 192.168.77.100 -p 7000 CONFIG REWRITE</span><br><span class="line">cat redis_7000.conf |grep ^maxmemory</span><br><span class="line"><span class="comment"># maxmemory 7000000000</span></span><br><span class="line"><span class="comment"># 配置文件更新，参数永久设置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置 INFO 命令中的某些统计数据</span></span><br><span class="line"><span class="comment"># 被重置的数据包括：</span></span><br><span class="line"><span class="comment"># Keyspace hits (键空间命中次数)</span></span><br><span class="line"><span class="comment"># Keyspace misses (键空间不命中次数)</span></span><br><span class="line"><span class="comment"># Number of commands processed (执行命令的次数)</span></span><br><span class="line"><span class="comment"># Number of connections received (连接服务器的次数)</span></span><br><span class="line"><span class="comment"># Number of expired keys (过期key的数量)</span></span><br><span class="line"><span class="comment"># Number of rejected connections (被拒绝的连接数量)</span></span><br><span class="line"><span class="comment"># Latest fork(2) time(最后执行 fork(2) 的时间)</span></span><br><span class="line"><span class="comment"># The aof_delayed_fsync counter(aof_delayed_fsync 计数器的值)</span></span><br><span class="line">redis-cli -h 192.168.77.100 -p 7000 CONFIG RESETSTAT</span><br></pre></td></tr></table></figure>

<h2 id="底层命令"><a href="#底层命令" class="headerlink" title="底层命令"></a>底层命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取全部的命令列表</span></span><br><span class="line">redis-cli -h 192.168.77.100 -p 7000 COMMAND</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取这些命令的总数</span></span><br><span class="line">redis-cli -h 192.168.77.100 -p 7000 COMMAND COUNT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取给定命令的所有键</span></span><br><span class="line">redis-cli -h 192.168.77.100 -p 7000 COMMAND GETKEYS SET key value</span><br><span class="line">redis-cli -h 192.168.77.100 -p 7000 COMMAND GETKEYS MSET k1 v1 k2 v2 k3 v3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取Redis相应命令描述的数组</span></span><br><span class="line">redis-cli -h 192.168.77.100 -p 7000 COMMAND INFO del <span class="built_in">set</span></span><br><span class="line"><span class="comment"># 不负责任的猜测：</span></span><br><span class="line"><span class="comment">#   是命令实现的简单描述</span></span><br><span class="line"><span class="comment">#   如set需要先调用write写</span></span><br><span class="line"><span class="comment">#   然后调用denyoom拒绝被oom</span></span><br></pre></td></tr></table></figure>

<h2 id="清楚库命令"><a href="#清楚库命令" class="headerlink" title="清楚库命令"></a>清楚库命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需要将命令流转化成dos格式，然后使用--pipe参数装入到redis实例</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"select 2\nflushdb"</span>|sed <span class="string">'s/$/\r/'</span>|redis-cli -h 192.168.77.100 -p 7000 --pipe</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有数据库的所有key，全部库的key都会被清空</span></span><br><span class="line">redis-cli -h 192.168.77.100 -p 7000 FLUSHALL</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭redis服务</span></span><br><span class="line">redis-cli -h 192.168.77.100 -p 7000 SHUTDOWN</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认使用SAVE命令，阻塞服务请求，生成新的RDB，然后关闭redis服务</span></span><br><span class="line">redis-cli -h 192.168.77.100 -p 7000 SHUTDOWN SAVE</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务崩溃命令</span></span><br><span class="line">redis-cli -h 192.168.77.100 -p 7000 DEBUG SEGFAULT</span><br></pre></td></tr></table></figure>

<h2 id="服务状态命令"><a href="#服务状态命令" class="headerlink" title="服务状态命令"></a>服务状态命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TIME </span><br><span class="line"><span class="comment"># 返回当前服务器时间UNIX时间戳，到'1970-01-01 00:00:00'+时区 的间隔秒和微秒</span></span><br><span class="line"></span><br><span class="line">DBSIZE </span><br><span class="line"><span class="comment"># 返回当前数据库的 key 的数量</span></span><br><span class="line"></span><br><span class="line">LASTSAVE </span><br><span class="line"><span class="comment"># 返回上一次成功保存RDB的时间戳，UNIX时间戳，到'1970-01-01 00:00:00'+时区的间隔秒</span></span><br><span class="line"></span><br><span class="line">DEBUG OBJECT key </span><br><span class="line"><span class="comment"># 获取 key 的调试信息</span></span><br><span class="line"><span class="comment"># Value at:0x7f2167c72528 refcount:1</span></span><br><span class="line"><span class="comment"># encoding:embstr serializedlength:17 lru:13993658 lru_seconds_idle:1424</span></span><br><span class="line"><span class="comment"># 返回的信息包括value内存地址、编码方式、序列化长度、lru空闲秒数 等</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 慢日志相关</span></span><br><span class="line">redis-cli -c -h 192.168.21.101 -p 7000 SLOWLOG LEN</span><br><span class="line"><span class="comment"># 查看当前有多少条慢日志</span></span><br><span class="line">redis-cli -c -h 192.168.21.101 -p 7000 SLOWLOG GET 1</span><br><span class="line"><span class="comment"># 获取最后一条慢日志</span></span><br><span class="line"><span class="comment"># 1) 1) (integer) 95            慢日志的ID</span></span><br><span class="line"><span class="comment">#    2) (integer) 1523857790    慢日志UNIX时间戳</span></span><br><span class="line"><span class="comment">#    3) (integer) 13730         慢日志的耗时/微秒</span></span><br><span class="line"><span class="comment">#    4) 1) "ZADD"               慢日志具体操作内容</span></span><br><span class="line"><span class="comment">#       2) "&#123;OPREATE_RECORD...</span></span><br><span class="line"><span class="comment">#       3) "5.6704707E7"</span></span><br><span class="line"><span class="comment">#       4) "&#123;\"aaCreateTime...</span></span><br><span class="line"><span class="comment">#    5) "192.168.1.117:55165"   会话来源</span></span><br><span class="line">redis-cli -c -h 192.168.21.101 -p 7000 SLOWLOG GET</span><br><span class="line"><span class="comment"># 获取全部慢日志</span></span><br><span class="line">redis-cli -c -h 192.168.21.101 -p 7000 SLOWLOG RESET</span><br><span class="line"><span class="comment"># 清空慢日志</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 监控 MONITOR</span></span><br><span class="line">redis-cli -c -h 192.168.77.100 -p 7000 MONITOR</span><br><span class="line"><span class="comment"># 相当于tailf log，将所有到该redis服务器的会话连接全部监控起来</span></span><br><span class="line"><span class="comment"># 1523933983.091873 [0 192.168.77.100:43468] "dbsize"</span></span><br><span class="line"><span class="comment"># 时间戳 [数据库 IP:PORT] "命令"</span></span><br><span class="line">date -d@1523933983.091873 +%F_%T_%N</span><br><span class="line"><span class="comment"># 2018-04-17_10:59:43_091873000</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>route使用</title>
    <url>/2020/02/28/route%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="linux"><a href="#linux" class="headerlink" title="linux:"></a>linux:</h1><p><font color="32CD32">主机路由</font></p>
<p>主机路由是路由选择表中指向单个IP地址或主机名的路由记录。主机路由的Flags字段为H。例如，在下面的示例中，本地主机通过IP地址192.168.1.1的路由器到达IP地址为10.0.0.10的主机。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加</span></span><br><span class="line">route add -host 192.168.1.2 dev eth0   </span><br><span class="line">route add -host 10.20.30.148 gw 10.20.30.40</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">route del -host 192.168.1.2 dev eth0   </span><br><span class="line">route del -host 10.20.30.148 gw 10.20.30.40</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">网络路由</font></p>
<p>网络路由是代表主机可以到达的网络。网络路由的Flags字段为N。例如，在下面的示例中，本地主机将发送到网络192.19.12的数据包转发到IP地址为192.168.1.1的路由器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加</span></span><br><span class="line">route add -net 100.96.174.0/24 gw 192.168.10.126</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">route del -net 100.96.174.0/24 gw 192.168.10.126</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">默认路由</font></p>
<p>当主机不能在路由表中查找到目标主机的IP地址或网络路由时，数据包就被发送到默认路由（默认网关）上。默认路由的Flags字段为G。例如，在下面的示例中，默认路由是IP地址为192.168.1.1的路由器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加</span></span><br><span class="line">route add default gw 192.168.1.1  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">route del default gw 192.168.1.1</span><br></pre></td></tr></table></figure>

<h1 id="windows"><a href="#windows" class="headerlink" title="windows:"></a>windows:</h1><p><font color="32CD32">网络路由</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加</span></span><br><span class="line">route add 100.117.144.0/24 192.168.10.124</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">route del 100.117.144.0/24 192.168.10.124</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux基础</category>
      </categories>
      <tags>
        <tag>route</tag>
      </tags>
  </entry>
  <entry>
    <title>seata分布式事务</title>
    <url>/2020/07/13/seata%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>角色介绍：</p>
<ul>
<li>XID：一个全局事务的唯一标识，由ip:port:sequence组成</li>
<li>Transaction Coordinator (TC)： 事务协调器，维护全局事务的运行状态，负责协调并驱动全局事务的提交或回滚。</li>
<li>Transaction Manager （TM）： 控制全局事务的边界，负责开启一个全局事务，并最终发起全局提交或全局回滚的决议。</li>
<li>Resource Manager (RM)： 控制分支事务，负责分支注册、状态汇报，并接收事务协调器的指令，驱动分支（本地）事务的提交和回滚。</li>
</ul>
<h2 id="k8s高可用部署"><a href="#k8s高可用部署" class="headerlink" title="k8s高可用部署"></a>k8s高可用部署</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">seata-ha-server</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line">    <span class="string">app.kubernetes.io/name:</span> <span class="string">seata-ha-server</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">ClusterIP</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">    - port:</span> <span class="number">8091</span></span><br><span class="line"><span class="attr">      protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">http</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line">    <span class="string">app.kubernetes.io/name:</span> <span class="string">seata-ha-server</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">seata-ha-server</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line">    <span class="string">app.kubernetes.io/name:</span> <span class="string">seata-ha-server</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line">      <span class="string">app.kubernetes.io/name:</span> <span class="string">seata-ha-server</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line">        <span class="string">app.kubernetes.io/name:</span> <span class="string">seata-ha-server</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">seata-ha-server</span></span><br><span class="line"><span class="attr">          image:</span> <span class="string">docker.io/seataio/seata-server:latest</span></span><br><span class="line"><span class="attr">          imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">          env:</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">SEATA_CONFIG_NAME</span></span><br><span class="line"><span class="attr">              value:</span> <span class="attr">file:/root/seata-config/registry</span></span><br><span class="line"><span class="attr">          ports:</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">http</span></span><br><span class="line"><span class="attr">              containerPort:</span> <span class="number">8091</span></span><br><span class="line"><span class="attr">              protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">          volumeMounts:</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">seata-config</span></span><br><span class="line"><span class="attr">              mountPath:</span> <span class="string">/root/seata-config</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">file-conf</span></span><br><span class="line"><span class="attr">              mountPath:</span> <span class="string">/root/seata-config1</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">seata-config</span></span><br><span class="line"><span class="attr">          configMap:</span></span><br><span class="line"><span class="attr">            name:</span> <span class="string">seata-ha-server-config</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">file-conf</span></span><br><span class="line"><span class="attr">          configMap:</span></span><br><span class="line"><span class="attr">            name:</span> <span class="string">file-config</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">file-config</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="string">file.conf:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    ## transaction log store, only used in seata-server</span></span><br><span class="line"><span class="string">    store &#123;</span></span><br><span class="line"><span class="string">      ## store mode: file、db、redis</span></span><br><span class="line"><span class="string">      mode = "db"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      ## 填写数据库连接信息</span></span><br><span class="line"><span class="string">      db &#123;</span></span><br><span class="line"><span class="string">        ## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp)/HikariDataSource(hikari) etc.</span></span><br><span class="line"><span class="string">        datasource = "druid"</span></span><br><span class="line"><span class="string">        ## mysql/oracle/postgresql/h2/oceanbase etc.</span></span><br><span class="line"><span class="string">        dbType = "mysql"</span></span><br><span class="line"><span class="string">        driverClassName = "com.mysql.jdbc.Driver"</span></span><br><span class="line"><span class="string">        url = "jdbc:mysql://192.168.10.70:3306/seata"</span></span><br><span class="line"><span class="string">        user = "root"</span></span><br><span class="line"><span class="string">        password = "mamahao"</span></span><br><span class="line"><span class="string">        minConn = 5</span></span><br><span class="line"><span class="string">        maxConn = 30</span></span><br><span class="line"><span class="string">        globalTable = "global_table"</span></span><br><span class="line"><span class="string">        branchTable = "branch_table"</span></span><br><span class="line"><span class="string">        lockTable = "lock_table"</span></span><br><span class="line"><span class="string">        queryLimit = 100</span></span><br><span class="line"><span class="string">        maxWait = 5000</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string"></span><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">seata-ha-server-config</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="string">registry.conf:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    registry &#123;</span></span><br><span class="line"><span class="string">      # eureka配置信息</span></span><br><span class="line"><span class="string">      # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa</span></span><br><span class="line"><span class="string">      type = "eureka"</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">      eureka &#123;</span></span><br><span class="line"><span class="string">        serviceUrl = "http://10.107.152.214:9901/eureka"</span></span><br><span class="line"><span class="string">        application = "default"</span></span><br><span class="line"><span class="string">        weight = "1"</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">      </span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    config &#123;</span></span><br><span class="line"><span class="string">      # file、nacos 、apollo、zk、consul、etcd3</span></span><br><span class="line"><span class="string">      type = "file"</span></span><br><span class="line"><span class="string">      </span></span><br><span class="line"><span class="string">      file &#123;</span></span><br><span class="line"><span class="string">        # 指定file.conf的文件位置</span></span><br><span class="line"><span class="string">        name = "file:/root/seata-config1/file.conf"</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>seata</tag>
      </tags>
  </entry>
  <entry>
    <title>registry 私有仓库配置</title>
    <url>/2020/05/19/registry%20%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Registry是一个几种存放image并对外提供上传下载以及一系列API的服务。可以很容易和本地源代码以及远端Git服务的关系相对应。</p>
<h1 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line"><span class="comment"># -e REGISTRY_STORAGE_DELETE_ENABLED=true 开启允许删除</span></span><br><span class="line"><span class="comment"># -v /data/registry:/var/lib/registry 持久化存储目录</span></span><br><span class="line">docker run --name docker-registry -d -p 5000:5000 -e REGISTRY_STORAGE_DELETE_ENABLED=<span class="literal">true</span> -v /data/registry:/var/lib/registry registry</span><br></pre></td></tr></table></figure>

<h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看所有镜像</span></span><br><span class="line">curl -X GET http://&lt;registry_ip&gt;:&lt;registry_port&gt;/v2/_catalog</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出指定镜像的全部标签</span></span><br><span class="line">curl -X GET http://&lt;registry_ip&gt;:&lt;registry_port&gt;/v2/&lt;image_name&gt;/tags/list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传镜像，如果上传失败，需要配置/usr/lib/systemd/system/docker.service中添加私有仓库地址</span></span><br><span class="line"><span class="comment"># 例：</span></span><br><span class="line">ExecStart=/usr/bin/dockerd --insecure-registry=http://192.168.40.102:5000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除镜像，上面容器启动时已经允许删除</span></span><br><span class="line"><span class="comment"># 获取sha</span></span><br><span class="line">sha=`ls /data/registry/docker/registry/v2/repositories/<span class="variable">$image</span>/_manifests/revisions/sha256`</span><br><span class="line"><span class="comment"># 根据sha删除镜像，但空间不会释放</span></span><br><span class="line">curl -XDELETE http://&lt;registryurl&gt;/v2/<span class="variable">$image</span>/manifests/sha256:<span class="variable">$sha</span></span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it registry sh</span><br><span class="line"><span class="comment"># 垃圾回收，释放空间</span></span><br><span class="line">registry garbage-collect /etc/docker/registry/config.yml</span><br><span class="line"><span class="comment"># 推出容器，删除残留目录</span></span><br><span class="line">rm -rf /opt/registry/docker/registry/v2/repositories/<span class="variable">$image</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh端口转发</title>
    <url>/2019/10/27/ssh%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>ssh端口转发作用：</p>
<ol>
<li>转发对应的端口请求到目标服务器的对应端口服务（在本地生成监听端口）</li>
<li>转发对应的端口请求到目标服务器的对应端口服务（在跳板机生成监听端口）</li>
</ol>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p><strong>ssh参数说明：</strong></p>
<ol>
<li>-L    # 本地转发</li>
<li>-R    # 远程转发</li>
<li>-N    # 不打开远程shell，处于等待状态（不加-N则直接登录进去</li>
<li>-f    # 后台启用</li>
</ol>
<p><strong>实验环境：</strong></p>
<ol>
<li>192.168.40.100（发起请求）</li>
<li>192.168.40.101（跳板机）</li>
<li>192.168.40.102（被请求）</li>
</ol>
<h2 id="在本地生成监听端口"><a href="#在本地生成监听端口" class="headerlink" title="在本地生成监听端口"></a>在本地生成监听端口</h2><p>执行该命令，在192.168.40.100上会生成3000端口的监听，访问该端口等于访问192.168.40.102上的22端口服务，使用ssh连接192.168.40.100并指定端口为3000，最终需要输入的是192.168.40.102服务器的密码。</p>
<p>192.168.40.100实际是通过访问192.168.40.102上的22端口服务。</p>
<p>192.168.40.101类似与跳板机作用。</p>
<p>实际环境，192.168.40.101应该是公网IP，并可以被192.168.40.101访问，且能访问192.168.40.102。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在192.168.40.100上执行，并要求输入101的密码</span></span><br><span class="line">ssh -L 192.168.40.100:3000:192.168.40.102:22 -N 192.168.40.101</span><br></pre></td></tr></table></figure>

<h2 id="在跳板机生成监听端口"><a href="#在跳板机生成监听端口" class="headerlink" title="在跳板机生成监听端口"></a>在跳板机生成监听端口</h2><p>执行该命令，在192.168.40.101上会生成3000端口的监听，访问该端口等于访问192.168.40.102上的22端口服务，使用ssh连接192.168.40.100并指定端口为3000，最终需要输入的是192.168.40.102服务器的密码。<br>注：192.168.40.101会以127.0.0.1监听，所以只能登录到该服务器访问。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在192.168.40.100上执行，并要求输入101的密码</span></span><br><span class="line">ssh -R 192.168.40.100:3000:192.168.40.102:22 -N 192.168.40.101</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>脚本</category>
      </categories>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>solr安装</title>
    <url>/2019/08/11/solr7.2.1%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Solr是一个独立的企业级搜索应用服务器，它对外提供类似于Web-service的API接口。用户可以通过http请求，向搜索引擎服务器提交一定格式的XML文件，生成索引；也可以通过Http Get操作提出查找请求，并得到XML格式的返回结果。</p>
<p>Solr是一个高性能，采用Java开发，基于Lucene的全文搜索服务器。同时对其进行了扩展，提供了比Lucene更为丰富的查询语言，同时实现了可配置、可扩展并对查询性能进行了优化，并且提供了一个完善的功能管理界面，是一款非常优秀的全文搜索引擎。</p>
<h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><p>Solr的安装必须先 <a href="https://hxqxiaoqi.gitee.io/2019/06/04/JDK1.8%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85-linux/">安装JDK</a>，这个的安装这里不再赘述，下面将要介绍的是solr的安装流程。</p>
<ol>
<li>下载tomcat和solr，并解压</li>
<li>复制solr文件到tomcat</li>
<li>启动并访问solr</li>
<li>创建核心</li>
<li>下载并配置中文分词</li>
</ol>
<h2 id="下载tomcat和solr，并解压"><a href="#下载tomcat和solr，并解压" class="headerlink" title="下载tomcat和solr，并解压"></a>下载tomcat和solr，并解压</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装目录</span></span><br><span class="line"><span class="built_in">cd</span> /data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget http://mirror.bit.edu.cn/apache/tomcat/tomcat-8/v8.5.45/bin/apache-tomcat-8.5.45.tar.gz</span><br><span class="line">wget http://archive.apache.org/dist/lucene/solr/7.1.0/solr-7.1.0.tgz</span><br><span class="line"></span><br><span class="line">tar xf apache-tomcat-8.5.45.tar.gz</span><br><span class="line">mv  apache-tomcat-8.5.45 tomcat-solr</span><br><span class="line"></span><br><span class="line">tar xf solr-7.1.0.tgz</span><br></pre></td></tr></table></figure>

<h2 id="复制solr文件到tomcat"><a href="#复制solr文件到tomcat" class="headerlink" title="复制solr文件到tomcat"></a>复制solr文件到tomcat</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /data</span><br><span class="line">cp -a solr-7.1.0/server/solr-webapp/webapp tomcat-solr/webapps/solr</span><br><span class="line">cp -a solr-7.1.0/server/lib/ext/* tomcat-solr/webapps/solr/WEB_INF/lib</span><br><span class="line">cp -a solr-7.1.0/server/lib/metrics* tomcat-solr/webapps/solr/WEB_INF/lib</span><br><span class="line">cp -a solr-7.1.0/dist/solr-dataimporthandler* tomcat-solr/webapps/solr/WEB_INF/lib</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> tomcat-solr/webapps/solr/WEB-INF/</span><br><span class="line">mkdir classes</span><br><span class="line"><span class="built_in">cd</span> classes</span><br><span class="line">cp -a solr-7.1.0/server/resources/log4j.properties .</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /data</span><br><span class="line">mkdir solrhome</span><br><span class="line">cp -a solr-7.1.0/server/solr/* solrhome</span><br><span class="line">cp -a solr-7.1.0/dist/ solrhome/</span><br><span class="line">cp -a solr-7.1.0/contrib/ solrhome/</span><br><span class="line"></span><br><span class="line">vim tomcat-solr/webapps/solr/WEB_INF/web.xml</span><br><span class="line">	<span class="comment"># 在web-app节点下添加，然后把security-constraint相关的都注释掉</span></span><br><span class="line">    &lt;env-entry&gt;</span><br><span class="line">       &lt;env-entry-name&gt;solr/home&lt;/env-entry-name&gt;</span><br><span class="line">       &lt;env-entry-value&gt;/data/solrhome&lt;/env-entry-value&gt;</span><br><span class="line">       &lt;env-entry-type&gt;java.lang.String&lt;/env-entry-type&gt;</span><br><span class="line">    &lt;/env-entry&gt;</span><br></pre></td></tr></table></figure>

<h2 id="启动并访问solr"><a href="#启动并访问solr" class="headerlink" title="启动并访问solr"></a>启动并访问solr</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">/data/tomcat-solr/bin/startup.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问</span></span><br><span class="line">Ip:8080/solr/index.html</span><br></pre></td></tr></table></figure>

<h2 id="创建核心"><a href="#创建核心" class="headerlink" title="创建核心"></a>创建核心</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /data/solrhome</span><br><span class="line">mkdir -p testCore/conf</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> testCore/conf</span><br><span class="line">cp -a /data/solr-7.1.0/server/solr/configsets/_default/conf/* .</span><br><span class="line"></span><br><span class="line">vim solrconfig.xml</span><br><span class="line"><span class="comment"># 添加以下配置，并把原来的&lt;lib dir= 也改为当前路径</span></span><br><span class="line">&lt;lib dir=<span class="string">"/data/solrhome/contrib/extraction/lib"</span> regex=<span class="string">".*\.jar"</span> /&gt;</span><br><span class="line">    &lt;lib dir=<span class="string">"/data/solrhome/dist/"</span> regex=<span class="string">"solr-cell-\d.*\.jar"</span> /&gt;</span><br><span class="line">    &lt;lib dir=<span class="string">"/data/solrhome/contrib/clustering/lib/"</span> regex=<span class="string">".*\.jar"</span> /&gt;</span><br><span class="line">    &lt;lib dir=<span class="string">"/data/solrhome/dist/"</span> regex=<span class="string">"solr-clustering-\d.*\.jar"</span> /&gt;</span><br><span class="line">    &lt;lib dir=<span class="string">"/data/solrhome/contrib/langid/lib/"</span> regex=<span class="string">".*\.jar"</span> /&gt;</span><br><span class="line">    &lt;lib dir=<span class="string">"/data/solrhome/dist/"</span> regex=<span class="string">"solr-langid-\d.*\.jar"</span> /&gt;</span><br><span class="line">    &lt;lib dir=<span class="string">"/data/solrhome/contrib/velocity/lib"</span> regex=<span class="string">".*\.jar"</span> /&gt;</span><br><span class="line">&lt;lib dir=<span class="string">"/data/solrhome/dist/"</span> regex=<span class="string">"solr-velocity-\d.*\.jar"</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /data/solrhome/testCore</span><br><span class="line">mkdir data</span><br><span class="line"></span><br><span class="line">vim core.properties</span><br><span class="line"><span class="comment"># 写入以下内容</span></span><br><span class="line">name=testCore</span><br><span class="line">config=conf/solrconfig.xml</span><br><span class="line">schema=conf/managed-schema</span><br><span class="line">dataDir=data</span><br></pre></td></tr></table></figure>

<p>完成以上步骤重启tomcat就可以了</p>
<h2 id="分词器安装"><a href="#分词器安装" class="headerlink" title="分词器安装"></a>分词器安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># github地址</span></span><br><span class="line">https://github.com/magese/ik-analyzer-solr/tree/v7.5.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget https://search.maven.org/remotecontent?filepath=com/github/magese/ik-analyzer/7.5.0/ik-analyzer-7.5.0.jar</span><br><span class="line"></span><br><span class="line">cp -a ik-analyzer-7.5.0.jar tomcat-solr/webapps/solr/WEB-INF/lib</span><br><span class="line"></span><br><span class="line">vim solrhome/testCore/conf/managed-schema</span><br><span class="line"><span class="comment"># 添加以下配置</span></span><br><span class="line">&lt;fieldType name=<span class="string">"text_ik"</span> class=<span class="string">"solr.TextField"</span> positionIncrementGap=<span class="string">"100"</span>&gt;  </span><br><span class="line">         	&lt;analyzer <span class="built_in">type</span>=<span class="string">"index"</span>&gt;    </span><br><span class="line">            		&lt;tokenizer class=<span class="string">"org.wltea.analyzer.lucene.IKTokenizerFactory"</span> useSmart=<span class="string">"true"</span> /&gt;   </span><br><span class="line">         	&lt;/analyzer&gt;    </span><br><span class="line">         	&lt;analyzer <span class="built_in">type</span>=<span class="string">"query"</span>&gt;    </span><br><span class="line">             		&lt;tokenizer class=<span class="string">"org.wltea.analyzer.lucene.IKTokenizerFactory"</span> useSmart=<span class="string">"true"</span> /&gt;   </span><br><span class="line">         	&lt;/analyzer&gt;    </span><br><span class="line">&lt;/fieldType&gt;  </span><br><span class="line"></span><br><span class="line">&lt;field name=<span class="string">"text_ik"</span> <span class="built_in">type</span>=<span class="string">"text_ik"</span> indexed=<span class="string">"true"</span> stored=<span class="string">"true"</span> multiValued=<span class="string">"false"</span> /&gt;</span><br></pre></td></tr></table></figure>

<p>配置完成后，重启tomcat就可以使用分词功能了</p>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>solr</tag>
      </tags>
  </entry>
  <entry>
    <title>svn安装使用</title>
    <url>/2019/11/01/svn%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><strong>Subversion(SVN):</strong> 是一个开源的版本控制系統, 也就是说 Subversion 管理着随时间改变的数据。 这些数据放置在一个中央资料档案库(repository) 中。 这个档案库很像一个普通的文件服务器, 不过它会记住每一次文件的变动。 这样你就可以把档案恢复到旧的版本, 或是浏览文件的变动历史。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum -y install subversion</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">svn --version</span><br></pre></td></tr></table></figure>

<p><strong>创建版本库</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 手动新建版本库目录</span></span><br><span class="line">mkdir /data/svn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用svn命令创建版本库</span></span><br><span class="line">svnadmin create /opt/svn/<span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看创建生成的文件，其中conf目录下：authz：给用户或组设置权限，passwd：给用户设置密码，svnserve.conf：svn配置文件。</span></span><br><span class="line"><span class="comment"># 数据主要存在db下，格式为fsfs。</span></span><br><span class="line">ls /opt/svn/<span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<p><strong>配置用户</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span>  /opt/svn/<span class="built_in">test</span>/conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建用户</span></span><br><span class="line">vim passwd</span><br><span class="line">	huang = 123456</span><br><span class="line">	xiao = 123123</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给用户授权，[/]：代表/opt/svn/目录</span></span><br><span class="line">vim authz</span><br><span class="line">	[/]	</span><br><span class="line">	huang = rw</span><br><span class="line">	xiao = r</span><br><span class="line">	</span><br><span class="line"><span class="comment"># 配置版本库，取消以下注释。</span></span><br><span class="line"><span class="comment"># anon-access: 匿名用户权限</span></span><br><span class="line"><span class="comment"># auth-access: 登录用户权限</span></span><br><span class="line"><span class="comment"># password-db：密码文件位置</span></span><br><span class="line"><span class="comment"># authz-db: 指定权限配置文件名</span></span><br><span class="line"><span class="comment"># realm: 指定版本库的认证域，即在登录时提示的认证域名称。若两个版本库的 认证域相同，建议使用相同的用户名口令数据文件。 默认值：一个UUID(Universal Unique IDentifier，全局唯一标示)。</span></span><br><span class="line">vim svnserve.conf</span><br><span class="line">	anon-access = <span class="built_in">read</span></span><br><span class="line">	auth-access = write</span><br><span class="line">	password-db = passwd</span><br><span class="line">	realm = My First Repository</span><br></pre></td></tr></table></figure>

<p><strong>启动</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用命令svnserve启动服务，-d：后台运行，-r：指定版本库目录如果不指定端口，默认为3690</span></span><br><span class="line"><span class="comment"># svnserve -d -r 目录 --listen-port 端口号</span></span><br><span class="line">svnserve -d -r /opt/svn/</span><br></pre></td></tr></table></figure>

<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>下载svn客户端：<a href="https://mirrors.xtom.com.hk/osdn//storage/g/t/to/tortoisesvn/1.13.0/Application/TortoiseSVN-1.13.0.28678-x64-svn-1.13.0.msi" target="_blank" rel="noopener">TortoiseSVN</a></p>
<ol>
<li>下载window版，安装客户端。</li>
<li>随便创建一个目录，右击该目录，可查看到svn选项，即安装完成。</li>
</ol>
<p> <strong>拉去svn版本库test</strong><br> 1.选择创建的目录，右击-选择SVN Checkout<br> 2.在跳出的任务框中输入：svn://10.10.10.10/test 拉取代码</p>
<p><strong>提交代码</strong><br>在已经拉取的目录中，创建一些文件，右击-选择SVN commit，可以输入提交说明和文件</p>
<p><strong>更新代码</strong><br>在已经拉取的目录中，右击-选择SVN UPdate</p>
<h1 id="备份恢复"><a href="#备份恢复" class="headerlink" title="备份恢复"></a>备份恢复</h1><p><strong>备份</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">svnadmin dump /opt/svn/<span class="built_in">test</span> &gt; test.svn.bak</span><br></pre></td></tr></table></figure>

<p><strong>恢复</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># #创建一个新的版本库,用户需要重新配置</span></span><br><span class="line">svnadmin   create /opt/svn/<span class="built_in">test</span>   </span><br><span class="line"></span><br><span class="line"><span class="comment"># 现还原完全备份</span></span><br><span class="line">svnadmin   load    /opt/svn/<span class="built_in">test</span>     &lt;  test.svn.bak</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>svn</tag>
      </tags>
  </entry>
  <entry>
    <title>vsftp搭建</title>
    <url>/2019/09/01/vsftp%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="服务说明"><a href="#服务说明" class="headerlink" title="服务说明"></a>服务说明</h1><p>ftp是一种古老的明文传输协议，因为其明文传输的特性，也出现过很多重大的危机，进而逐渐演变为支持加密传输的VSFTP（very security FTP），而CentOS默认自带的FTP就为VSFTP。为了避免干扰，实验前请关闭Selinux和IPtables。</p>
<h1 id="安装前准备："><a href="#安装前准备：" class="headerlink" title="安装前准备："></a>安装前准备：</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#关闭防火墙</span></span><br><span class="line">iptables -L</span><br><span class="line">iptables -F</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment">#永久关闭selinux</span></span><br><span class="line">vim /etc/selinux/config	<span class="comment">#修改disable</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#临时关闭selinux</span></span><br><span class="line">setsebool -P ftpd_disable_trans 1</span><br><span class="line"> setenforce 0</span><br></pre></td></tr></table></figure>

<h1 id="安装步骤："><a href="#安装步骤：" class="headerlink" title="安装步骤："></a>安装步骤：</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装vsftp服务</span></span><br><span class="line">yum -y install vsftpd* pam* db4*</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加虚拟用户，第一行用户，第二行密码，以此类推</span></span><br><span class="line">vim /etc/vsftpd/vsftpd.user	</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成虚拟账户数据表</span></span><br><span class="line">db_load -T -t <span class="built_in">hash</span> -f vsftpd.user vsftpd.db</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建本地用户，并指定家目录</span></span><br><span class="line">useradd -d /var/ftproot -s /sbin/nologin virtual</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改校验文件，用于验证ftp虚拟用户</span></span><br><span class="line"><span class="built_in">cd</span> /etc/pam.d/</span><br><span class="line">cp -a vsftpd vsftpd.pam</span><br><span class="line">vim vsftpd.pam</span><br><span class="line">添加：</span><br><span class="line">auth required pam_userdb.so  db=/etc/vsftpd/vsftpd</span><br><span class="line">account required pam_userdb.so  db=/etc/vsftpd/vsftpd</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改配置文件</span></span><br><span class="line">vim /etc/vsftpd/vsftpd.conf</span><br><span class="line">	修改与添加：</span><br><span class="line">	anonymous_enable=NO</span><br><span class="line">	local_enable=YES</span><br><span class="line">	write_enable=YES</span><br><span class="line">	local_umask=022</span><br><span class="line">	dirmessage_enable=YES</span><br><span class="line">	xferlog_enable=YES</span><br><span class="line">	connect_from_port_20=YES</span><br><span class="line">	xferlog_std_format=YES</span><br><span class="line">	listen=NO</span><br><span class="line">	listen_ipv6=YES</span><br><span class="line">	pam_service_name=vsftpd.pam</span><br><span class="line">	userlist_enable=YES</span><br><span class="line">	tcp_wrappers=YES</span><br><span class="line">	guest_enable=YES</span><br><span class="line">	guest_username=virtual</span><br><span class="line">	user_config_dir=/etc/vsftpd/dir</span><br><span class="line">	allow_writeable_chroot=YES		<span class="comment">#新版必须添加否则取消目录w权限</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#根据配置文件user_config_dir配置，指定虚拟账户配置文件位置，如果没有目录，需要创建</span></span><br><span class="line">mkdir /etc/vsftpd/dir</span><br><span class="line"><span class="built_in">cd</span> /etc/vsftpd/dir</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建虚拟用户配置文件,添加单独虚拟用户权限</span></span><br><span class="line">vim aaa</span><br><span class="line">	<span class="comment">#指定虚拟用户家目录</span></span><br><span class="line">	local_root=/share/aaa	</span><br><span class="line">	<span class="comment">#允许匿名用户浏览，下载文件,默认没有这一项，只有在虚拟用户的配置文件里才有用</span></span><br><span class="line">	anon_world_readable_only=NO</span><br><span class="line">	<span class="comment">#允许匿名用户上传</span></span><br><span class="line">	anon_upload_enable=YES</span><br><span class="line">	<span class="comment">#允许匿名用户上传/建立目录</span></span><br><span class="line">	anon_mkdir_write_enable=YES</span><br><span class="line">	<span class="comment">#默认没有这一项,允许匿名用户具有建立目录，上传之外的权限，如重命名，删除</span></span><br><span class="line">	anon_other_write_enable=YES</span><br><span class="line"></span><br><span class="line"><span class="comment">#本地创建虚拟用户家目录，并赋予权限</span></span><br><span class="line">mkdir -p /share/aaa</span><br><span class="line">chown virtual.virtual /share/ -R</span><br><span class="line">chmod 770 /share/ -R</span><br></pre></td></tr></table></figure>

<h1 id="添加虚拟用方法："><a href="#添加虚拟用方法：" class="headerlink" title="添加虚拟用方法："></a>添加虚拟用方法：</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#添加用户</span></span><br><span class="line">vim vsftpd.user	</span><br><span class="line"></span><br><span class="line"><span class="comment">#重新校验</span></span><br><span class="line">db_load -T -t <span class="built_in">hash</span> -f vsftpd.user vsftpd.db</span><br><span class="line">systemctl restart vsftpd</span><br></pre></td></tr></table></figure>

<h1 id="启动与开机启动"><a href="#启动与开机启动" class="headerlink" title="启动与开机启动"></a>启动与开机启动</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart vsftpd</span><br><span class="line">systemctl <span class="built_in">enable</span> vsftpd</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux基础</category>
      </categories>
      <tags>
        <tag>ftp</tag>
      </tags>
  </entry>
  <entry>
    <title>zookeeper 集群搭建</title>
    <url>/2020/03/26/zookeeper%20%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><strong>Zookeeper原理简介</strong></p>
<p>ZooKeeper是一个开放源码的分布式应用程序协调服务，它包含一个简单的原语集，分布式应用程序可以基于它实现同步服务，配置维护和命名服务等。</p>
<p><strong>Zookeeper设计目的</strong></p>
<ul>
<li>最终一致性：client不论连接到那个Server，展示给它的都是同一个视图。</li>
<li>可靠性：具有简单、健壮、良好的性能、如果消息m被到一台服务器接收，那么消息m将被所有服务器接收。</li>
<li>实时性：Zookeeper保证客户端将在一个时间间隔范围内获得服务器的更新信息，或者服务器失效的信息。但由于网络延时等原因，Zookeeper不能保证两个客户端能同时得到刚更新的数据，如果需要最新数据，应该在读数据之前调用sync()接口。</li>
<li>等待无关（wait-free）：慢的或者失效的client不得干预快速的client的请求，使得每个client都能有效的等待。</li>
<li>原子性：更新只能成功或者失败，没有中间状态。</li>
<li>顺序性：包括全局有序和偏序两种：全局有序是指如果在一台服务器上消息a在消息b前发布，则在所有Server上消息a都将在消息b前被发布；偏序是指如果一个消息b在消息a后被同一个发送者发布，a必将排在b前面。</li>
</ul>
<p><strong>Zookeeper工作原理</strong></p>
<p>在zookeeper的集群中，各个节点共有下面3种角色和4种状态：</p>
<p>角色：leader,follower,observer<br>状态：leading,following,observing,looking</p>
<p>Zookeeper的核心是原子广播，这个机制保证了各个Server之间的同步。实现这个机制的协议叫做Zab协议（ZooKeeper Atomic Broadcast protocol）。Zab协议有两种模式，它们分别是恢复模式（Recovery选主）和广播模式（Broadcast同步）。当服务启动或者在领导者崩溃后，Zab就进入了恢复模式，当领导者被选举出来，且大多数Server完成了和leader的状态同步以后，恢复模式就结束了。状态同步保证了leader和Server具有相同的系统状态。</p>
<p>为了保证事务的顺序一致性，zookeeper采用了递增的事务id号（zxid）来标识事务。所有的提议（proposal）都在被提出的时候加上了zxid。实现中zxid是一个64位的数字，它高32位是epoch用来标识leader关系是否改变，每次一个leader被选出来，它都会有一个新的epoch，标识当前属于那个leader的统治时期。低32位用于递增计数。</p>
<p>每个Server在工作过程中有4种状态：</p>
<p>LOOKING：当前Server不知道leader是谁，正在搜寻。</p>
<p>LEADING：当前Server即为选举出来的leader。</p>
<p>FOLLOWING：leader已经选举出来，当前Server与之同步。</p>
<p>OBSERVING：observer的行为在大多数情况下与follower完全一致，但是他们不参加选举和投票，而仅仅接受(observing)选举和投票的结果。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p><font color="32CD32">配置hosts文件，让集群服务器间互相使用主机名访问</font></p>
<table>
<thead>
<tr>
<th align="center">主机IP</th>
<th align="center">主机名</th>
<th align="center">安装服务</th>
<th align="center">安装目录</th>
</tr>
</thead>
<tbody><tr>
<td align="center">192.168.40.100</td>
<td align="center">zk0</td>
<td align="center">jdk8，zookeeper</td>
<td align="center">/opt</td>
</tr>
<tr>
<td align="center">192.168.40.101</td>
<td align="center">zk1</td>
<td align="center">jdk8，zookeeper</td>
<td align="center">/opt</td>
</tr>
<tr>
<td align="center">192.168.40.102</td>
<td align="center">zk2</td>
<td align="center">jdk8，zookeeper</td>
<td align="center">/opt</td>
</tr>
</tbody></table>
<h2 id="jdk8-安装"><a href="#jdk8-安装" class="headerlink" title="jdk8 安装"></a>jdk8 安装</h2><p>所有节点安装：<a href="https://hxqxiaoqi.gitee.io/2019/06/04/JDK1.8环境安装-linux/">jdk 安装教程</a></p>
<h2 id="zookeeper-安装"><a href="#zookeeper-安装" class="headerlink" title="zookeeper 安装"></a>zookeeper 安装</h2><p><font color="32CD32">在 192.168.40.100上安装</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget https://mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.5.7/apache-zookeeper-3.5.7.tar.gz</span><br><span class="line"></span><br><span class="line">tar xf apache-zookeeper-3.5.7.tar.gz -c /opt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名配置文件，zoo_sample.cfg为配置文件模板，默认不生效</span></span><br><span class="line"><span class="built_in">cd</span> /opt/apache-zookeeper-3.5.7/conf</span><br><span class="line">cp zoo_sample.cfg zoo.cfg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建日志和数据目录</span></span><br><span class="line">mkdir -p /opt/apache-zookeeper-3.5.7/&#123;logs,data&#125;</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">修改 zoo.cfg</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tickTime这个时间是作为zookeeper服务器之间或客户端与服务器之间维持心跳的时间间隔,也就是说每个tickTime时间就会发送一个心跳。</span></span><br><span class="line">tickTime=2000</span><br><span class="line"></span><br><span class="line"><span class="comment"># initLimit这个配置项是用来配置zookeeper接受客户端（这里所说的客户端不是用户连接zookeeper服务器的客户端,而是zookeeper服务器集群中连接到leader的follower 服务器）初始化连接时最长能忍受多少个心跳时间间隔数。</span></span><br><span class="line">initLimit=10</span><br><span class="line"></span><br><span class="line"><span class="comment"># syncLimit这个配置项标识leader与follower之间发送消息,请求和应答时间长度,最长不能超过多少个tickTime的时间长度,总的时间长度就是5*2000=10秒。</span></span><br><span class="line">syncLimit=5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志存储目录</span></span><br><span class="line">dataLogDir=/opt/apache-zookeeper-3.5.7/logs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据存储目录</span></span><br><span class="line">dataDir=/opt/apache-zookeeper-3.5.7/data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 端口</span></span><br><span class="line">clientPort=2181</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个参数指定了需要保留的文件数目。默认是保留3个。</span></span><br><span class="line">autopurge.snapRetainCount=500</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.4.0及之后版本，ZK提供了自动清理事务日志和快照文件的功能，这个参数指定了清理频率，单位是小时，需要配置一个1或更大的整数，默认是0，表示不开启自动清理功能。</span></span><br><span class="line">autopurge.purgeInterval=24</span><br><span class="line"></span><br><span class="line"><span class="comment"># server.A=B:C:D中的A是一个数字,表示这个是第几号服务器,B是这个服务器的IP地址，C第一个端口用来集群成员的信息交换,表示这个服务器与集群中的leader服务器交换信息的端口，D是在leader挂掉时专门用来进行选举leader所用的端口。</span></span><br><span class="line">server.1=192.168.40.100:2888:3888</span><br><span class="line">server.2=192.168.40.101:2888:3888</span><br><span class="line">server.3=192.168.40.102:2888:3888</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">创建集群标识文件</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这里的"1"，就是zoo.cfg文件中server.1的"1"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"1"</span> &gt; /opt/apache-zookeeper-3.5.7/data/myid</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">把zookeeper目录传到其它节点</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp -r /opt/apache-zookeeper-3.5.7 root@192.168.40.101:/opt</span><br><span class="line">scp -r /opt/apache-zookeeper-3.5.7 root@192.168.40.102:/opt</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">在其它节点上操作</font></p>
<ol>
<li>创建数据目录和日志目录，与192.168.40.100上操作一样</li>
<li>创建集群标识文件，与配置文件中对应</li>
</ol>
<p><font color="32CD32">启动</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/opt/apache-zookeeper-3.5.7/bin/zkServer.sh start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">/opt/apache-zookeeper-3.5.7/bin/zkServer.sh status</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">登录</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 登录后，可以使用help查看操作命令</span></span><br><span class="line">/opt/apache-zookeeper-3.5.7/bin/zkCli.sh</span><br></pre></td></tr></table></figure>

<h2 id="zkui-安装"><a href="#zkui-安装" class="headerlink" title="zkui 安装"></a>zkui 安装</h2><p><font color="32CD32">提请安装好 git 和 maven</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/DeemOpen/zkui.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line"><span class="built_in">cd</span> zkui</span><br><span class="line">mvn clean install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件，修改zk地址和登录的账号密码</span></span><br><span class="line">vim config.cfg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">java -jar target/zkui-2.0-SNAPSHOT-jar-with-dependencies.jar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问</span></span><br><span class="line">curl http://192.168.40.100:9090</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>zookeeper安装</title>
    <url>/2019/09/03/zookeeper%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>官方文档上这么解释zookeeper，它是一个分布式服务框架，是Apache Hadoop 的一个子项目，它主要是用来解决分布式应用中经常遇到的一些数据管理问题，如：统一命名服务、状态同步服务、集群管理、分布式应用配置项的管理等。</p>
<h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><ol>
<li>下载，解压</li>
<li>配置文件</li>
<li>配置环境变量</li>
<li>启动</li>
</ol>
<h2 id="下载，解压"><a href="#下载，解压" class="headerlink" title="下载，解压"></a>下载，解压</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget http://mirror.bit.edu.cn/apache/zookeeper/stable/apache-zookeeper-3.5.5-bin.tar.gz</span><br><span class="line"></span><br><span class="line">tar xf apache-zookeeper-3.5.5-bin.tar.gz -C /usr/<span class="built_in">local</span>/</span><br></pre></td></tr></table></figure>

<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/apache-zookeeper-3.5.5-bin/conf/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果只是运行，配置文件默认即可</span></span><br><span class="line">mv zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure>

<h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置环境变量，直接使用启动命令</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'</span></span><br><span class="line"><span class="string"># zookeeper</span></span><br><span class="line"><span class="string">export ZK_HOME=/usr/local/apache-zookeeper-3.5.5-bin</span></span><br><span class="line"><span class="string">export PATH=$ZK_HOME/bin:$PATH</span></span><br><span class="line"><span class="string">'</span> &gt;&gt; /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>

<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zkServer.sh start</span><br><span class="line">zkServer.sh stop</span><br><span class="line">zkServer.sh status</span><br></pre></td></tr></table></figure>

<h1 id="8080端口占用"><a href="#8080端口占用" class="headerlink" title="8080端口占用"></a>8080端口占用</h1><p>zookeeper最近的版本中有个内嵌的管理控制台是通过jetty启动，也会占用8080 端口。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /data/zookeeper-3.5.5-bin/conf/zoo.cfg</span><br><span class="line">	<span class="comment"># 添加</span></span><br><span class="line">	admin.serverPort=8888</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>一个简单的linux跳板机脚本</title>
    <url>/2019/06/03/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84linux%E8%B7%B3%E6%9D%BF%E6%9C%BA%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h1 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h1><p>前提需要设置ssh免密登录，这个跳板机脚本可以快速的切换登录服务器，通过脚本登录服务器之后，退出服务器，依然会返回跳板机菜单，因为只是个简单的脚本没有安全防护，推荐内网使用，或在跳板机脚本的服务器上设置安全策略。</p>
<h1 id="服务器设置"><a href="#服务器设置" class="headerlink" title="服务器设置"></a>服务器设置</h1><ol>
<li>上传脚本到服务器/home/test/</li>
<li>修改/etc/profile.d/jump.sh，这个文件是连接服务器时执行的脚本，匹配你要登录的用户UID<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">[ <span class="variable">$UID</span> -eq 1000 ] &amp;&amp; /bin/bash /home/<span class="built_in">test</span>/tbj.sh</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="tbj-sh脚本配置"><a href="#tbj-sh脚本配置" class="headerlink" title="tbj.sh脚本配置"></a>tbj.sh脚本配置</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#kill信号，屏蔽的是HUP INT QUIT TSTP几个信号,用于防止退出操作</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">traper</span></span>()&#123;</span><br><span class="line">        <span class="built_in">trap</span> <span class="string">''</span> INT QUIT TSTP TERM HUP</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#主菜单函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">menu</span></span>()&#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"</span></span><br><span class="line"><span class="string">================Host List==============</span></span><br><span class="line"><span class="string">    1)项目1</span></span><br><span class="line"><span class="string">	2)项目2</span></span><br><span class="line"><span class="string">	3)有跳板机脚本服务器</span></span><br><span class="line"><span class="string">	q)退出</span></span><br><span class="line"><span class="string">================Host End===============</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#项目1,二级目录函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Project1</span></span>()&#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"</span></span><br><span class="line"><span class="string">================Host List==============</span></span><br><span class="line"><span class="string">    1)服务1</span></span><br><span class="line"><span class="string">	2)服务2</span></span><br><span class="line"><span class="string">    q)返回上一级</span></span><br><span class="line"><span class="string">================Host End===============</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#项目2,二级目录函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Project2</span></span>()&#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"</span></span><br><span class="line"><span class="string">================Host List==============</span></span><br><span class="line"><span class="string">    1)服务1</span></span><br><span class="line"><span class="string">	2)服务2</span></span><br><span class="line"><span class="string">    q)返回上一级</span></span><br><span class="line"><span class="string">================Host End===============</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#登录服务器连接函数，需要设置ssh免密登录</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">host</span></span>()&#123;</span><br><span class="line">USER=<span class="string">"test"</span></span><br><span class="line">port=22</span><br><span class="line">	<span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">	1)</span><br><span class="line">		Project1</span><br><span class="line">		<span class="built_in">read</span> -p <span class="string">'Pls input your choice:'</span> num1</span><br><span class="line">		<span class="keyword">if</span> [ <span class="variable">$num1</span> == <span class="string">"1"</span> ];<span class="keyword">then</span></span><br><span class="line">			ssh <span class="variable">$USER</span>@172.16.136.2 -p <span class="variable">$port</span></span><br><span class="line">		<span class="keyword">elif</span> [ <span class="variable">$num1</span> == <span class="string">"2"</span> ];<span class="keyword">then</span></span><br><span class="line">			ssh <span class="variable">$USER</span>@172.16.136.3 -p <span class="variable">$port</span></span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">echo</span> <span class="string">"input number"</span></span><br><span class="line">		<span class="keyword">fi</span></span><br><span class="line">	;;</span><br><span class="line">	2)</span><br><span class="line">		Project2</span><br><span class="line">		<span class="built_in">read</span> -p <span class="string">'Pls input your choice:'</span> num2</span><br><span class="line">		<span class="keyword">if</span> [ <span class="variable">$num2</span> == <span class="string">"1"</span> ];<span class="keyword">then</span></span><br><span class="line">			ssh <span class="variable">$USER</span>@172.16.136.4 -p <span class="variable">$port</span></span><br><span class="line">		<span class="keyword">elif</span> [ <span class="variable">$num2</span> == <span class="string">"2"</span> ];<span class="keyword">then</span></span><br><span class="line">			ssh <span class="variable">$USER</span>@172.16.136.5 -p <span class="variable">$port</span></span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">echo</span> <span class="string">"input number"</span></span><br><span class="line">		<span class="keyword">fi</span></span><br><span class="line">	;;</span><br><span class="line">	3)</span><br><span class="line">		<span class="built_in">exit</span></span><br><span class="line">	;;</span><br><span class="line">	q)</span><br><span class="line">		<span class="built_in">export</span>	<span class="variable">$PPID</span></span><br><span class="line">		<span class="built_in">kill</span> -9 <span class="variable">$PPID</span></span><br><span class="line">		<span class="built_in">exit</span></span><br><span class="line">	<span class="keyword">esac</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#主函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">main</span></span>()&#123;</span><br><span class="line">  <span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        traper</span><br><span class="line">        clear</span><br><span class="line">        menu</span><br><span class="line">        <span class="built_in">read</span> -p <span class="string">'Pls input your choice:'</span> num</span><br><span class="line">        host <span class="variable">$num</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#程序主入口</span></span><br><span class="line">main</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>脚本</category>
      </categories>
      <tags>
        <tag>shell脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>局域网DNS搭建与使用</title>
    <url>/2019/08/01/%E5%B1%80%E5%9F%9F%E7%BD%91DNS%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>1984年，加州大学伯克利分校的几个学生完成了Unix名称服务的实现，起名叫Berkeley Internet Name Domain（BIND）。目前，它是互联网上使用最为广泛的DNS服务软件</p>
<h1 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h1><p>（1）客户机首先查看查找本地hosts文件，如果有则返回，否则进行下一步<br>（2）客户机查看本地缓存，是否存在本条目的缓存，如果有则直接返回，不再向外发出请求，否则进行下一步，转发。<br>（3）将请求转发本地DNS服务器。<br>（4）查看域名是否本地解析，是则本地解析返回，否则进行下一步。<br>（5）本地DNS服务器首先在缓存中查找，有则返回，无则进行下一步。<br>（6）向全球13个根域服务器发起DNS请求，根域返回org域的地址列表。<br>（7）使用某一个org域的IP地址，发起DNS请求，org域返回kernel域服务器地址列表。<br>（8）使用某一个kernel域IP地址，发起DNS请求，kernel域返回<a href="http://www.kernel.org" target="_blank" rel="noopener">www.kernel.org</a> 主机的IP地址，本地DNS服务收到后，返回给客户机。</p>
<p>注：<br>    递归查询：压力在服务器端<br>    迭代查询：压力在客户端(直接返回结果到客户机)</p>
<h1 id="搭建DNS"><a href="#搭建DNS" class="headerlink" title="搭建DNS"></a>搭建DNS</h1><p>准备环境：<br>    DNS服务器：192.168.40.100<br>    客户机：192.168.40.101</p>
<p>搭建步骤：</p>
<ol>
<li>安装dns服务bind</li>
<li>修改主配置文件</li>
<li>修改区域配置文件</li>
<li>创建数据配置文件</li>
<li>重启bind服务</li>
<li>修改访问域名的主机dns为DNS服务器ip</li>
<li>测试</li>
</ol>
<h2 id="安装dns服务bind"><a href="#安装dns服务bind" class="headerlink" title="安装dns服务bind"></a>安装dns服务bind</h2><p>dns服务包名为bind，安装后的服务名为named</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install <span class="built_in">bind</span></span><br></pre></td></tr></table></figure>

<h2 id="修改主配置文件"><a href="#修改主配置文件" class="headerlink" title="修改主配置文件"></a>修改主配置文件</h2><p>/etc/named.conf：主配置文件用配置于DNS服务器的访问参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/named.conf</span><br><span class="line"></span><br><span class="line">options &#123;</span><br><span class="line">        <span class="comment">#设置监听的端口和IP</span></span><br><span class="line">		listen-on port 53 &#123; 192.168.40.100; &#125;;</span><br><span class="line">        listen-on-v6 port 53 &#123; ::1; &#125;;</span><br><span class="line">		</span><br><span class="line">        directory       <span class="string">"/var/named"</span>;</span><br><span class="line">        dump-file       <span class="string">"/var/named/data/cache_dump.db"</span>;</span><br><span class="line">        statistics-file <span class="string">"/var/named/data/named_stats.txt"</span>;</span><br><span class="line">        memstatistics-file <span class="string">"/var/named/data/named_mem_stats.txt"</span>;</span><br><span class="line">        recursing-file  <span class="string">"/var/named/data/named.recursing"</span>;</span><br><span class="line">        secroots-file   <span class="string">"/var/named/data/named.secroots"</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">#允许那些IP访问</span></span><br><span class="line">        allow-query     &#123; any; &#125;;</span><br></pre></td></tr></table></figure>

<h2 id="修改区域配置文件"><a href="#修改区域配置文件" class="headerlink" title="修改区域配置文件"></a>修改区域配置文件</h2><p>/etc/named.rfc1912.zones：区域配置文件用于指定域名名称、配置文件名称</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/named.rfc1912.zones</span><br><span class="line"></span><br><span class="line"><span class="comment">#填写域名</span></span><br><span class="line">zone <span class="string">"12366xuetang.com"</span> IN &#123;</span><br><span class="line">        <span class="built_in">type</span> master;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">#填写数据配置文件名</span></span><br><span class="line">        file <span class="string">"12366xuetang.front"</span>;</span><br><span class="line">		</span><br><span class="line">        allow-update &#123; none; &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="创建数据配置文件"><a href="#创建数据配置文件" class="headerlink" title="创建数据配置文件"></a>创建数据配置文件</h2><p>数据配置文件：根据区域配置文件指定的名称创建，并配置域名解析</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#到dns数据目录下</span></span><br><span class="line"><span class="built_in">cd</span> /var/named/</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建数据文件</span></span><br><span class="line">cp -a named.localhost 12366xuetang.front</span><br><span class="line"></span><br><span class="line"><span class="comment">#打开数据配置文件</span></span><br><span class="line">vim 12366xuetang.front</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置举例，域名后面的“.”别忘记</span></span><br><span class="line"><span class="variable">$TTL</span> 1D</span><br><span class="line">@       IN SOA  12366xuetang.com. rname.invalid. (</span><br><span class="line">                                        0       ; serial</span><br><span class="line">                                        1D      ; refresh</span><br><span class="line">                                        1H      ; retry</span><br><span class="line">                                        1W      ; expire</span><br><span class="line">                                        3H )    ; minimum</span><br><span class="line">        NS      js.12366xuetang.com.</span><br><span class="line">js      A       192.168.40.100</span><br><span class="line">zj      A       192.168.40.101</span><br></pre></td></tr></table></figure>

<h2 id="重启bind服务"><a href="#重启bind服务" class="headerlink" title="重启bind服务"></a>重启bind服务</h2><p>如果报错：请仔细查看数据配置文件设置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart named</span><br></pre></td></tr></table></figure>

<h2 id="修改访问域名的主机dns为DNS服务器ip"><a href="#修改访问域名的主机dns为DNS服务器ip" class="headerlink" title="修改访问域名的主机dns为DNS服务器ip"></a>修改访问域名的主机dns为DNS服务器ip</h2><p>注：所有使用域名访问的客户机都需要配置DNS服务器IP</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">NAME=ens33</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=yes</span><br><span class="line">IPADDR=192.168.40.100</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=192.168.40.2</span><br><span class="line">DNS1=192.168.40.100</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装nslookup工具</span></span><br><span class="line">yum -y install <span class="built_in">bind</span>-utils</span><br><span class="line"></span><br><span class="line"><span class="comment">#访问域名</span></span><br><span class="line">nslookup zj.12366xuetang.com</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示Address为数据配置文件解析的ip则成功</span></span><br><span class="line">Server:		192.168.40.100</span><br><span class="line">Address:	192.168.40.100<span class="comment">#53</span></span><br><span class="line"></span><br><span class="line">Name:	zj.12366xuetang.com</span><br><span class="line">Address: 192.168.40.101</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux基础</category>
      </categories>
      <tags>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title>定时查询elk错误日志并报警</title>
    <url>/2019/07/09/%E5%AE%9A%E6%97%B6%E6%9F%A5%E8%AF%A2elk%E9%94%99%E8%AF%AF%E6%97%A5%E5%BF%97%E5%B9%B6%E6%8A%A5%E8%AD%A6/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 安装邮件工具</span></span><br><span class="line"><span class="keyword">if</span> [ ! -e <span class="string">"/tmp/sendEmail-v1.56/sendEmail"</span> ];<span class="keyword">then</span></span><br><span class="line">     <span class="built_in">cd</span> /tmp &amp;&amp; wget http://caspian.dotconf.net/menu/Software/SendEmail/sendEmail-v1.56.tar.gz &amp;&amp; tar xf sendEmail-v1.56.tar.gz &amp;&amp; chmod +x /tmp/sendEmail-v1.56/sendEmail</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取elasticsearch指定索引，指向条件，指定时间的错误</span></span><br><span class="line">data=`curl -s -H <span class="string">"Content-Type:application/json"</span> -XPOST http://172.16.190.240:9200/err-dockerlogs-*/_search -d <span class="string">'&#123;"query": &#123;"bool": &#123;"must": [&#123;"bool": &#123;"should": [&#123;"match_phrase": &#123;"message": "Cause: java.sql.SQLSyntaxErrorException:"&#125;&#125;,&#123;"match_phrase": &#123;"message": "### Error updating database"&#125;&#125;,&#123;"match_phrase": &#123;"message": "### Cause: java.sql"&#125;&#125;,&#123;"match_phrase": &#123;"message": "message:### SQL"&#125;&#125;,&#123;"match_phrase": &#123;"message": "SQLException"&#125;&#125;]&#125;&#125;,&#123;"range": &#123;"@timestamp": &#123;"gte": "now-5m/m","lte": "now/m","format": "epoch_millis"&#125;&#125;&#125;]&#125;&#125;,"from": 0,"size": 5&#125;'</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转为可读json格式</span></span><br><span class="line">jqdata=`<span class="built_in">echo</span> <span class="variable">$data</span>|jq .`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取错误总数</span></span><br><span class="line">num=`<span class="built_in">echo</span> <span class="variable">$data</span>|cut -d <span class="string">":"</span> -f 10|cut -d <span class="string">","</span> -f 1`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送邮件报警</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$num</span>"</span> -gt <span class="string">"0"</span> ];<span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="variable">$num</span></span><br><span class="line">	/tmp/sendEmail-v1.56/sendEmail -o message-charset=<span class="string">"utf-8"</span> -f 111@111.com -t 222@222.com -s smtp.111.com -u <span class="string">"elk-sql-err"</span> -xu 111@111.com -xp 1111.1234 -m <span class="string">"<span class="variable">$jqdata</span>"</span> -o tls=no</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>脚本</category>
      </categories>
      <tags>
        <tag>shell脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>无公网IP，实现云上服务器只允许公司访问</title>
    <url>/2019/06/04/%E6%97%A0%E5%85%AC%E7%BD%91IP%EF%BC%8C%E5%AE%9E%E7%8E%B0%E4%BA%91%E4%B8%8A%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%AA%E5%85%81%E8%AE%B8%E5%85%AC%E5%8F%B8%E8%AE%BF%E9%97%AE/</url>
    <content><![CDATA[<h1 id="实验效果"><a href="#实验效果" class="headerlink" title="实验效果"></a>实验效果</h1><p>随着云服务的普及，现在小公司大都没有购买公网IP，这对于运维人员来说，无法限制ssh远程登录的IP是一个很不爽的事，这篇博客就是为了实现公司无公网IP，也可现在ssh连接IP方法。</p>
<h1 id="实验思路"><a href="#实验思路" class="headerlink" title="实验思路"></a>实验思路</h1><ol>
<li>注册动态域名</li>
<li>把动态域名绑定到公司路由器的DDNS服务上</li>
<li>在服务器上，使用shell脚本定时解析动态域名，获取公司IP，并与服务器白名单匹配</li>
<li>配置定时任务</li>
</ol>
<h2 id="1-注册动态域名"><a href="#1-注册动态域名" class="headerlink" title="1. 注册动态域名"></a>1. 注册动态域名</h2><p>登录花生壳官网：<a href="https://b.oray.com/" target="_blank" rel="noopener">https://b.oray.com/</a> 注册账号，申请动态域名（例：2awfes953.51mypc.cn）<br>这里就不作详细解释。</p>
<h2 id="2-域名绑定路由器"><a href="#2-域名绑定路由器" class="headerlink" title="2. 域名绑定路由器"></a>2. 域名绑定路由器</h2><ol>
<li>登录公司主路由器</li>
<li>选择：虚拟服务–DDNS服务</li>
<li>开启DDNS，选择服务商oray.com，输入花生壳注册的用户名和密码，确认。</li>
</ol>
<h2 id="3-shell脚本配置"><a href="#3-shell脚本配置" class="headerlink" title="3. shell脚本配置"></a>3. shell脚本配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#定时获取公网IP脚本</span></span><br><span class="line"><span class="comment">#如果没有nslookup命令，请安装：yum -y install bind-utils</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取公司公网IP</span></span><br><span class="line">ip1=`nslookup 2awfes953.51mypc.cn|grep Address|awk -F <span class="string">":"</span> <span class="string">'NR==2&#123;print $2&#125;'</span>|cut -d <span class="string">" "</span> -f2`</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取白名单下的ssh允许的IP，如果原先没有，请先设置公司当前公网IP</span></span><br><span class="line">ip2=`grep sshd /etc/hosts.allow|awk -F <span class="string">":"</span> <span class="string">'NR==1&#123;print $2&#125;'</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment">#匹配获取的IP与白名单的IP是否一致，不一致就修改白名单IP为当前获取的公司IP</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$ip1</span> != <span class="variable">$ip2</span> ]:<span class="keyword">then</span></span><br><span class="line">	sed -i <span class="string">"s/sshd:<span class="variable">$ip2</span>:allow/sshd:<span class="variable">$ip1</span>:allow/g"</span> /etc/hosts.allow</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h2 id="4-定时任务设置"><a href="#4-定时任务设置" class="headerlink" title="4. 定时任务设置"></a>4. 定时任务设置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#一小时匹配一次</span></span><br><span class="line">0 */1 * * * /bin/bash /data/ssh-rule.sh &amp;&gt; /dev/null</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>脚本</category>
      </categories>
      <tags>
        <tag>shell脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>简单的日志收集脚本</title>
    <url>/2020/03/27/%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>用于收集服务日志，显示到web浏览器中，使用于单台服务器，只是简单的日志收集脚本。</p>
<p>该脚本是通过cgi-bin显示到web上，所有需要安装httpd服务，httpd服务天生支持cgi。</p>
<h1 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h1><h2 id="httpd-安装"><a href="#httpd-安装" class="headerlink" title="httpd 安装"></a>httpd 安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install httpd</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/httpd/conf/httpd.conf</span><br><span class="line"><span class="comment"># 修改以下内容</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 监听端口</span></span><br><span class="line">Listen 8888</span><br><span class="line"></span><br><span class="line"><span class="comment"># cgi脚本存放路径</span></span><br><span class="line">    ScriptAlias /cgi-bin/ <span class="string">"/var/www/cgi-bin/"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问cgi的权限设置</span></span><br><span class="line">&lt;Directory <span class="string">"/var/www/cgi-bin"</span>&gt;</span><br><span class="line">   AllowOverride None</span><br><span class="line">   Options +ExecCGI</span><br><span class="line">   Order allow,deny</span><br><span class="line">   Allow from all</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重启httpd</span></span><br><span class="line">systemctl restart httpd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加入开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> httpd</span><br></pre></td></tr></table></figure>

<h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><p>把以下脚本保存到<code>httpd</code>指定的<code>cgi</code>目录下，命名为<code>shell</code>，该脚本功能是收集浏览器<code>url</code>参数，在服务器执行，用户权限是<code>apache</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh  </span></span><br><span class="line"><span class="built_in">alias</span> urldecode=<span class="string">'sed "s@+@ @g;s@%@\\\\x@g" | xargs -0 printf "%b"'</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"Content-type: text/plain\n"</span>  </span><br><span class="line">decoded_str=`<span class="built_in">echo</span> <span class="variable">$QUERY_STRING</span> | urldecode`</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"`<span class="variable">$decoded_str</span>` \n"</span></span><br></pre></td></tr></table></figure>

<p>把以下脚本保存到<code>httpd</code>指定的<code>cgi</code>目录下，命名为<code>index.sh</code>，该脚本功能是收服务的指定日志，并展以自定义命名展现在浏览器上。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前服务器地址，其中shell为上面的脚本</span></span><br><span class="line">link=<span class="string">"http://192.168.10.134:8888/cgi-bin/shell?tail%20-500%20"</span></span><br><span class="line">cat &lt;&lt; AAA</span><br><span class="line">Content-Type:text/html;charset=utf-8</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line"><span class="comment"># 定义超链接样式</span></span><br><span class="line">&lt;style <span class="built_in">type</span>=<span class="string">"text/css"</span>&gt;</span><br><span class="line">        a &#123; text-decoration: none;color: black&#125;</span><br><span class="line">        a:hover &#123; text-decoration:underline;color: blue&#125;</span><br><span class="line">　　    a:link &#123; text-decoration: none;color: blue&#125;</span><br><span class="line">　　    a:active &#123; text-decoration:blink; color: blue&#125;</span><br><span class="line">　　    a:visited &#123; text-decoration: none;color: green&#125;</span><br><span class="line">        .url &#123; margin-left: 90px;margin-top: 50px;font-family:<span class="string">"Microsoft YaHei"</span>,微软雅黑,<span class="string">"MicrosoftJhengHei"</span>,华文细黑,STHeiti,MingLiu;letter-spacing:1px;line-height: 28px;font-weight:bold; font-size:18px;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;title&gt;</span><br><span class="line">b2blog</span><br><span class="line">&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;pre&gt;</span><br><span class="line">AAA</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找日志并重名，超链接到日志</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `ls /data/app/*/log.log`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	z=`<span class="built_in">echo</span> <span class="variable">$i</span>|cut -d <span class="string">'/'</span> -f4`</span><br><span class="line">	<span class="built_in">echo</span> <span class="string">'&lt;a href='</span><span class="variable">$link</span><span class="variable">$i</span><span class="string">' style="text-decoration:none;"&gt;&lt;font size=8&gt;'</span><span class="variable">$z</span><span class="string">'&lt;/font&gt;&lt;/a&gt;'</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">cat &lt;&lt; AAA</span><br><span class="line">&lt;pre&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">AAA</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 赋予执行权限</span></span><br><span class="line">chmod +x /var/www/cgi-bin/*</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 浏览器访问</span></span><br><span class="line">curl http://192.168.10.134:8888/cgi-bin/index.sh</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>脚本</category>
      </categories>
      <tags>
        <tag>shell脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>监控大数据集群并钉钉报警</title>
    <url>/2019/07/07/%E7%9B%91%E6%8E%A7%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%9B%86%E7%BE%A4%E5%B9%B6%E9%92%89%E9%92%89%E6%8A%A5%E8%AD%A6/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#个人测试：https://oapi.dingtalk.com/robot/send?access_token=da26636c287511a04ea3e57fdfd860439b2644ae50d0dee18311ab9c1c5a669b</span></span><br><span class="line"><span class="comment">#集群监控脚本</span></span><br><span class="line">webhook=<span class="string">'https://oapi.dingtalk.com/robot/send?access_token=da26636c287511a04ea3e57fdfd860439b2644ae50d0dee18311ab9c1c5a669b'</span></span><br><span class="line">cluster=<span class="string">'hadoop'</span></span><br><span class="line"></span><br><span class="line">progressnameold01=<span class="string">"HMaster</span></span><br><span class="line"><span class="string">ResourceManager</span></span><br><span class="line"><span class="string">Kafka</span></span><br><span class="line"><span class="string">HRegionServer</span></span><br><span class="line"><span class="string">ProdServerStart</span></span><br><span class="line"><span class="string">CanalAdminApplication</span></span><br><span class="line"><span class="string">DataNode</span></span><br><span class="line"><span class="string">StandaloneSessionClusterEntrypoint</span></span><br><span class="line"><span class="string">NameNode</span></span><br><span class="line"><span class="string">JournalNode</span></span><br><span class="line"><span class="string">QuorumPeerMain</span></span><br><span class="line"><span class="string">DFSZKFailoverController</span></span><br><span class="line"><span class="string">CanalLauncher</span></span><br><span class="line"><span class="string">NodeManager"</span></span><br><span class="line">progressnameold02=<span class="string">"CanalLauncher</span></span><br><span class="line"><span class="string">QuorumPeerMain</span></span><br><span class="line"><span class="string">NameNode</span></span><br><span class="line"><span class="string">NodeManager</span></span><br><span class="line"><span class="string">JournalNode</span></span><br><span class="line"><span class="string">DFSZKFailoverController</span></span><br><span class="line"><span class="string">HRegionServer</span></span><br><span class="line"><span class="string">StandaloneSessionClusterEntrypoint</span></span><br><span class="line"><span class="string">DataNode</span></span><br><span class="line"><span class="string">HMaster</span></span><br><span class="line"><span class="string">Kafka"</span></span><br><span class="line">progressnameold03=<span class="string">"QuorumPeerMain</span></span><br><span class="line"><span class="string">HRegionServer</span></span><br><span class="line"><span class="string">Kafka</span></span><br><span class="line"><span class="string">DataNode</span></span><br><span class="line"><span class="string">CanalLauncher</span></span><br><span class="line"><span class="string">NodeManager"</span></span><br><span class="line"></span><br><span class="line">progressname01=`/opt/jdk1.8.0_221/bin/jps|egrep -v <span class="string">"(TaskManagerRunner)|(Jps)"</span>|cut -d <span class="string">" "</span> -f2`</span><br><span class="line">progressname02=`ssh root@hadoop02 <span class="string">"/opt/jdk1.8.0_221/bin/jps|egrep -v '(TaskManagerRunner)|(Jps)'|cut -d ' ' -f2"</span>`</span><br><span class="line">progressname03=`ssh root@hadoop03 <span class="string">"/opt/jdk1.8.0_221/bin/jps|egrep -v '(TaskManagerRunner)|(Jps)'|cut -d ' ' -f2"</span>`</span><br><span class="line"></span><br><span class="line">progressNum01=`/opt/jdk1.8.0_221/bin/jps|egrep -v <span class="string">"(TaskManagerRunner)|(Jps)"</span>|wc -l`</span><br><span class="line">progressNum02=`ssh root@hadoop02 <span class="string">"/opt/jdk1.8.0_221/bin/jps|egrep -v '(TaskManagerRunner)|(Jps)'|wc -l"</span>`</span><br><span class="line">progressNum03=`ssh root@hadoop03 <span class="string">"/opt/jdk1.8.0_221/bin/jps|egrep -v '(TaskManagerRunner)|(Jps)'|wc -l"</span>`</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">SendMsgToDingding</span></span>() &#123;</span><br><span class="line">    curl <span class="variable">$webhook</span> -H <span class="string">'Content-Type: application/json'</span> -d <span class="string">"</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        'msgtype': 'text',</span></span><br><span class="line"><span class="string">        'text': &#123;</span></span><br><span class="line"><span class="string">            'content': '集群名称：<span class="variable">$cluster</span>\n告警信息：<span class="variable">$1</span>节点<span class="variable">$2</span>进程丢失\n'</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        'at': &#123;</span></span><br><span class="line"><span class="string">            'isAtAll': true</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">progressNum</span></span>()&#123;</span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$3</span>"</span> -gt <span class="string">"<span class="variable">$2</span>"</span> ];<span class="keyword">then</span></span><br><span class="line">		<span class="built_in">echo</span> <span class="string">"<span class="variable">$4</span>"</span> &gt; /tmp/file1</span><br><span class="line">		<span class="built_in">echo</span> <span class="string">"<span class="variable">$5</span>"</span> &gt; /tmp/file2</span><br><span class="line">		<span class="comment"># 比较上面指定的进程，差集</span></span><br><span class="line">		node=`sort -m &lt;(sort /tmp/file1 | uniq) &lt;(sort /tmp/file2 | uniq) &lt;(sort /tmp/file2 | uniq) | uniq -u`</span><br><span class="line">		SendMsgToDingding <span class="variable">$1</span> <span class="variable">$node</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">progressNum hadoop01 <span class="variable">$progressNum01</span> 14 <span class="string">"<span class="variable">$progressnameold01</span>"</span> <span class="string">"<span class="variable">$progressname01</span>"</span></span><br><span class="line">progressNum hadoop02 <span class="variable">$progressNum02</span> 11 <span class="string">"<span class="variable">$progressnameold02</span>"</span> <span class="string">"<span class="variable">$progressname02</span>"</span></span><br><span class="line">progressNum hadoop03 <span class="variable">$progressNum03</span> 6 <span class="string">"<span class="variable">$progressnameold03</span>"</span> <span class="string">"<span class="variable">$progressname03</span>"</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>脚本</category>
      </categories>
      <tags>
        <tag>shell脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>监控redis存活脚本</title>
    <url>/2020/01/23/%E7%9B%91%E6%8E%A7redis%E5%AD%98%E6%B4%BB%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>redis监控状态脚本</p>
<h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#redis主从切换报警脚本</span></span><br><span class="line"><span class="comment">#sendEmail命令下载链接：http://caspian.dotconf.net/menu/Software/SendEmail/sendEmail-v1.56.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取redis主从状态值</span></span><br><span class="line">role=`/data/redis32/bin/redis-cli -p 6379 info replication|grep role|cut -d <span class="string">":"</span> -f 2|tr -d -c <span class="string">'a-zA-z'</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取本机IP</span></span><br><span class="line">localIP=`/sbin/ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk <span class="string">'&#123;print $2&#125;'</span>|tr -d <span class="string">"addr:"</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment">#改文件用于判断redis状态</span></span><br><span class="line"><span class="keyword">if</span> [ ! -e <span class="string">"/tmp/redis_err"</span> ];<span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span> 0 &gt; /tmp/redis_err</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">dir=<span class="string">"/tmp/redis_err"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#拥有判断是否执行过邮件发送，如果存在，则不发送邮件，需要手动删除</span></span><br><span class="line">err=`cat /tmp/redis_err`</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$role</span>"</span> == <span class="string">"slave"</span> ];<span class="keyword">then</span></span><br><span class="line">    <span class="keyword">if</span> [ ! <span class="string">"<span class="variable">$err</span>"</span> == 1 ];<span class="keyword">then</span></span><br><span class="line">        /usr/<span class="built_in">local</span>/bin/sendEmail -o message-charset=utf8 -f 123.com -t 123.com  -s smtp.mamahao.com -u <span class="string">'redis主从切换'</span> -xu <span class="string">'123.com'</span> -xp <span class="string">'123.1234'</span> -m <span class="string">"IP：<span class="variable">$localIP</span> date：`date` redis主切换为从"</span></span><br><span class="line">        <span class="built_in">echo</span> 1 &gt; <span class="variable">$dir</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">"<span class="variable">$role</span>"</span> == <span class="string">"master"</span> ];<span class="keyword">then</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$err</span>"</span> == 0 ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> 0 &gt; <span class="variable">$dir</span></span><br><span class="line">    <span class="keyword">elif</span> [ ! <span class="string">"<span class="variable">$err</span>"</span> == 0 ];<span class="keyword">then</span></span><br><span class="line">        /usr/<span class="built_in">local</span>/bin/sendEmail -o message-charset=utf8 -f 123.com -t 123.com  -s smtp.mamahao.com -u <span class="string">'redis主从切换'</span> -xu <span class="string">'123.com'</span> -xp <span class="string">'123.1234'</span> -m <span class="string">"IP：<span class="variable">$localIP</span> date：`date` redis从切换为主"</span></span><br><span class="line">        <span class="built_in">echo</span> 0 &gt; <span class="variable">$dir</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span> [ ! <span class="string">"<span class="variable">$err</span>"</span> == 2 ];<span class="keyword">then</span></span><br><span class="line">        /usr/<span class="built_in">local</span>/bin/sendEmail -o message-charset=utf8 -f 123.com -t 123.com  -s smtp.mamahao.com -u <span class="string">'redis故障'</span> -xu <span class="string">'123.com'</span> -xp <span class="string">'123.1234'</span> -m <span class="string">"IP：<span class="variable">$localIP</span> date：`date` 故障：无法获取主从状态"</span></span><br><span class="line">        <span class="built_in">echo</span> 2 &gt; <span class="variable">$dir</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>脚本</category>
      </categories>
      <tags>
        <tag>shell脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次nginx超时连接错误</title>
    <url>/2019/06/07/%E8%AE%B0%E4%B8%80%E6%AC%A1nginx%E8%B6%85%E6%97%B6%E8%BF%9E%E6%8E%A5%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<h1 id="连接错误代码"><a href="#连接错误代码" class="headerlink" title="连接错误代码"></a>连接错误代码</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2019/06/05 17:15:05 [error] 10560<span class="comment">#0: *7830037 connect() failed (110: Connection timed out) while connecting to </span></span><br><span class="line">upstream, client: 192.168.1.100, server: 123.abc.com, request: <span class="string">"OPTIONS //tax/school/login/resetToken/101 HTTP/1.1"</span>,</span><br><span class="line">upstream: <span class="string">"http://192.168.1.20//aaa/bbb/login/resetToken/101"</span>, host: <span class="string">"123.abc.com"</span>, referrer: <span class="string">"http://abc.qwe.com/"</span></span><br></pre></td></tr></table></figure>

<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>网络上有很多的解决方法，但实际上都是根据自身遇到的问题而找到对应的服务解决，都没有讲为什么这个报错，报错的原因，其实仔细分析nginx报错的代码，也能很好的了解到你的问题所在。<br>分析报错的代码：</p>
<ol>
<li>Connection timed out：按字面上的意思就可以知道，这是连接超时，也就是连接服务时，没有在规定时间内取得回应，才会报错。</li>
<li>connecting to upstream：如果了解nginx负载均衡，那你应该知道upstream是nginx负载均衡的设置，也就是问题出在负载均衡的连接上。</li>
<li>client: 192.168.1.100, server: 123.abc.com：客户端 192.168.1.100 请求服务端 123.abc.com 地址，返回错误。</li>
<li>upstream: “<a href="http://192.168.1.20//aaa/bbb/login/resetToken/101&quot;" target="_blank" rel="noopener">http://192.168.1.20//aaa/bbb/login/resetToken/101&quot;</a> ： 这句话比较重要，负载到<a href="http://192.168.1.20//aaa/bbb/login/resetToken/101" target="_blank" rel="noopener">http://192.168.1.20//aaa/bbb/login/resetToken/101</a> 这个地址是连接出问题。</li>
</ol>
<h1 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h1><p> 显然，上面的报错代码可以看出，问题是出在负载均衡地址的<a href="http://192.168.1.20//aaa/bbb/login/resetToken/101" target="_blank" rel="noopener">http://192.168.1.20//aaa/bbb/login/resetToken/101</a> 上，定位问题后，接下去就比较好解决了。nginx负载无法访问到192.168.1.20服务器上的服务：</p>
<ol>
<li>服务挂了，可以登陆服务器上查看</li>
<li>服务运行错误，可以查看服务的日志</li>
<li>防火墙问题，查看对应的Ip和端口是否开放</li>
<li>网络传输问题，tcpdump抓取数据查看是否有传输数据</li>
</ol>
]]></content>
      <categories>
        <category>linux基础</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>通用备份脚本</title>
    <url>/2020/01/23/%E9%80%9A%E7%94%A8%E5%A4%87%E4%BB%BD%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>日志备份通用脚本</p>
<h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><p>以下脚本添加到定时任务即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/bash</span></span><br><span class="line"><span class="comment"># 通用备份脚本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志目录</span></span><br><span class="line">dir=<span class="string">"/root/.pm2/logs"</span></span><br><span class="line"><span class="comment"># 保存日志的时间</span></span><br><span class="line">Tday=`date --date=<span class="string">"1 days ago"</span> <span class="string">"+%Y_%m_%d"</span>`</span><br><span class="line"><span class="comment"># 删除日志的时间</span></span><br><span class="line">Tday2=`date --date=<span class="string">"7 days ago"</span> <span class="string">"+%Y_%m_%d"</span>`</span><br><span class="line"><span class="built_in">log</span>=`ls <span class="variable">$dir</span>|grep <span class="string">"^.*log$"</span>`</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$dir</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$log</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	cp -a <span class="variable">$i</span> <span class="string">"<span class="variable">$i</span>"</span>_<span class="variable">$Tday</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">""</span> &gt; <span class="variable">$i</span></span><br><span class="line">	rm -rf <span class="string">"<span class="variable">$i</span>"</span>_<span class="variable">$Tday2</span> </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>脚本</category>
      </categories>
      <tags>
        <tag>shell脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次磁盘空间不足问题</title>
    <url>/2020/07/07/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ol>
<li>使用df -ha查看/分区容量占满</li>
<li>但使用du -sh /*却没有占用大的目录</li>
<li>lsof |grep delete也没有占用deleted状态的大容量进程</li>
<li>find / -type f -size +100M -exec ls -lh {} ;查找大文件，也没有找到</li>
<li>find / -name “.*” -exec ls -lh {} ;查找隐藏文件，也没有太大的</li>
<li>重启服务器没有效果，依然显示磁盘空间不足</li>
</ol>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>去谷歌和百度查了大量相关的资料，没有效果，最后仔细区分了下du和df的区别，得到灵感。</p>
<p>df 从文件系统上获得磁盘信息。</p>
<p>du 计算文件数容量总和的到磁盘信息。</p>
<p>du基本确定是实际的磁盘容量占用，既然du显示磁盘比较空余，那肯定是df这边出问题。</p>
<p>df从文件系统获取磁盘信息，大概率文件系统信息错误，查看linux的文件系统，是xfs，查找xfs文件系统异常相关文档。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装xfs检查工具</span></span><br><span class="line">yum -y install xfsdump xfsprogs-devel xfsprogs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检测/分区的碎片，显示的数据是50%左右，</span></span><br><span class="line">xfs_db -c frag -r /dev/sda3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 尝试使用修复整理碎片</span></span><br><span class="line">xfs_fsr /dev/sda3</span><br></pre></td></tr></table></figure>

<p>ps：如果是SSD或者PCIE的SSD盘，一般不需要碎片整理，整理多了反而影响寿命。</p>
]]></content>
      <categories>
        <category>linux基础</category>
      </categories>
      <tags>
        <tag>disk</tag>
      </tags>
  </entry>
  <entry>
    <title>RocketMQ分布式部署</title>
    <url>/2020/01/21/RocketMQ%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>RocketMQ的多Master多Slave的模式在Linux服务器部署案例进行详细的说明。</p>
<h1 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h1><p><strong>主机环境：</strong></p>
<ul>
<li>Nameserver1 + Master1 + Master2-Slave：192.168.40.100</li>
<li>Nameserver2 + Master2 + Master1-Slave：192.168.40.101</li>
</ul>
<p><strong>系统环境：</strong></p>
<ul>
<li>64位JDK 1.8+;</li>
<li>Maven 3.6.x;</li>
<li>git；</li>
</ul>
<p><strong>操作步骤：</strong></p>
<ol>
<li>全部安装jdk</li>
<li>全部安装maven</li>
<li>全部安装RocketMQ，修改配置</li>
<li>安装web管理服务</li>
</ol>
<h2 id="jdk安装"><a href="#jdk安装" class="headerlink" title="jdk安装"></a>jdk安装</h2><p><a href="https://hxqxiaoqi.gitee.io/2019/06/04/JDK1.8环境安装-linux/"><strong>jdk安装跳转</strong></a></p>
<h2 id="maven安装"><a href="#maven安装" class="headerlink" title="maven安装"></a>maven安装</h2><p><a href="https://hxqxiaoqi.gitee.io/2019/09/01/maven-3.6.1安装脚本/"><strong>maven安装跳转</strong></a></p>
<h2 id="RocketMQ分布式安装"><a href="#RocketMQ分布式安装" class="headerlink" title="RocketMQ分布式安装"></a>RocketMQ分布式安装</h2><p><strong>下载</strong></p>
<p><a href="https://hxqxiaoqi.gitee.io/2020/01/21/RocketMQ安装/">RocketMQ安装参考</a> 两台主机按文档安装</p>
<p><strong>创建数据目录</strong></p>
<p>在192.168.40.100操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Master1数据目录</span></span><br><span class="line">mkdir -p /data/rocketmq/data/&#123;commitlog,consumequeue,index&#125;</span><br><span class="line"><span class="comment"># Master2-Slave数据目录</span></span><br><span class="line">mkdir -p /data/rocketmq/datas/&#123;commitlog,consumequeue,index&#125;</span><br></pre></td></tr></table></figure>

<p>在192.168.40.101操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Master2数据目录</span></span><br><span class="line">mkdir -p /data/rocketmq/data/&#123;commitlog,consumequeue,index&#125;</span><br><span class="line"><span class="comment"># Master1-Slave数据目录</span></span><br><span class="line">mkdir -p /data/rocketmq/datas/&#123;commitlog,consumequeue,index&#125;</span><br></pre></td></tr></table></figure>

<p><strong>修改配置文件</strong></p>
<p>在192.168.40.100操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改Master1配置</span></span><br><span class="line">vim /data/rocketmq/conf/2m-2s-async/broker-a.properties</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#所属集群名字</span></span><br><span class="line"><span class="string">brokerClusterName=rocketmq-cluster</span></span><br><span class="line"><span class="comment">#broker名字，注意此处不同的配置文件填写的不一样</span></span><br><span class="line"><span class="string">brokerName=broker-a</span></span><br><span class="line"><span class="comment">#0 表示 Master，&gt;0 表示 Slave</span></span><br><span class="line"><span class="string">brokerId=0</span></span><br><span class="line"><span class="comment">#nameServer地址，分号分割</span></span><br><span class="line"><span class="string">namesrvAddr=192.168.40.100:9876;192.168.40.101:9876</span></span><br><span class="line"><span class="comment">#在发送消息时，自动创建服务器不存在的topic，默认创建的队列数</span></span><br><span class="line"><span class="string">defaultTopicQueueNums=4</span></span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭</span></span><br><span class="line"><span class="string">autoCreateTopicEnable=true</span></span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭</span></span><br><span class="line"><span class="string">autoCreateSubscriptionGroup=true</span></span><br><span class="line"><span class="comment">#Broker 对外服务的监听端口</span></span><br><span class="line"><span class="string">listenPort=10911</span></span><br><span class="line"><span class="string">haListenPort=10912</span></span><br><span class="line"><span class="comment">#删除文件时间点，默认凌晨 4点</span></span><br><span class="line"><span class="string">deleteWhen=04</span></span><br><span class="line"><span class="comment">#文件保留时间，默认 48 小时</span></span><br><span class="line"><span class="string">fileReservedTime=18</span></span><br><span class="line"><span class="comment">#commitLog每个文件的大小默认1G</span></span><br><span class="line"><span class="string">mapedFileSizeCommitLog=1073741824</span></span><br><span class="line"><span class="comment">#ConsumeQueue每个文件默认存30W条，根据业务情况调整</span></span><br><span class="line"><span class="string">mapedFileSizeConsumeQueue=300000</span></span><br><span class="line"><span class="comment">#destroyMapedFileIntervalForcibly=120000</span></span><br><span class="line"><span class="comment">#redeleteHangedFileInterval=120000</span></span><br><span class="line"><span class="comment">#检测物理文件磁盘空间</span></span><br><span class="line"><span class="string">diskMaxUsedSpaceRatio=88</span></span><br><span class="line"><span class="comment">#存储路径</span></span><br><span class="line"><span class="string">storePathRootDir=/mnt/rocketmq-all-4.6.0-bin-release/data</span></span><br><span class="line"><span class="comment">#commitLog 存储路径</span></span><br><span class="line"><span class="string">storePathCommitLog=/mnt/rocketmq-all-4.6.0-bin-release/data/commitlog</span></span><br><span class="line"><span class="comment">#消费队列存储路径存储路径</span></span><br><span class="line"><span class="string">storePathConsumeQueue=/mnt/rocketmq-all-4.6.0-bin-release/data/consumequeue</span></span><br><span class="line"><span class="comment">#消息索引存储路径</span></span><br><span class="line"><span class="string">storePathIndex=/mnt/rocketmq-all-4.6.0-bin-release/data/index</span></span><br><span class="line"><span class="comment">#checkpoint 文件存储路径</span></span><br><span class="line"><span class="string">storeCheckpoint=/mnt/rocketmq-all-4.6.0-bin-release/data/checkpoint</span></span><br><span class="line"><span class="comment">#abort 文件存储路径</span></span><br><span class="line"><span class="string">abortFile=/mnt/rocketmq-all-4.6.0-bin-release/data/abort</span></span><br><span class="line"><span class="comment">#限制的消息大小</span></span><br><span class="line"><span class="string">maxMessageSize=65536</span></span><br><span class="line"><span class="comment">#flushCommitLogLeastPages=4</span></span><br><span class="line"><span class="comment">#flushConsumeQueueLeastPages=2</span></span><br><span class="line"><span class="comment">#flushCommitLogThoroughInterval=10000</span></span><br><span class="line"><span class="comment">#flushConsumeQueueThoroughInterval=60000</span></span><br><span class="line"><span class="comment">#Broker 的角色</span></span><br><span class="line"><span class="comment">#- ASYNC_MASTER 异步复制Master</span></span><br><span class="line"><span class="comment">#- SYNC_MASTER 同步双写Master</span></span><br><span class="line"><span class="comment">#- SLAVE</span></span><br><span class="line"><span class="string">brokerRole=SYNC_MASTER</span></span><br><span class="line"><span class="comment">#刷盘方式</span></span><br><span class="line"><span class="comment">#- ASYNC_FLUSH 异步刷盘</span></span><br><span class="line"><span class="comment">#- SYNC_FLUSH 同步刷盘</span></span><br><span class="line"><span class="string">flushDiskType=ASYNC_FLUSH</span></span><br><span class="line"><span class="comment">#checkTransactionMessageEnable=false</span></span><br><span class="line"><span class="comment">#发消息线程池数量</span></span><br><span class="line"><span class="comment">#sendMessageThreadPoolNums=128</span></span><br><span class="line"><span class="comment">#拉消息线程池数量</span></span><br><span class="line"><span class="comment">#pullMessageThreadPoolNums=128</span></span><br><span class="line"><span class="comment">#强制指定本机IP，需要根据每台机器进行修改。官方介绍可为空，系统默认自动识别，但多网卡时IP地址可能读取错误</span></span><br><span class="line"><span class="string">brokerIP1=192.168.40.100</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改Master2-Slave配置</span></span><br><span class="line">vim /data/rocketmq/conf/2m-2s-async/broker-b-s.properties</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#所属集群名字</span></span><br><span class="line"><span class="string">brokerClusterName=rocketmq-cluster</span></span><br><span class="line"><span class="comment">#broker名字，注意此处不同的配置文件填写的不一样</span></span><br><span class="line"><span class="string">brokerName=broker-b</span></span><br><span class="line"><span class="comment">#0 表示 Master，&gt;0 表示 Slave</span></span><br><span class="line"><span class="string">brokerId=1</span></span><br><span class="line"><span class="comment">#nameServer地址，分号分割</span></span><br><span class="line"><span class="string">namesrvAddr=192.168.40.100:9876;192.168.40.101:9876</span></span><br><span class="line"><span class="comment">#在发送消息时，自动创建服务器不存在的topic，默认创建的队列数</span></span><br><span class="line"><span class="string">defaultTopicQueueNums=4</span></span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭</span></span><br><span class="line"><span class="string">autoCreateTopicEnable=true</span></span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭</span></span><br><span class="line"><span class="string">autoCreateSubscriptionGroup=true</span></span><br><span class="line"><span class="comment">#Broker 对外服务的监听端口</span></span><br><span class="line"><span class="string">listenPort=10923</span></span><br><span class="line"><span class="string">haListenPort=10924</span></span><br><span class="line"><span class="comment">#删除文件时间点，默认凌晨 4点</span></span><br><span class="line"><span class="string">deleteWhen=04</span></span><br><span class="line"><span class="comment">#文件保留时间，默认 48 小时</span></span><br><span class="line"><span class="string">fileReservedTime=18</span></span><br><span class="line"><span class="comment">#commitLog每个文件的大小默认1G</span></span><br><span class="line"><span class="string">mapedFileSizeCommitLog=1073741824</span></span><br><span class="line"><span class="comment">#ConsumeQueue每个文件默认存30W条，根据业务情况调整</span></span><br><span class="line"><span class="string">mapedFileSizeConsumeQueue=300000</span></span><br><span class="line"><span class="comment">#destroyMapedFileIntervalForcibly=120000</span></span><br><span class="line"><span class="comment">#redeleteHangedFileInterval=120000</span></span><br><span class="line"><span class="comment">#检测物理文件磁盘空间</span></span><br><span class="line"><span class="string">diskMaxUsedSpaceRatio=88</span></span><br><span class="line"><span class="comment">#存储路径</span></span><br><span class="line"><span class="string">storePathRootDir=/mnt/rocketmq-all-4.6.0-bin-release/datas</span></span><br><span class="line"><span class="comment">#commitLog 存储路径</span></span><br><span class="line"><span class="string">storePathCommitLog=/mnt/rocketmq-all-4.6.0-bin-release/datas/commitlog</span></span><br><span class="line"><span class="comment">#消费队列存储路径存储路径</span></span><br><span class="line"><span class="string">storePathConsumeQueue=/mnt/rocketmq-all-4.6.0-bin-release/datas/consumequeue</span></span><br><span class="line"><span class="comment">#消息索引存储路径</span></span><br><span class="line"><span class="string">storePathIndex=/mnt/rocketmq-all-4.6.0-bin-release/datas/index</span></span><br><span class="line"><span class="comment">#checkpoint 文件存储路径</span></span><br><span class="line"><span class="string">storeCheckpoint=/mnt/rocketmq-all-4.6.0-bin-release/datas/checkpoint</span></span><br><span class="line"><span class="comment">#abort 文件存储路径</span></span><br><span class="line"><span class="string">abortFile=/mnt/rocketmq-all-4.6.0-bin-release/datas/abort</span></span><br><span class="line"><span class="comment">#限制的消息大小</span></span><br><span class="line"><span class="string">maxMessageSize=65536</span></span><br><span class="line"><span class="comment">#flushCommitLogLeastPages=4</span></span><br><span class="line"><span class="comment">#flushConsumeQueueLeastPages=2</span></span><br><span class="line"><span class="comment">#flushCommitLogThoroughInterval=10000</span></span><br><span class="line"><span class="comment">#flushConsumeQueueThoroughInterval=60000</span></span><br><span class="line"><span class="comment">#Broker 的角色</span></span><br><span class="line"><span class="comment">#- ASYNC_MASTER 异步复制Master</span></span><br><span class="line"><span class="comment">#- SYNC_MASTER 同步双写Master</span></span><br><span class="line"><span class="comment">#- SLAVE</span></span><br><span class="line"><span class="string">brokerRole=SLAVE</span></span><br><span class="line"><span class="comment">#刷盘方式</span></span><br><span class="line"><span class="comment">#- ASYNC_FLUSH 异步刷盘</span></span><br><span class="line"><span class="comment">#- SYNC_FLUSH 同步刷盘</span></span><br><span class="line"><span class="string">flushDiskType=ASYNC_FLUSH</span></span><br><span class="line"><span class="comment">#checkTransactionMessageEnable=false</span></span><br><span class="line"><span class="comment">#发消息线程池数量</span></span><br><span class="line"><span class="comment">#sendMessageThreadPoolNums=128</span></span><br><span class="line"><span class="comment">#拉消息线程池数量</span></span><br><span class="line"><span class="comment">#pullMessageThreadPoolNums=128</span></span><br><span class="line"><span class="comment">#强制指定本机IP，需要根据每台机器进行修改。官方介绍可为空，系统默认自动识别，但多网卡时IP地址可能读取错误</span></span><br><span class="line"><span class="string">brokerIP1=192.168.40.100</span></span><br></pre></td></tr></table></figure>

<p>在192.168.40.101操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改Master2配置</span></span><br><span class="line">vim /data/rocketmq/conf/2m-2s-async/broker-b.properties</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#所属集群名字</span></span><br><span class="line"><span class="string">brokerClusterName=rocketmq-cluster</span></span><br><span class="line"><span class="comment">#broker名字，注意此处不同的配置文件填写的不一样</span></span><br><span class="line"><span class="string">brokerName=broker-b</span></span><br><span class="line"><span class="comment">#0 表示 Master，&gt;0 表示 Slave</span></span><br><span class="line"><span class="string">brokerId=0</span></span><br><span class="line"><span class="comment">#nameServer地址，分号分割</span></span><br><span class="line"><span class="string">namesrvAddr=192.168.40.100:9876;192.168.40.101:9876</span></span><br><span class="line"><span class="comment">#在发送消息时，自动创建服务器不存在的topic，默认创建的队列数</span></span><br><span class="line"><span class="string">defaultTopicQueueNums=4</span></span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭</span></span><br><span class="line"><span class="string">autoCreateTopicEnable=true</span></span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭</span></span><br><span class="line"><span class="string">autoCreateSubscriptionGroup=true</span></span><br><span class="line"><span class="comment">#Broker 对外服务的监听端口</span></span><br><span class="line"><span class="string">listenPort=10911</span></span><br><span class="line"><span class="string">haListenPort=10912</span></span><br><span class="line"><span class="comment">#删除文件时间点，默认凌晨 4点</span></span><br><span class="line"><span class="string">deleteWhen=04</span></span><br><span class="line"><span class="comment">#文件保留时间，默认 48 小时</span></span><br><span class="line"><span class="string">fileReservedTime=18</span></span><br><span class="line"><span class="comment">#commitLog每个文件的大小默认1G</span></span><br><span class="line"><span class="string">mapedFileSizeCommitLog=1073741824</span></span><br><span class="line"><span class="comment">#ConsumeQueue每个文件默认存30W条，根据业务情况调整</span></span><br><span class="line"><span class="string">mapedFileSizeConsumeQueue=300000</span></span><br><span class="line"><span class="comment">#destroyMapedFileIntervalForcibly=120000</span></span><br><span class="line"><span class="comment">#redeleteHangedFileInterval=120000</span></span><br><span class="line"><span class="comment">#检测物理文件磁盘空间</span></span><br><span class="line"><span class="string">diskMaxUsedSpaceRatio=88</span></span><br><span class="line"><span class="comment">#存储路径</span></span><br><span class="line"><span class="string">storePathRootDir=/mnt/rocketmq-all-4.6.0-bin-release/data</span></span><br><span class="line"><span class="comment">#commitLog 存储路径</span></span><br><span class="line"><span class="string">storePathCommitLog=/mnt/rocketmq-all-4.6.0-bin-release/data/commitlog</span></span><br><span class="line"><span class="comment">#消费队列存储路径存储路径</span></span><br><span class="line"><span class="string">storePathConsumeQueue=/mnt/rocketmq-all-4.6.0-bin-release/data/consumequeue</span></span><br><span class="line"><span class="comment">#消息索引存储路径</span></span><br><span class="line"><span class="string">storePathIndex=/mnt/rocketmq-all-4.6.0-bin-release/data/index</span></span><br><span class="line"><span class="comment">#checkpoint 文件存储路径</span></span><br><span class="line"><span class="string">storeCheckpoint=/mnt/rocketmq-all-4.6.0-bin-release/data/checkpoint</span></span><br><span class="line"><span class="comment">#abort 文件存储路径</span></span><br><span class="line"><span class="string">abortFile=/mnt/rocketmq-all-4.6.0-bin-release/data/abort</span></span><br><span class="line"><span class="comment">#限制的消息大小</span></span><br><span class="line"><span class="string">maxMessageSize=65536</span></span><br><span class="line"><span class="comment">#flushCommitLogLeastPages=4</span></span><br><span class="line"><span class="comment">#flushConsumeQueueLeastPages=2</span></span><br><span class="line"><span class="comment">#flushCommitLogThoroughInterval=10000</span></span><br><span class="line"><span class="comment">#flushConsumeQueueThoroughInterval=60000</span></span><br><span class="line"><span class="comment">#Broker 的角色</span></span><br><span class="line"><span class="comment">#- ASYNC_MASTER 异步复制Master</span></span><br><span class="line"><span class="comment">#- SYNC_MASTER 同步双写Master</span></span><br><span class="line"><span class="comment">#- SLAVE</span></span><br><span class="line"><span class="string">brokerRole=ASYNC_MASTER</span></span><br><span class="line"><span class="comment">#刷盘方式</span></span><br><span class="line"><span class="comment">#- ASYNC_FLUSH 异步刷盘</span></span><br><span class="line"><span class="comment">#- SYNC_FLUSH 同步刷盘</span></span><br><span class="line"><span class="string">flushDiskType=ASYNC_FLUSH</span></span><br><span class="line"><span class="comment">#checkTransactionMessageEnable=false</span></span><br><span class="line"><span class="comment">#发消息线程池数量</span></span><br><span class="line"><span class="comment">#sendMessageThreadPoolNums=128</span></span><br><span class="line"><span class="comment">#拉消息线程池数量</span></span><br><span class="line"><span class="comment">#pullMessageThreadPoolNums=128</span></span><br><span class="line"><span class="comment">#强制指定本机IP，需要根据每台机器进行修改。官方介绍可为空，系统默认自动识别，但多网卡时IP地址可能读取错误</span></span><br><span class="line"><span class="string">brokerIP1=192.168.40.101</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改Master1-Slave配置</span></span><br><span class="line">vim /data/rocketmq/conf/2m-2s-async/broker-b.properties</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#所属集群名字</span></span><br><span class="line"><span class="string">brokerClusterName=rocketmq-cluster</span></span><br><span class="line"><span class="comment">#broker名字，注意此处不同的配置文件填写的不一样</span></span><br><span class="line"><span class="string">brokerName=broker-a</span></span><br><span class="line"><span class="comment">#0 表示 Master，&gt;0 表示 Slave</span></span><br><span class="line"><span class="string">brokerId=1</span></span><br><span class="line"><span class="comment">#nameServer地址，分号分割</span></span><br><span class="line"><span class="string">namesrvAddr=192.168.40.100:9876;192.168.40.101:9876</span></span><br><span class="line"><span class="comment">#在发送消息时，自动创建服务器不存在的topic，默认创建的队列数</span></span><br><span class="line"><span class="string">defaultTopicQueueNums=4</span></span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭</span></span><br><span class="line"><span class="string">autoCreateTopicEnable=true</span></span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭</span></span><br><span class="line"><span class="string">autoCreateSubscriptionGroup=true</span></span><br><span class="line"><span class="comment">#Broker 对外服务的监听端口</span></span><br><span class="line"><span class="string">listenPort=10923</span></span><br><span class="line"><span class="string">haListenPort=10924</span></span><br><span class="line"><span class="comment">#删除文件时间点，默认凌晨 4点</span></span><br><span class="line"><span class="string">deleteWhen=04</span></span><br><span class="line"><span class="comment">#文件保留时间，默认 48 小时</span></span><br><span class="line"><span class="string">fileReservedTime=18</span></span><br><span class="line"><span class="comment">#commitLog每个文件的大小默认1G</span></span><br><span class="line"><span class="string">mapedFileSizeCommitLog=1073741824</span></span><br><span class="line"><span class="comment">#ConsumeQueue每个文件默认存30W条，根据业务情况调整</span></span><br><span class="line"><span class="string">mapedFileSizeConsumeQueue=300000</span></span><br><span class="line"><span class="comment">#destroyMapedFileIntervalForcibly=120000</span></span><br><span class="line"><span class="comment">#redeleteHangedFileInterval=120000</span></span><br><span class="line"><span class="comment">#检测物理文件磁盘空间</span></span><br><span class="line"><span class="string">diskMaxUsedSpaceRatio=88</span></span><br><span class="line"><span class="comment">#存储路径</span></span><br><span class="line"><span class="string">storePathRootDir=/mnt/rocketmq-all-4.6.0-bin-release/datas</span></span><br><span class="line"><span class="comment">#commitLog 存储路径</span></span><br><span class="line"><span class="string">storePathCommitLog=/mnt/rocketmq-all-4.6.0-bin-release/datas/commitlog</span></span><br><span class="line"><span class="comment">#消费队列存储路径存储路径</span></span><br><span class="line"><span class="string">storePathConsumeQueue=/mnt/rocketmq-all-4.6.0-bin-release/datas/consumequeue</span></span><br><span class="line"><span class="comment">#消息索引存储路径</span></span><br><span class="line"><span class="string">storePathIndex=/mnt/rocketmq-all-4.6.0-bin-release/datas/index</span></span><br><span class="line"><span class="comment">#checkpoint 文件存储路径</span></span><br><span class="line"><span class="string">storeCheckpoint=/mnt/rocketmq-all-4.6.0-bin-release/datas/checkpoint</span></span><br><span class="line"><span class="comment">#abort 文件存储路径</span></span><br><span class="line"><span class="string">abortFile=/mnt/rocketmq-all-4.6.0-bin-release/datas/abort</span></span><br><span class="line"><span class="comment">#限制的消息大小</span></span><br><span class="line"><span class="string">maxMessageSize=65536</span></span><br><span class="line"><span class="comment">#flushCommitLogLeastPages=4</span></span><br><span class="line"><span class="comment">#flushConsumeQueueLeastPages=2</span></span><br><span class="line"><span class="comment">#flushCommitLogThoroughInterval=10000</span></span><br><span class="line"><span class="comment">#flushConsumeQueueThoroughInterval=60000</span></span><br><span class="line"><span class="comment">#Broker 的角色</span></span><br><span class="line"><span class="comment">#- ASYNC_MASTER 异步复制Master</span></span><br><span class="line"><span class="comment">#- SYNC_MASTER 同步双写Master</span></span><br><span class="line"><span class="comment">#- SLAVE</span></span><br><span class="line"><span class="string">brokerRole=SLAVE</span></span><br><span class="line"><span class="comment">#刷盘方式</span></span><br><span class="line"><span class="comment">#- ASYNC_FLUSH 异步刷盘</span></span><br><span class="line"><span class="comment">#- SYNC_FLUSH 同步刷盘</span></span><br><span class="line"><span class="string">flushDiskType=ASYNC_FLUSH</span></span><br><span class="line"><span class="comment">#checkTransactionMessageEnable=false</span></span><br><span class="line"><span class="comment">#发消息线程池数量</span></span><br><span class="line"><span class="comment">#sendMessageThreadPoolNums=128</span></span><br><span class="line"><span class="comment">#拉消息线程池数量</span></span><br><span class="line"><span class="comment">#pullMessageThreadPoolNums=128</span></span><br><span class="line"><span class="comment">#强制指定本机IP，需要根据每台机器进行修改。官方介绍可为空，系统默认自动识别，但多网卡时IP地址可能读取错误</span></span><br><span class="line"><span class="string">brokerIP1=192.168.40.101</span></span><br></pre></td></tr></table></figure>

<p><strong>启动Nameserver</strong></p>
<p>在192.168.40.100操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /data/rocketmq/</span><br><span class="line">nohup sh bin/mqnamesrv &amp;</span><br></pre></td></tr></table></figure>

<p>在192.168.40.101操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /data/rocketmq/</span><br><span class="line">nohup sh bin/mqnamesrv &amp;</span><br></pre></td></tr></table></figure>

<p><strong>启动Broker</strong></p>
<p>在192.168.40.100操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /data/rocketmq/bin</span><br><span class="line">sh mqbroker -c /data/rocketmq/conf/2m-2s-async/broker-a.properties</span><br><span class="line">sh mqbroker -c /data/rocketmq/conf/2m-2s-async/broker-b-s.properties</span><br></pre></td></tr></table></figure>

<p>在192.168.40.101操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /data/rocketmq/bin</span><br><span class="line">sh mqbroker -c /data/rocketmq/conf/2m-2s-async/broker<span class="_">-a</span>-s.properties</span><br><span class="line">sh mqbroker -c /data/rocketmq/conf/2m-2s-async/broker-b.properties</span><br></pre></td></tr></table></figure>

<h1 id="RocketMQ监控平台部署"><a href="#RocketMQ监控平台部署" class="headerlink" title="RocketMQ监控平台部署"></a>RocketMQ监控平台部署</h1><p><strong>下载</strong></p>
<p>在192.168.40.100操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install git</span><br><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/apache/rocketmq-externals.git</span><br></pre></td></tr></table></figure>

<p><strong>配置</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> rocketmq-externals/rocketmq-console/src/main/resources/</span><br><span class="line">vim application.properties</span><br><span class="line"><span class="comment"># 修改以下内容</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">rocketmq.config.namesrvAddr=192.168.40.100:9876;192.168.40.101:9876</span></span><br></pre></td></tr></table></figure>

<p><strong>编译</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn clean package -Dmaven.test.skip=<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><strong>运行</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/rocketmq-externals-master/rocketmq-console/target</span><br><span class="line">java -jar target/rocketmq-console-ng-1.0.1.jar</span><br></pre></td></tr></table></figure>

<p><strong>访问</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://192.168.40.100:8080/</span><br></pre></td></tr></table></figure>

<p>在监控平台查看：集群选项，即可看到集群信息。</p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>RocketMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>SkyWalking单点安装</title>
    <url>/2020/02/28/SkyWalking%E5%8D%95%E7%82%B9%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>随着微服务架构的流行，一些微服务架构下的问题也会越来越突出，比如一个请求会涉及多个服务，而服务本身可能也会依赖其他服务，整个请求路径就构成了一个网状的调用链，而在整个调用链中一旦某个节点发生异常，整个调用链的稳定性就会受到影响。</p>
<p>面对以上情况， 我们就需要一些可以帮助理解系统行为、用于分析性能问题的工具，以便发生故障的时候，能够快速定位和解决问题。这时候分布式追踪系统就该闪亮登场了。</p>
<p><font color="32CD32">SkyWalking</font>  是针对分布式系统的 APM 系统，也被称为分布式追踪系统</p>
<ul>
<li>全自动探针监控，不需要修改应用程序代码。查看支持的中间件和组件库列表：<a href="https://github.com/apache/incubator-skywalking" target="_blank" rel="noopener">https://github.com/apache/incubator-skywalking</a></li>
<li>支持手动探针监控, 提供了支持 OpenTracing 标准的SDK。覆盖范围扩大到 OpenTracing-Java 支持的组件。查看OpenTracing组件支持列表：<a href="https://github.com/opentracing-contrib/meta" target="_blank" rel="noopener">https://github.com/opentracing-contrib/meta</a></li>
<li>自动监控和手动监控可以同时使用，使用手动监控弥补自动监控不支持的组件，甚至私有化组件。</li>
<li>纯 Java 后端分析程序，提供 RESTful 服务，可为其他语言探针提供分析能力。</li>
<li>高性能纯流式分析</li>
</ul>
<h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><ol>
<li>安装：jdk1.8</li>
<li>安装：elasticsearch-6.x</li>
<li>安装：SkyWalking</li>
</ol>
<h2 id="安装jdk1-8"><a href="#安装jdk1-8" class="headerlink" title="安装jdk1.8"></a>安装jdk1.8</h2><p><a href="https://hxqxiaoqi.gitee.io/2019/06/04/JDK1.8环境安装-linux/">点击：安装jdk1.8</a></p>
<h2 id="安装elasticsearch-6-x"><a href="#安装elasticsearch-6-x" class="headerlink" title="安装elasticsearch-6.x"></a>安装elasticsearch-6.x</h2><p><a href="https://hxqxiaoqi.gitee.io/2019/08/08/elasticsearch-6.6.1安装/">点击：安装elasticsearch-6.x</a></p>
<h2 id="安装SkyWalking"><a href="#安装SkyWalking" class="headerlink" title="安装SkyWalking"></a>安装SkyWalking</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget https://archive.apache.org/dist/skywalking/6.4.0/apache-skywalking-apm-6.4.0.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar xf apache-skywalking-apm-6.4.0.tar.gz -C /opt/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">vim /opt/apache-skywalking-apm-bin/config/application.yml</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取消es配置的注释，使用es作为存储库</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line"><span class="attr">  elasticsearch:</span></span><br><span class="line"><span class="attr">    nameSpace:</span> <span class="string">$&#123;SW_NAMESPACE:"my-application"&#125;</span></span><br><span class="line"><span class="attr">    clusterNodes:</span> <span class="string">$&#123;SW_STORAGE_ES_CLUSTER_NODES:192.168.10.131:9200&#125;</span></span><br><span class="line"><span class="attr">    protocol:</span> <span class="string">$&#123;SW_STORAGE_ES_HTTP_PROTOCOL:"http"&#125;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 注释以下配置，h2为SkyWalking自用的存储库，存储在内存中</span></span><br><span class="line"><span class="comment">#  h2:</span></span><br><span class="line"><span class="comment">#    driver: $&#123;SW_STORAGE_H2_DRIVER:org.h2.jdbcx.JdbcDataSource&#125;</span></span><br><span class="line"><span class="comment">#    url: $&#123;SW_STORAGE_H2_URL:jdbc:h2:mem:skywalking-oap-db&#125;</span></span><br><span class="line"><span class="comment">#    user: $&#123;SW_STORAGE_H2_USER:sa&#125;</span></span><br><span class="line"><span class="comment">#    metadataQueryMaxSize: $&#123;SW_STORAGE_H2_QUERY_MAX_SIZE:5000&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">/opt/apache-skywalking-apm-bin/bin/startup.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问</span></span><br><span class="line">curl http://localhost:8080</span><br></pre></td></tr></table></figure>

<h1 id="客户端连接测试"><a href="#客户端连接测试" class="headerlink" title="客户端连接测试"></a>客户端连接测试</h1><p><font color="32CD32">客户端说明：</font></p>
<ol>
<li>/opt/apache-skywalking-apm-bin/agent/目录是数据收集的服务客户端</li>
<li>要监控哪台服务器上的jar服务，就需要把该目录复制到被监控的服务器上</li>
<li>通过以下方式指定配置启动后，需要再访问被监控的服务，skywalking上才可接收到该请求信息。</li>
</ol>
<p><font color="32CD32">方式一：手动指定配置启动</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -javaagent:/opt/apache-skywalking-apm-bin/agent/skywalking-agent.jar \</span><br><span class="line">-Dskywalking.agent.service_name=eureka \</span><br><span class="line">-Dskywalking.collector.backend_service=localhost:11800 \</span><br><span class="line">-jar eureka-1.0.0-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>

<ul>
<li>-javaagent：指定agent地址</li>
<li>-Dskywalking.agent.service_name：指定要运行的服务名称，可自由定义</li>
<li>-Dskywalking.collector.backend_service：skywalking服务端连接地址</li>
<li>eureka-1.0.0-SNAPSHOT.jar：为测试用的jar包</li>
</ul>
<p><font color="32CD32">方式二：修改配置文件启动</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /opt/apache-skywalking-apm-bin/agent/config/agent.config</span><br><span class="line"><span class="comment"># 修改以下配置</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义服务名</span></span><br><span class="line">agent.service_name=<span class="variable">$&#123;SW_AGENT_NAME:mmhsy-eureka-1.0.0-SNAPSHOT&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改连接skywalking地址</span></span><br><span class="line">collector.backend_service=<span class="variable">$&#123;SW_AGENT_COLLECTOR_BACKEND_SERVICES:localhost:11800&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">java -javaagent:/opt/apache-skywalking-apm-bin/agent/skywalking-agent.jar -jar eureka-1.0.0-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>

<h1 id="配置文件说明"><a href="#配置文件说明" class="headerlink" title="配置文件说明"></a>配置文件说明</h1><h2 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h2><p>OAP(Collector)链路数据归集器，主要用于数据落地，大部分都会选择 Elasticsearch 6，OAP配置文件为 /opt/apache-skywalking-apm-6.2.0/config/application.yml，配置单点的 OAP(Collector)配置如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cluster:</span></span><br><span class="line">   <span class="comment"># 单节点模式</span></span><br><span class="line"><span class="attr">   standalone:</span></span><br><span class="line">   <span class="comment"># zk用于管理collector集群协作.</span></span><br><span class="line">   <span class="comment"># zookeeper:</span></span><br><span class="line">      <span class="comment"># 多个zk连接地址用逗号分隔.</span></span><br><span class="line">      <span class="comment"># hostPort: localhost:2181</span></span><br><span class="line">      <span class="comment"># sessionTimeout: 100000</span></span><br><span class="line">   <span class="comment"># 分布式 kv 存储设施，类似于zk，但没有zk重型（除了etcd，consul、Nacos等都是类似功能）</span></span><br><span class="line">   <span class="comment"># etcd:</span></span><br><span class="line">      <span class="comment"># serviceName: $&#123;SW_SERVICE_NAME:"SkyWalking_OAP_Cluster"&#125;</span></span><br><span class="line">      <span class="comment"># 多个节点用逗号分隔, 如: 10.0.0.1:2379,10.0.0.2:2379,10.0.0.3:2379</span></span><br><span class="line">      <span class="comment"># hostPort: $&#123;SW_CLUSTER_ETCD_HOST_PORT:localhost:2379&#125;</span></span><br><span class="line"><span class="attr">core:</span></span><br><span class="line"><span class="attr">   default:</span></span><br><span class="line">      <span class="comment"># 混合角色：接收代理数据，1级聚合、2级聚合</span></span><br><span class="line">      <span class="comment"># 接收者：接收代理数据，1级聚合点</span></span><br><span class="line">      <span class="comment"># 聚合器：2级聚合点</span></span><br><span class="line">      <span class="attr">role:</span> <span class="string">$&#123;SW_CORE_ROLE:Mixed&#125;</span> <span class="comment"># Mixed/Receiver/Aggregator</span></span><br><span class="line"> </span><br><span class="line">       <span class="comment"># rest 服务地址和端口</span></span><br><span class="line">      <span class="attr">restHost:</span> <span class="string">$&#123;SW_CORE_REST_HOST:localhost&#125;</span></span><br><span class="line">      <span class="attr">restPort:</span> <span class="string">$&#123;SW_CORE_REST_PORT:12800&#125;</span></span><br><span class="line">      <span class="attr">restContextPath:</span> <span class="string">$&#123;SW_CORE_REST_CONTEXT_PATH:/&#125;</span></span><br><span class="line"> </span><br><span class="line">      <span class="comment"># gRPC 服务地址和端口</span></span><br><span class="line">      <span class="attr">gRPCHost:</span> <span class="string">$&#123;SW_CORE_GRPC_HOST:localhost&#125;</span></span><br><span class="line">      <span class="attr">gRPCPort:</span> <span class="string">$&#123;SW_CORE_GRPC_PORT:11800&#125;</span></span><br><span class="line"> </span><br><span class="line">      <span class="attr">downsampling:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Hour</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Day</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Month</span></span><br><span class="line"> </span><br><span class="line">      <span class="comment"># 设置度量数据的超时。超时过期后，度量数据将自动删除.</span></span><br><span class="line">      <span class="comment"># 单位分钟</span></span><br><span class="line">      <span class="attr">recordDataTTL:</span> <span class="string">$&#123;SW_CORE_RECORD_DATA_TTL:90&#125;</span></span><br><span class="line"> </span><br><span class="line">      <span class="comment"># 单位分钟</span></span><br><span class="line">      <span class="attr">minuteMetricsDataTTL:</span> <span class="string">$&#123;SW_CORE_MINUTE_METRIC_DATA_TTL:90&#125;</span></span><br><span class="line"> </span><br><span class="line">      <span class="comment"># 单位小时</span></span><br><span class="line">      <span class="attr">hourMetricsDataTTL:</span> <span class="string">$&#123;SW_CORE_HOUR_METRIC_DATA_TTL:36&#125;</span></span><br><span class="line"> </span><br><span class="line">      <span class="comment"># 单位天</span></span><br><span class="line">      <span class="attr">dayMetricsDataTTL:</span> <span class="string">$&#123;SW_CORE_DAY_METRIC_DATA_TTL:45&#125;</span></span><br><span class="line"> </span><br><span class="line">      <span class="comment"># 单位月</span></span><br><span class="line">      <span class="attr">monthMetricsDataTTL:</span> <span class="string">$&#123;SW_CORE_MONTH_METRIC_DATA_TTL:18&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">   elasticsearch:</span></span><br><span class="line"> </span><br><span class="line">      <span class="comment"># elasticsearch 的集群名称</span></span><br><span class="line">      <span class="attr">nameSpace:</span> <span class="string">$&#123;SW_NAMESPACE:"local-ES"&#125;</span></span><br><span class="line"> </span><br><span class="line">      <span class="comment"># elasticsearch 集群节点的地址及端口</span></span><br><span class="line"><span class="attr">      clusterNodes:</span> <span class="string">$&#123;SW_STORAGE_ES_CLUSTER_NODES:192.168.2.10:9200&#125;</span></span><br><span class="line"> </span><br><span class="line">      <span class="comment"># elasticsearch 的用户名和密码</span></span><br><span class="line"><span class="attr">      user:</span> <span class="string">$&#123;SW_ES_USER:""&#125;</span></span><br><span class="line"><span class="attr">      password:</span> <span class="string">$&#123;SW_ES_PASSWORD:""&#125;</span></span><br><span class="line"> </span><br><span class="line">      <span class="comment"># 设置 elasticsearch 索引分片数量</span></span><br><span class="line"><span class="attr">      indexShardsNumber:</span> <span class="string">$&#123;SW_STORAGE_ES_INDEX_SHARDS_NUMBER:2&#125;</span></span><br><span class="line"> </span><br><span class="line">      <span class="comment"># 设置 elasticsearch 索引副本数</span></span><br><span class="line"><span class="attr">      indexReplicasNumber:</span> <span class="string">$&#123;SW_STORAGE_ES_INDEX_REPLICAS_NUMBER:0&#125;</span></span><br><span class="line"> </span><br><span class="line">      <span class="comment"># 批量处理配置</span></span><br><span class="line">      <span class="comment"># 每2000个请求执行一次批量</span></span><br><span class="line"><span class="attr">      bulkActions:</span> <span class="string">$&#123;SW_STORAGE_ES_BULK_ACTIONS:2000&#125;</span></span><br><span class="line"> </span><br><span class="line">      <span class="comment"># 每 20mb 刷新一次内存块</span></span><br><span class="line"><span class="attr">      bulkSize:</span> <span class="string">$&#123;SW_STORAGE_ES_BULK_SIZE:20&#125;</span></span><br><span class="line"> </span><br><span class="line">      <span class="comment"># 无论请求的数量如何，每10秒刷新一次堆</span></span><br><span class="line"><span class="attr">      flushInterval:</span> <span class="string">$&#123;SW_STORAGE_ES_FLUSH_INTERVAL:10&#125;</span></span><br><span class="line"> </span><br><span class="line">      <span class="comment"># 并发请求的数量</span></span><br><span class="line"><span class="attr">      concurrentRequests:</span> <span class="string">$&#123;SW_STORAGE_ES_CONCURRENT_REQUESTS:2&#125;</span></span><br><span class="line"> </span><br><span class="line">      <span class="comment"># elasticsearch 查询的最大数量</span></span><br><span class="line"><span class="attr">      metadataQueryMaxSize:</span> <span class="string">$&#123;SW_STORAGE_ES_QUERY_MAX_SIZE:5000&#125;</span></span><br><span class="line"> </span><br><span class="line">      <span class="comment"># elasticsearch 查询段最大数量</span></span><br><span class="line"><span class="attr">      segmentQueryMaxSize:</span> <span class="string">$&#123;SW_STORAGE_ES_QUERY_SEGMENT_SIZE:200&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="webapp-yml"><a href="#webapp-yml" class="headerlink" title="webapp.yml"></a>webapp.yml</h2><p> Skywalking 的 WebApp 主要是用来展示落地的数据，因此只需要配置 Web 的端口及获取数据的 OAP(Collector)的IP和端口，webApp 配置文件地址为  /opt/apache-skywalking-apm-6.2.0/webapp/webapp.yml 配置如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9000</span></span><br><span class="line"><span class="attr">collector:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">/graphql</span></span><br><span class="line"><span class="attr">  ribbon:</span></span><br><span class="line"><span class="attr">    ReadTimeout:</span> <span class="number">10000</span></span><br><span class="line">    <span class="comment"># 指向所有后端collector 的 restHost:restPort 配置，多个使用, 分隔</span></span><br><span class="line"><span class="attr">    listOfServers:</span> <span class="attr">localhost:12800</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">security:</span></span><br><span class="line"><span class="attr">  user:</span></span><br><span class="line">    <span class="comment"># username</span></span><br><span class="line"><span class="attr">    admin:</span></span><br><span class="line">    <span class="comment"># password</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">admin</span></span><br></pre></td></tr></table></figure>

<h2 id="agent-config"><a href="#agent-config" class="headerlink" title="agent.config"></a>agent.config</h2><p>Skywalking 的 Agent 主要用于收集和发送数据到 OAP(Collector)，因此需要进行配置 Skywalking OAP(Collector)的地址，Agent 的配置文件地址为  /opt/apache-skywalking-apm-6.2.0/agent/config/agent.config，配置如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置Agent命名空间，它用来隔离追踪和监控数据，当两个应用使用不同的名称空间时，跨进程传播链会中断。</span></span><br><span class="line">agent.namespace=<span class="variable">$&#123;SW_AGENT_NAMESPACE:default-namespace&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 设置服务名称，会在 Skywalking UI 上显示的名称</span></span><br><span class="line">agent.service_name=<span class="variable">$&#123;SW_AGENT_NAME:Your_ApplicationName&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 每 3秒采集的样本跟踪比例，如果是负数则表示 100%采集</span></span><br><span class="line">agent.sample_n_per_3_secs=<span class="variable">$&#123;SW_AGENT_SAMPLE:-1&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 启用 Debug ，如果为 true 则将把所有检测到的类文件保存在"/debug"文件夹中</span></span><br><span class="line"><span class="comment"># agent.is_open_debugging_class = $&#123;SW_AGENT_OPEN_DE<span class="doctag">BUG:</span>true&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 后端的 collector 端口及地址</span></span><br><span class="line">collector.backend_service=<span class="variable">$&#123;SW_AGENT_COLLECTOR_BACKEND_SERVICES:192.168.2.215:11800&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 日志级别</span></span><br><span class="line">logging.level=<span class="variable">$&#123;SW_LOGGING_LEVEL:DEBUG&#125;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>监控</category>
      </categories>
      <tags>
        <tag>SkyWalking</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-compose基本用法</title>
    <url>/2019/09/08/docker-compose%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Compose项目来源于之前的fig项目，使用python语言编写,与docker/swarm配合度很高。</p>
<p>Compose 是 Docker 容器进行编排的工具，定义和运行多容器的应用，可以一条命令启动多个容器，使用Docker Compose不再需要使用shell脚本来启动容器。 </p>
<p>Compose 通过一个配置文件来管理多个Docker容器，在配置文件中，所有的容器通过services来定义，然后使用docker-compose脚本来启动，停止和重启应用，和应用中的服务以及所有依赖服务的容器，非常适合组合使用多个容器进行开发的场景。</p>
<h1 id="docker-compose安装"><a href="#docker-compose安装" class="headerlink" title="docker-compose安装"></a>docker-compose安装</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -L <span class="string">"https://github.com/docker/compose/releases/download/1.24.1/docker-compose-<span class="variable">$(uname -s)</span>-<span class="variable">$(uname -m)</span>"</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"></span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"></span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/bin/docker-compose /usr/bin/docker-compose</span><br><span class="line"></span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure>

<h1 id="mysql模板"><a href="#mysql模板" class="headerlink" title="mysql模板"></a>mysql模板</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">    mysql:</span></span><br><span class="line"><span class="attr">        network_mode:</span> <span class="string">"bridge"</span></span><br><span class="line"><span class="attr">        container_name:</span> <span class="string">"mysql"</span></span><br><span class="line"><span class="attr">        environment:</span></span><br><span class="line"><span class="attr">            MYSQL_ROOT_PASSWORD:</span> <span class="string">"123123"</span></span><br><span class="line"><span class="attr">            MYSQL_USER:</span> <span class="string">'test'</span></span><br><span class="line"><span class="attr">            MYSQL_PASS:</span> <span class="string">'123123'</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">"mysql:5.7"</span> </span><br><span class="line"><span class="attr">        restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">        volumes:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">"./db:/var/lib/mysql"</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">"./conf/my.cnf:/etc/my.cnf"</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">"./init:/docker-entrypoint-initdb.d/"</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">"3306:3306"</span></span><br></pre></td></tr></table></figure>

<ol>
<li>创建db、conf、init三个目录</li>
<li>在conf目录下创建my.cnf配置文件</li>
<li>在init目录下创建init.sql初始化文件</li>
</ol>
<p><font color="90EE90">my.cnf实例</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">user=mysql</span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line">character-set-server=utf8</span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure>

<p><font color="90EE90">init.sql实例</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">ALTER USER <span class="string">'root'</span>@<span class="string">'%'</span> IDENTIFIED WITH mysql_native_password BY <span class="string">'123123'</span>;</span><br><span class="line">create database <span class="built_in">test</span>;</span><br><span class="line">use <span class="built_in">test</span>;</span><br><span class="line">create table user</span><br><span class="line">(</span><br><span class="line">    id int auto_increment primary key,</span><br><span class="line">    username varchar(64) unique not null,</span><br><span class="line">    email varchar(120) unique not null,</span><br><span class="line">    password_hash varchar(128) not null,</span><br><span class="line">    avatar varchar(128) not null</span><br><span class="line">);</span><br><span class="line">insert into user values(1, <span class="string">"zhangsan"</span>,<span class="string">"test12345@qq.com"</span>,<span class="string">"passwd"</span>,<span class="string">"avaterpath"</span>);</span><br><span class="line">insert into user values(2, <span class="string">"lisi"</span>,<span class="string">"12345test@qq.com"</span>,<span class="string">"passwd"</span>,<span class="string">"avaterpath"</span>);</span><br></pre></td></tr></table></figure>

<h1 id="nginx模板"><a href="#nginx模板" class="headerlink" title="nginx模板"></a>nginx模板</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  web:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">    ports:</span> </span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8080:80"</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">"web"</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">  dev:</span></span><br><span class="line"><span class="attr">    driver:</span> <span class="string">bridge</span></span><br></pre></td></tr></table></figure>

<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="image"><a href="#image" class="headerlink" title="image"></a>image</h2><p>image 是指定服务的镜像名称或镜像 ID。如果镜像在本地不存在，Compose 将会尝试拉取这个镜像。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    image: hello-world</span><br></pre></td></tr></table></figure>

<h2 id="build"><a href="#build" class="headerlink" title="build"></a>build</h2><p>服务除了可以基于指定的镜像，还可以基于一份 Dockerfile，在使用 up 启动之时执行构建任务，这个构建标签就是 build，它可以指定 Dockerfile 所在文件夹的路径。Compose 将会利用它自动构建这个镜像，然后使用这个镜像启动服务容器。</p>
<p>build: /path/to/build/dir<br>也可以是相对路径，只要上下文确定就可以读取到 Dockerfile。</p>
<p>build: ./dir<br>设定上下文根目录，然后以该目录为准指定 Dockerfile。</p>
<p>build:<br>  context: ../<br>  dockerfile: path/of/Dockerfile<br>注意 build 都是一个目录，如果你要指定 Dockerfile 文件需要在 build 标签的子级标签中使用 dockerfile 标签指定，如上面的例子。<br>如果你同时指定了 image 和 build 两个标签，那么 Compose 会构建镜像并且把镜像命名为 image 后面的那个名字。</p>
<p>build: ./dir<br>image: webapp:tag<br>既然可以在 docker-compose.yml 中定义构建任务，那么一定少不了 arg 这个标签，就像 Dockerfile 中的 ARG 指令，它可以在构建过程中指定环境变量，但是在构建成功后取消，在 docker-compose.yml 文件中也支持这样的写法：</p>
<p>build:<br>  context: .<br>  args:<br>    buildno: 1<br>    password: secret<br>下面这种写法也是支持的，一般来说下面的写法更适合阅读。</p>
<p>build:<br>  context: .<br>  args:<br>    - buildno=1<br>    - password=secret<br>与 ENV 不同的是，ARG 是允许空值的。例如：</p>
<p>args:</p>
<ul>
<li>buildno</li>
<li>password<br>这样构建过程可以向它们赋值。</li>
</ul>
<p>注意：YAML 的布尔值（true, false, yes, no, on, off）必须要使用引号引起来（单引号、双引号均可），否则会当成字符串解析。</p>
<h2 id="command"><a href="#command" class="headerlink" title="command"></a>command</h2><p>使用 command 可以覆盖容器启动后默认执行的命令。</p>
<p>command: bundle exec thin -p 3000<br>也可以写成类似 Dockerfile 中的格式：</p>
<p>command: [bundle, exec, thin, -p, 3000]</p>
<h2 id="container-name"><a href="#container-name" class="headerlink" title="container_name"></a>container_name</h2><p>前面说过 Compose 的容器名称格式是：&lt;项目名称&gt;&lt;服务名称&gt;&lt;序号&gt;<br>虽然可以自定义项目名称、服务名称，但是如果你想完全控制容器的命名，可以使用这个标签指定：</p>
<p>container_name: app<br>这样容器的名字就指定为 app 了。</p>
<h2 id="depends-on"><a href="#depends-on" class="headerlink" title="depends_on"></a>depends_on</h2><p>在使用 Compose 时，最大的好处就是少打启动命令，但是一般项目容器启动的顺序是有要求的，如果直接从上到下启动容器，必然会因为容器依赖问题而启动失败。<br>例如在没启动数据库容器的时候启动了应用容器，这时候应用容器会因为找不到数据库而退出，为了避免这种情况我们需要加入一个标签，就是 depends_on，这个标签解决了容器的依赖、启动先后的问题。<br>例如下面容器会先启动 redis 和 db 两个服务，最后才启动 web 服务：</p>
<p>version: ‘2’<br>services:<br>  web:<br>    build: .<br>    depends_on:<br>      - db<br>      - redis<br>  redis:<br>    image: redis<br>  db:<br>    image: postgres<br>注意的是，默认情况下使用 docker-compose up web 这样的方式启动 web 服务时，也会启动 redis 和 db 两个服务，因为在配置文件中定义了依赖关系。</p>
<h2 id="dns"><a href="#dns" class="headerlink" title="dns"></a>dns</h2><p>和 –dns 参数一样用途，格式如下：</p>
<p>dns: 8.8.8.8<br>也可以是一个列表：</p>
<p>dns:</p>
<ul>
<li>8.8.8.8</li>
<li>9.9.9.9<br>此外 dns_search 的配置也类似：</li>
</ul>
<p>dns_search: example.com<br>dns_search:</p>
<ul>
<li>dc1.example.com</li>
<li>dc2.example.com<h2 id="tmpfs"><a href="#tmpfs" class="headerlink" title="tmpfs"></a>tmpfs</h2>挂载临时目录到容器内部，与 run 的参数一样效果：</li>
</ul>
<p>tmpfs: /run<br>tmpfs:</p>
<ul>
<li>/run</li>
<li>/tmp<h2 id="entrypoint"><a href="#entrypoint" class="headerlink" title="entrypoint"></a>entrypoint</h2>在 Dockerfile 中有一个指令叫做 ENTRYPOINT 指令，用于指定接入点，第四章有对比过与 CMD 的区别。<br>在 docker-compose.yml 中可以定义接入点，覆盖 Dockerfile 中的定义：</li>
</ul>
<p>entrypoint: /code/entrypoint.sh<br>格式和 Docker 类似，不过还可以写成这样：</p>
<p>entrypoint:<br>    - php<br>    - -d<br>    - zend_extension=/usr/local/lib/php/extensions/no-debug-non-zts-20100525/xdebug.so<br>    - -d<br>    - memory_limit=-1<br>    - vendor/bin/phpunit</p>
<h2 id="env-file"><a href="#env-file" class="headerlink" title="env_file"></a>env_file</h2><p>还记得前面提到的 .env 文件吧，这个文件可以设置 Compose 的变量。而在 docker-compose.yml 中可以定义一个专门存放变量的文件。<br>如果通过 docker-compose -f FILE 指定了配置文件，则 env_file 中路径会使用配置文件路径。</p>
<p>如果有变量名称与 environment 指令冲突，则以后者为准。格式如下：</p>
<p>env_file: .env<br>或者根据 docker-compose.yml 设置多个：</p>
<p>env_file:</p>
<ul>
<li>./common.env</li>
<li>./apps/web.env</li>
<li>/opt/secrets.env<br>注意的是这里所说的环境变量是对宿主机的 Compose 而言的，如果在配置文件中有 build 操作，这些变量并不会进入构建过程中，如果要在构建中使用变量还是首选前面刚讲的 arg 标签。</li>
</ul>
<h2 id="environment"><a href="#environment" class="headerlink" title="environment"></a>environment</h2><p>与上面的 env_file 标签完全不同，反而和 arg 有几分类似，这个标签的作用是设置镜像变量，它可以保存变量到镜像里面，也就是说启动的容器也会包含这些变量设置，这是与 arg 最大的不同。<br>一般 arg 标签的变量仅用在构建过程中。而 environment 和 Dockerfile 中的 ENV 指令一样会把变量一直保存在镜像、容器中，类似 docker run -e 的效果。</p>
<p>environment:<br>  RACK_ENV: development<br>  SHOW: ‘true’<br>  SESSION_SECRET:</p>
<p>environment:</p>
<ul>
<li>RACK_ENV=development</li>
<li>SHOW=true</li>
<li>SESSION_SECRET<h2 id="expose"><a href="#expose" class="headerlink" title="expose"></a>expose</h2>这个标签与Dockerfile中的EXPOSE指令一样，用于指定暴露的端口，但是只是作为一种参考，实际上docker-compose.yml的端口映射还得ports这样的标签。</li>
</ul>
<p>expose:</p>
<ul>
<li>“3000”</li>
<li>“8000”<h2 id="external-links"><a href="#external-links" class="headerlink" title="external_links"></a>external_links</h2>在使用Docker过程中，我们会有许多单独使用docker run启动的容器，为了使Compose能够连接这些不在docker-compose.yml中定义的容器，我们需要一个特殊的标签，就是external_links，它可以让Compose项目里面的容器连接到那些项目配置外部的容器（前提是外部容器中必须至少有一个容器是连接到与项目内的服务的同一个网络里面）。<br>格式如下：</li>
</ul>
<p>external_links:</p>
<ul>
<li>redis_1</li>
<li>project_db_1:mysql</li>
<li>project_db_1:postgresql<h2 id="extra-hosts"><a href="#extra-hosts" class="headerlink" title="extra_hosts"></a>extra_hosts</h2>添加主机名的标签，就是往/etc/hosts文件中添加一些记录，与Docker client的–add-host类似：</li>
</ul>
<p>extra_hosts:</p>
<ul>
<li>“somehost:162.242.195.82”</li>
<li>“otherhost:50.31.209.229”<br>启动之后查看容器内部hosts：</li>
</ul>
<p>162.242.195.82  somehost<br>50.31.209.229   otherhost</p>
<h2 id="labels"><a href="#labels" class="headerlink" title="labels"></a>labels</h2><p>向容器添加元数据，和Dockerfile的LABEL指令一个意思，格式如下：</p>
<p>labels:<br>  com.example.description: “Accounting webapp”<br>  com.example.department: “Finance”<br>  com.example.label-with-empty-value: “”<br>labels:</p>
<ul>
<li>“com.example.description=Accounting webapp”</li>
<li>“com.example.department=Finance”</li>
<li>“com.example.label-with-empty-value”<h2 id="links"><a href="#links" class="headerlink" title="links"></a>links</h2>还记得上面的depends_on吧，那个标签解决的是启动顺序问题，这个标签解决的是容器连接问题，与Docker client的–link一样效果，会连接到其它服务中的容器。<br>格式如下：</li>
</ul>
<p>links:</p>
<ul>
<li>db</li>
<li>db:database</li>
<li>redis<br>使用的别名将会自动在服务容器中的/etc/hosts里创建。例如：</li>
</ul>
<p>172.12.2.186  db<br>172.12.2.186  database<br>172.12.2.187  redis<br>相应的环境变量也将被创建。</p>
<h2 id="logging"><a href="#logging" class="headerlink" title="logging"></a>logging</h2><p>这个标签用于配置日志服务。格式如下：</p>
<p>logging:<br>  driver: syslog<br>  options:<br>    syslog-address: “tcp://192.168.0.42:123”<br>默认的driver是json-file。只有json-file和journald可以通过docker-compose logs显示日志，其他方式有其他日志查看方式，但目前Compose不支持。对于可选值可以使用options指定。<br>有关更多这方面的信息可以阅读官方文档：<br><a href="https://docs.docker.com/engine/admin/logging/overview/" target="_blank" rel="noopener">https://docs.docker.com/engine/admin/logging/overview/</a></p>
<h2 id="pid"><a href="#pid" class="headerlink" title="pid"></a>pid</h2><p>pid: “host”<br>将PID模式设置为主机PID模式，跟主机系统共享进程命名空间。容器使用这个标签将能够访问和操纵其他容器和宿主机的名称空间。</p>
<h2 id="ports"><a href="#ports" class="headerlink" title="ports"></a>ports</h2><p>映射端口的标签。<br>使用HOST:CONTAINER格式或者只是指定容器的端口，宿主机会随机映射端口。</p>
<p>ports:</p>
<ul>
<li>“3000”</li>
<li>“8000:8000”</li>
<li>“49100:22”</li>
<li>“127.0.0.1:8001:8001”<br>注意：当使用HOST:CONTAINER格式来映射端口时，如果你使用的容器端口小于60你可能会得到错误得结果，因为YAML将会解析xx:yy这种数字格式为60进制。所以建议采用字符串格式。</li>
</ul>
<h2 id="security-opt"><a href="#security-opt" class="headerlink" title="security_opt"></a>security_opt</h2><p>为每个容器覆盖默认的标签。简单说来就是管理全部服务的标签。比如设置全部服务的user标签值为USER。</p>
<p>security_opt:</p>
<ul>
<li>label:user:USER</li>
<li>label:role:ROLE<h2 id="stop-signal"><a href="#stop-signal" class="headerlink" title="stop_signal"></a>stop_signal</h2>设置另一个信号来停止容器。在默认情况下使用的是SIGTERM停止容器。设置另一个信号可以使用stop_signal标签。</li>
</ul>
<p>stop_signal: SIGUSR1</p>
<h2 id="volumes"><a href="#volumes" class="headerlink" title="volumes"></a>volumes</h2><p>挂载一个目录或者一个已存在的数据卷容器，可以直接使用 [HOST:CONTAINER] 这样的格式，或者使用 [HOST:CONTAINER:ro] 这样的格式，后者对于容器来说，数据卷是只读的，这样可以有效保护宿主机的文件系统。<br>Compose的数据卷指定路径可以是相对路径，使用 . 或者 .. 来指定相对目录。<br>数据卷的格式可以是下面多种形式：</p>
<p>volumes:<br>  // 只是指定一个路径，Docker 会自动在创建一个数据卷（这个路径是容器内部的）。</p>
<ul>
<li><p>/var/lib/mysql</p>
<p>// 使用绝对路径挂载数据卷</p>
</li>
<li><p>/opt/data:/var/lib/mysql</p>
<p>// 以 Compose 配置文件为中心的相对路径作为数据卷挂载到容器。</p>
</li>
<li><p>./cache:/tmp/cache</p>
<p>// 使用用户的相对路径（~/ 表示的目录是 /home/&lt;用户目录&gt;/ 或者 /root/）。</p>
</li>
<li><p>~/configs:/etc/configs/:ro</p>
<p>// 已经存在的命名的数据卷。</p>
</li>
<li><p>datavolume:/var/lib/mysql<br>如果你不使用宿主机的路径，你可以指定一个volume_driver。</p>
</li>
</ul>
<p>volume_driver: mydriver</p>
<h2 id="volumes-from"><a href="#volumes-from" class="headerlink" title="volumes_from"></a>volumes_from</h2><p>从其它容器或者服务挂载数据卷，可选的参数是 :ro或者 :rw，前者表示容器只读，后者表示容器对数据卷是可读可写的。默认情况下是可读可写的。</p>
<p>volumes_from:</p>
<ul>
<li>service_name</li>
<li>service_name:ro</li>
<li>container:container_name</li>
<li>container:container_name:rw<h2 id="cap-add-cap-drop"><a href="#cap-add-cap-drop" class="headerlink" title="cap_add, cap_drop"></a>cap_add, cap_drop</h2>添加或删除容器的内核功能。详细信息在前面容器章节有讲解，此处不再赘述。</li>
</ul>
<p>cap_add:</p>
<ul>
<li>ALL</li>
</ul>
<p>cap_drop:</p>
<ul>
<li>NET_ADMIN</li>
<li>SYS_ADMIN<h2 id="cgroup-parent"><a href="#cgroup-parent" class="headerlink" title="cgroup_parent"></a>cgroup_parent</h2>指定一个容器的父级cgroup。</li>
</ul>
<p>cgroup_parent: m-executor-abcd</p>
<h2 id="devices"><a href="#devices" class="headerlink" title="devices"></a>devices</h2><p>设备映射列表。与Docker client的–device参数类似。</p>
<p>devices:</p>
<ul>
<li>“/dev/ttyUSB0:/dev/ttyUSB0”<h2 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h2>这个标签可以扩展另一个服务，扩展内容可以是来自在当前文件，也可以是来自其他文件，相同服务的情况下，后来者会有选择地覆盖原有配置。</li>
</ul>
<p>extends:<br>  file: common.yml<br>  service: webapp<br>用户可以在任何地方使用这个标签，只要标签内容包含file和service两个值就可以了。file的值可以是相对或者绝对路径，如果不指定file的值，那么Compose会读取当前YML文件的信息。<br>更多的操作细节在后面的12.3.4小节有介绍。</p>
<h2 id="network-mode"><a href="#network-mode" class="headerlink" title="network_mode"></a>network_mode</h2><p>网络模式，与Docker client的–net参数类似，只是相对多了一个service:[service name] 的格式。<br>例如：</p>
<p>network_mode: “bridge”<br>network_mode: “host”<br>network_mode: “none”<br>network_mode: “service:[service name]”<br>network_mode: “container:[container name/id]”<br>可以指定使用服务或者容器的网络。</p>
<h2 id="networks"><a href="#networks" class="headerlink" title="networks"></a>networks</h2><p>加入指定网络，格式如下：</p>
<p>services:<br>  some-service:<br>    networks:<br>     - some-network<br>     - other-network<br>关于这个标签还有一个特别的子标签aliases，这是一个用来设置服务别名的标签，例如：</p>
<p>services:<br>  some-service:<br>    networks:<br>      some-network:<br>        aliases:<br>         - alias1<br>         - alias3<br>      other-network:<br>        aliases:<br>         - alias2<br>相同的服务可以在不同的网络有不同的别名。</p>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>还有这些标签：cpu_shares, cpu_quota, cpuset, domainname, hostname, ipc, mac_address, mem_limit, memswap_limit, privileged, read_only, restart, shm_size, stdin_open, tty, user, working_dir<br>上面这些都是一个单值的标签，类似于使用docker run的效果。</p>
<p>cpu_shares: 73<br>cpu_quota: 50000<br>cpuset: 0,1</p>
<p>user: postgresql<br>working_dir: /code</p>
<p>domainname: foo.com<br>hostname: foo<br>ipc: host<br>mac_address: 02:42:ac:11:65:43</p>
<p>mem_limit: 1000000000<br>memswap_limit: 2000000000<br>privileged: true</p>
<p>restart: always</p>
<p>read_only: true<br>shm_size: 64M<br>stdin_open: true<br>tty: true</p>
]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>dockerfile基本使用</title>
    <url>/2019/06/14/dockerfile%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="dockerfile作用"><a href="#dockerfile作用" class="headerlink" title="dockerfile作用"></a>dockerfile作用</h1><p><font color="DarkTurquoise"><strong>dockerfile</strong></font> 是由一系列命令和参数构成的脚本，这些命令应用于基础镜像并最终创建一个新的镜像。它们简化了从头到尾的流程并极大的简化了部署工作。Dockerfile从FROM命令开始，紧接着跟随者各种方法，命令和参数。其产出为一个新的可以用于创建容器的镜像。</p>
<p>简单来说，dockerfile就是用来快速定制和生成自己的镜像。</p>
<h1 id="dockerfile基本语法"><a href="#dockerfile基本语法" class="headerlink" title="dockerfile基本语法"></a>dockerfile基本语法</h1><h2 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h2><p>指定基础镜像<br>所谓定制镜像，那一定是以一个镜像为基础，在其上进行定制。而 FROM 就是指定基础镜像，因此一个 Dockerfile 中 FROM 是必备的指令，并且必须是第一条指令。</p>
<p>除了选择现有镜像为基础镜像外，Docker 还存在一个特殊的镜像，名为 scratch 。这个镜像是虚拟的概念，并不实际存在，它表示一个空白的镜像。</p>
<p><code>FROM scratch</code></p>
<p>如果你以 scratch 为基础镜像的话，意味着你不以任何镜像为基础，接下来所写的指令将作为镜像第一层开始存在。</p>
<p>不以任何系统为基础，直接将可执行文件复制进镜像的做法并不罕见，比如 swarm 、 coreos/etcd 。对于 Linux 下静态编译的程序来说，并不需要有操作系统提供运行时支持，所需的一切库都已经在可执行文件里了，因此直接 FROM scratch 会让镜像体积更加小巧。使用 Go 语言 开发的应用很多会使用这种方式来制作镜像，这也是为什么有人认为 Go是特别适合容器微服务架构的语言的原因之一。</p>
<h2 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h2><p>RUN 指令是用来执行命令行命令的。由于命令行的强大能力， RUN 指令在定制镜像时是最常用的指令之一。</p>
<p>在指令格式上，一般推荐使用 exec 格式，这类格式在解析时会被解析为 JSON 数组，因此一定要使用双引号 “ ，而不要使用单引号。</p>
<p>其格式有两种：<br>shell 格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">RUN <span class="built_in">echo</span> <span class="string">'&lt;h1&gt;Hello, Docker!&lt;/h1&gt;'</span> &gt; /usr/share/nginx/html/index.html</span><br></pre></td></tr></table></figure>

<p>exec 格式： </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">RUN [<span class="string">"可执行文件"</span>, <span class="string">"参数1"</span>, <span class="string">"参数2"</span>]</span><br></pre></td></tr></table></figure>

<p>注意：Dockerfile 中每一个指令都会建立一层，最大限制为127层，有些类似的指令可以使用<code>&amp;&amp;</code>连接，减少层数。</p>
<h2 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h2><p>复制文件</p>
<p>格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">COPY &lt;源路径&gt; &lt;目标路径&gt;</span><br><span class="line"></span><br><span class="line">COPY [<span class="string">"&lt;源路径1&gt;"</span>,<span class="string">"&lt;目标路径&gt;"</span>]</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ol>
<li>源路径不能使用绝对路径</li>
<li>复制到容器的文件和状态会被保留</li>
<li>支持通配符</li>
</ol>
<h2 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h2><p>更高级的复制文件</p>
<p>格式与copy一致</p>
<p>如果 &lt;源路径&gt; 为一个 tar 压缩文件的话，压缩格式为 gzip , bzip2 以及 xz 的情况下， ADD 指令将会自动解压缩这个压缩文件到 &lt;目标路径&gt; 去。<br>另外需要注意的是， ADD 指令会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。</p>
<h2 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h2><p>容器启动命令</p>
<p>CMD 指令的格式和 RUN 相似。</p>
<p>Docker 不是虚拟机，容器中的应用都应该以前台执行，而不是像虚拟机、物理机里面那样，容器内没有后台服务的概念，所有容器必须有一个前台进程，否则无法启动容器。</p>
<h2 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h2><p>入口点</p>
<p>ENTRYPOINT 的格式和 RUN 指令格式一样。</p>
<p>ENTRYPOINT 的目的和 CMD 一样，都是在指定容器启动程序及参数，一个dockerfile中只能有一个ENTRYPOINT 层。</p>
<p><code>CMD</code>可以指定参数传递到<code>ENTRYPOINT</code>，例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM alpine:3.4 ... RUN addgroup -S redis &amp;&amp; adduser -S -G redis redis ... </span><br><span class="line">ENTRYPOINT [<span class="string">"docker-entrypoint.sh"</span>] </span><br><span class="line">EXPOSE 6379 </span><br><span class="line">CMD [ <span class="string">"redis-server"</span> ]</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/sh ... </span></span><br><span class="line"><span class="comment">#allow the container to be started with `--user` </span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span> = <span class="string">'redis-server'</span> -a <span class="string">"<span class="variable">$(id -u)</span>"</span> = <span class="string">'0'</span> ]; <span class="keyword">then</span> </span><br><span class="line">	chown -R redis .</span><br><span class="line">	<span class="built_in">exec</span> su-exec redis <span class="string">"<span class="variable">$0</span>"</span> <span class="string">"<span class="variable">$@</span>"</span> </span><br><span class="line"><span class="keyword">fi</span> </span><br><span class="line"><span class="built_in">exec</span> <span class="string">"<span class="variable">$@</span>"</span></span><br></pre></td></tr></table></figure>

<p>该脚本的内容就是根据 <code>CMD</code> 的内容来判断，如果是 <code>redis-server</code>的话，则切换到 redis 用户身份启动服务器，否则依旧使用 root 身份执行。</p>
<h2 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h2><p>设置环境变量</p>
<p>格式有两种：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ENV &lt;key&gt; &lt;value&gt;</span><br><span class="line">ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</span><br></pre></td></tr></table></figure>

<p>下列指令可以支持环境变量：<br>ADD 、 COPY 、 ENV 、 EXPOSE 、 LABEL 、 USER 、 WORKDIR 、 VOLUME 、 STOPSIGNAL 、 ONBUILD 。</p>
<h2 id="ARG"><a href="#ARG" class="headerlink" title="ARG"></a>ARG</h2><p>构建参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ARG &lt;参数名&gt;[=&lt;默认值&gt;]</span><br></pre></td></tr></table></figure>

<p>Dockerfile 中的 ARG 指令是定义参数名称，以及定义其默认值。该默认值可以在构建命令 docker build 中用 –build-arg &lt;参数名&gt;=&lt;值&gt; 来覆盖。</p>
<p>在 1.13 之前的版本，要求 –build-arg 中的参数名，必须在 Dockerfile 中用 ARG 定义过了，换句话说，就是 –build-arg 指定的参数，必须在 Dockerfile 中使用了。如果对应参数没有被使用，则会报错退出构建。从 1.13 开始，这种严格的限制被放开，不再报错退出，而是显示警告信息，并继续构建。这对于使用 CI 系统，用同样的构建流程构建不同的 Dockerfile 的时候比较有帮助，避免构建命令必须根据每个 Dockerfile 的内容修改。</p>
<h2 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h2><p>定义匿名卷</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">VOLUME [<span class="string">"&lt;路径1&gt;"</span>, <span class="string">"&lt;路径2&gt;"</span>...]</span><br><span class="line">VOLUME &lt;路径&gt;</span><br></pre></td></tr></table></figure>

<p>容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷(volume)中。为了防止运行时用户忘记将动态文件所保存目录挂载为卷，在 Dockerfile 中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">VOLUME /data</span><br></pre></td></tr></table></figure>

<p>这里的 /data 目录就会在运行时自动挂载为匿名卷，任何向 /data 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然，运行时可以覆盖这个挂载设置。比如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -v mydata:/data xxxx</span><br></pre></td></tr></table></figure>

<p>在这行命令中，就使用了 mydata 这个命名卷挂载到了 /data 这个位置，替代了 Dockerfile 中定义的匿名卷的挂载配置。</p>
<h2 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h2><p>声明端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">EXPOSE &lt;端口1&gt; &lt;端口2&gt;</span><br></pre></td></tr></table></figure>

<p>EXPOSE 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。</p>
<p>要将 EXPOSE 和在运行时使用 -p &lt;宿主端口&gt;:&lt;容器端口&gt; 区分开来。 -p ，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而 EXPOSE 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。</p>
<h2 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h2><p>指定工作目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">WORKDIR &lt;工作目录路径&gt;</span><br></pre></td></tr></table></figure>

<p>使用 WORKDIR 指令可以来指定工作目录（或者称为当前目录），以后各层的当前目录就被改为指定的目录，如该目录不存在， WORKDIR 会帮你建立目录。</p>
<h2 id="USER"><a href="#USER" class="headerlink" title="USER"></a>USER</h2><p>指定当前用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">USER &lt;用户名&gt;</span><br></pre></td></tr></table></figure>

<p>USER 指令和 WORKDIR 相似，都是改变环境状态并影响以后的层。 WORKDIR 是改变工作目录， USER 则是改变之后层的执行 RUN , CMD 以及 ENTRYPOINT 这类命令的身份。当然，和 WORKDIR 一样， USER 只是帮助你切换到指定用户而已，这个用户必须是事先建立好的，否则无法切换。</p>
<h2 id="HEALTHCHECK"><a href="#HEALTHCHECK" class="headerlink" title="HEALTHCHECK"></a>HEALTHCHECK</h2><p>健康检查</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HEALTHCHECK [选项] CMD &lt;命令&gt; ：设置检查容器健康状况的命令</span><br></pre></td></tr></table></figure>

<p>当在一个镜像指定了 HEALTHCHECK 指令后，用其启动容器，初始状态会为 starting ，在 HEALTHCHECK 指令检查成功后变为 healthy ，如果连续一定次数失败，则会变为 unhealthy 。</p>
<p>HEALTHCHECK 支持下列选项：</p>
<ol>
<li>interval=&lt;间隔&gt; ：两次健康检查的间隔，默认为 30 秒；</li>
<li>timeout=&lt;时长&gt; ：健康检查命令运行超时时间，如果超过这个时间，本次健康检查就被视为失败，默认 30 秒；</li>
<li>retries=&lt;次数&gt; ：当连续失败指定次数后，则将容器状态视为 unhealthy ，默认 3 次。</li>
</ol>
<p>和 CMD , ENTRYPOINT 一样， HEALTHCHECK 只可以出现一次，如果写了多个，只有最后一个生效。</p>
<p>例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM nginx</span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y curl &amp;&amp; rm -rf /var/lib/apt/lists/*</span><br><span class="line">HEALTHCHECK --interval=5s --timeout=3s \</span><br><span class="line">    CMD curl -fs http://localhost/ || <span class="built_in">exit</span> 1</span><br></pre></td></tr></table></figure>

<p>使用 <code>curl -fs http://localhost/ || exit 1</code>作为健康检查命令。<br>当运行该镜像后，可以通过 <code>docker container ls</code></p>
<p>HEALTHCHECK有三种状态：</p>
<ol>
<li>starting：当运行该镜像后的最初状态</li>
<li>healthy：容器运行稳定后的健康状态</li>
<li>unhealthy：健康检查连续失败超过了重试次数</li>
</ol>
<p>为了帮助排障，健康检查命令的输出（包括 stdout 以及 stderr ）都会被存储于健康状态里，可以用 docker inspect 来查看。</p>
]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>flink 部署</title>
    <url>/2020/04/26/flink%20%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><font color="32CD32">Flink</font> 是新的stream计算引擎，用java实现。既可以处理stream data也可以处理batch data，可以同时兼顾Spark以及Spark streaming的功能，与Spark不同的是，Flink本质上只有stream的概念，batch被认为是special stream。Flink在运行中主要有三个组件组成，JobClient，JobManager 和 TaskManager</p>
<p>用户首先提交Flink程序到JobClient，经过JobClient的处理、解析、优化提交到JobManager，最后由TaskManager运行task。</p>
<h1 id="组件说明"><a href="#组件说明" class="headerlink" title="组件说明"></a>组件说明</h1><p><font color="32CD32">JobManager</font></p>
<p>JobManager是一个进程，主要负责申请资源，协调以及控制整个job的执行过程，具体包括，调度任务、处理checkpoint、容错等等，在接收到JobClient提交的执行计划之后，针对收到的执行计划，继续解析，因为JobClient只是形成一个operaor层面的执行计划，所以JobManager继续解析执行计划（根据算子的并发度，划分task），形成一个可以被实际调度的由task组成的拓扑图，最后向集群申请资源，一旦资源就绪，就调度task到TaskManager。</p>
<p><font color="32CD32">TaskManager</font></p>
<p>TaskManager是一个进程，及一个JVM（Flink用java实现）。主要作用是接收并执行JobManager发送的task，并且与JobManager通信，反馈任务状态信息，比如任务分执行中，执行完等状态，上文提到的checkpoint的部分信息也是TaskManager反馈给JobManager的。如果说JobManager是master的话，那么TaskManager就是worker主要用来执行任务。在TaskManager内可以运行多个task。多个task运行在一个JVM内有几个好处，首先task可以通过多路复用的方式TCP连接，其次task可以共享节点之间的心跳信息，减少了网络传输。TaskManager并不是最细粒度的概念，每个TaskManager像一个容器一样，包含一个多或多个Slot。</p>
<p><font color="32CD32">Slot</font></p>
<p>Slot是TaskManager资源粒度的划分，每个Slot都有自己独立的内存。所有Slot平均分配TaskManger的内存，比如TaskManager分配给Solt的内存为8G，两个Slot，每个Slot的内存为4G，四个Slot，每个Slot的内存为2G，值得注意的是，Slot仅划分内存，不涉及cpu的划分。同时Slot是Flink中的任务执行器（类似Storm中Executor），每个Slot可以运行多个task，而且一个task会以单独的线程来运行。</p>
<p><font color="32CD32">ResourceManager</font></p>
<p>ResourceManager主要负责管理任务管理器（TaskManager）的插槽（slot），Slot时Flink定义的处理资源单元；ResourceManager将有空闲插槽的TaskManager分配给JobManager。如果ResourceManager没有足够的插槽来满足JobManager的请求，它可以向资源提供平台发起会话，以提供启动TaskManager进程的容器。</p>
<h1 id="flink-部署"><a href="#flink-部署" class="headerlink" title="flink 部署"></a>flink 部署</h1><p>Flink 有三种部署模式，分别是 Local、Standalone Cluster 和 Yarn Cluster。</p>
<ul>
<li>Local 单机模式，适合用于实验环境</li>
<li>Standalone Cluster 集群模式，适合用于测试环境，配合zk和hdfs，可部署高可用模式，可用于生产环境</li>
<li>Yarn Cluster 基于hadoop Yarn 组件进行部署，支持高可用，适合用于生产环境</li>
</ul>
<h2 id="Local-模式"><a href="#Local-模式" class="headerlink" title="Local 模式"></a>Local 模式</h2><ol>
<li>安装jdk</li>
<li>下载包解压</li>
<li>直接运行即可</li>
</ol>
<h2 id="Standalone-模式"><a href="#Standalone-模式" class="headerlink" title="Standalone 模式"></a>Standalone 模式</h2><p><font color="32CD32">实验环境</font></p>
<table>
<thead>
<tr>
<th align="center">IP</th>
<th align="center">主机名</th>
<th align="center">安装服务</th>
</tr>
</thead>
<tbody><tr>
<td align="center">192.168.40.100</td>
<td align="center">master</td>
<td align="center">jdk1.8，flink1.7.1</td>
</tr>
<tr>
<td align="center">192.168.40.101</td>
<td align="center">worker1</td>
<td align="center">jdk1.8，flink1.7.1</td>
</tr>
<tr>
<td align="center">192.168.40.102</td>
<td align="center">worker2</td>
<td align="center">jdk1.8，flink1.7.1</td>
</tr>
</tbody></table>
<p><font color="32CD32">jdk1.8安装</font></p>
<p><a href="https://hxqxiaoqi.gitee.io/2019/06/04/JDK1.8环境安装-linux/">jdk1.8 安装跳转</a> 所有节点都需要安装</p>
<p><font color="32CD32">设置ssh免密</font></p>
<p>在master上执行以下脚本，根据实际情况修改IP和密码。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &gt; ssh.sh &lt;&lt; EOF</span><br><span class="line">wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">yum install -y expect</span><br><span class="line"></span><br><span class="line"><span class="comment">#分发公钥</span></span><br><span class="line">ssh-keygen -t rsa -P <span class="string">""</span> -f /root/.ssh/id_rsa</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> 192.168.40.100 192.168.40.101 192.168.40.102</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">expect -c <span class="string">"</span></span><br><span class="line"><span class="string">spawn ssh-copy-id -i /root/.ssh/id_rsa.pub root@\$i</span></span><br><span class="line"><span class="string">        expect &#123;</span></span><br><span class="line"><span class="string">                \"*yes/no*\" &#123;send \"yes\r\"; exp_continue&#125;</span></span><br><span class="line"><span class="string">                \"*password*\" &#123;send \"123123\r\"; exp_continue&#125;</span></span><br><span class="line"><span class="string">                \"*Password*\" &#123;send \"123123\r\";&#125;</span></span><br><span class="line"><span class="string">        &#125; "</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">EOF</span><br><span class="line">bash ssh.sh</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">flink1.7.1 安装</font></p>
<p>以下操作，没有特殊说明，均在master上执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget https://archive.apache.org/dist/flink/flink-1.7.1/flink-1.7.1-bin-hadoop27-scala_2.11.tgz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar xf flink-1.7.1-bin-hadoop27-scala_2.11.tgz -C /opt</span><br></pre></td></tr></table></figure>

<p>修改配置：/opt/flink-1.7.1/conf/masters</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">192.168.40.100:8081</span><br></pre></td></tr></table></figure>

<p>修改配置：/opt/flink-1.7.1/conf/slaves</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">192.168.40.102</span><br><span class="line">192.168.40.101</span><br></pre></td></tr></table></figure>

<p>修改配置：/opt/flink-1.7.1/conf/flink-conf.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># jobmanager地址</span></span><br><span class="line"><span class="string">jobmanager.rpc.address:</span> <span class="number">192.168</span><span class="number">.40</span><span class="number">.100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># JobManager的端口号</span></span><br><span class="line"><span class="string">jobmanager.rpc.port:</span> <span class="number">6123</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># jobmanager可用最大内存，根据服务器内存设置</span></span><br><span class="line"><span class="string">jobmanager.heap.size:</span> <span class="number">1024</span><span class="string">m</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># taskmanager可用最大内存，也就是每个taskmanager所在的服务器能用的最大内存</span></span><br><span class="line"><span class="string">taskmanager.heap.size:</span> <span class="number">1024</span><span class="string">m</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 每台taskmanager最大插槽数，可以根据cpu核数设定，用于划分内存，如：上面的值设置16G，slot设置2，每个slot有8G可用</span></span><br><span class="line"><span class="string">taskmanager.numberOfTaskSlots:</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认使用插槽数，每个job默认分配的slot数</span></span><br><span class="line"><span class="string">parallelism.default:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>配置环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &gt;&gt; /etc/profile &lt;&lt; EOF</span><br><span class="line"><span class="built_in">export</span> FLINK_HOME=/opt/flink-1.7.1</span><br><span class="line"><span class="built_in">export</span> PATH=\<span class="variable">$PATH</span>:\<span class="variable">$FLINK_HOME</span>/bin</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>分发配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> node_ip <span class="keyword">in</span> 192.168.40.101 192.168.40.102</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt; <span class="variable">$&#123;node_ip&#125;</span>"</span></span><br><span class="line">    scp -r /opt/flink-1.7.1/ root@<span class="variable">$&#123;node_ip&#125;</span>:/opt</span><br><span class="line">    scp /etc/profile root@<span class="variable">$&#123;node_ip&#125;</span>:/etc/</span><br><span class="line">    ssh root@<span class="variable">$&#123;node_ip&#125;</span> <span class="string">"source /etc/profile"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p>启动与停止</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/opt/flink-1.7.1/bin/start-cluster.sh</span><br><span class="line">/opt/flink-1.7.1/bin/stop-cluster.sh</span><br></pre></td></tr></table></figure>

<p>访问</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># flink web管理界面，可以在浏览器访问</span></span><br><span class="line">curl http://192.168.40.100:8081</span><br></pre></td></tr></table></figure>

<p>运行任务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/flink-1.7.1/</span><br><span class="line">./bin/flink run examples/streaming/WordCount.jar --input /opt/flink-1.7.1/README.txt</span><br></pre></td></tr></table></figure>

<h2 id="Standalone-HA-模式"><a href="#Standalone-HA-模式" class="headerlink" title="Standalone HA 模式"></a>Standalone HA 模式</h2><p>首先，我们需要知道 Flink 有两种部署的模式，分别是 Standalone 以及 Yarn Cluster 模式。对于 Standalone 来说，Flink 必须依赖于 Zookeeper 来实现 JobManager 的 HA（Zookeeper 已经成为了大部分开源框架 HA 必不可少的模块）。在 Zookeeper 的帮助下，一个 Standalone 的 Flink 集群会同时有多个活着的 JobManager，其中只有一个处于工作状态，其他处于 Standby 状态。当工作中的 JobManager 失去连接后（如宕机或 Crash），Zookeeper 会从 Standby 中选举新的 JobManager 来接管 Flink 集群。</p>
<p><font color="32CD32">zookeeper 安装</font></p>
<p><a href="https://hxqxiaoqi.gitee.io/2020/03/26/zookeeper%20集群搭建/">zookeeper 集群安装跳转</a></p>
<p><font color="32CD32">修改配置：conf/flink-conf.yaml</font></p>
<p>继续之前的配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#jobmanager.rpc.address: master	#注释rpc</span></span><br><span class="line">high-availability:zookeeper                             <span class="comment">#指定高可用模式（必须）</span></span><br><span class="line">high-availability.zookeeper.quorum:master:2181,worker1:2181,worker2:2181  <span class="comment">#ZooKeeper仲裁是ZooKeeper服务器的复制组，它提供分布式协调服务（必须）</span></span><br><span class="line">high-availability.storageDir:hdfs:///flink/ha/       <span class="comment">#JobManager元数据保存在文件系统storageDir中，只有指向此状态的指针存储在ZooKeeper中（必须）</span></span><br></pre></td></tr></table></figure>

<p><font color="32CD32">修改：conf/masters</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">master:8081</span><br><span class="line">worker1:8081</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">修改：conf/slaves</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">master</span><br><span class="line">worker1</span><br><span class="line">worker2</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">启动</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin/start-cluster.sh</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">查看</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master flink-1.7.1]<span class="comment"># jps</span></span><br><span class="line">10402 ResourceManager</span><br><span class="line">18563 Jps</span><br><span class="line">18261 TaskManagerRunner</span><br><span class="line">2056 NameNode</span><br><span class="line">17754 StandaloneSessionClusterEntrypoint</span><br><span class="line">2252 SecondaryNameNode</span><br><span class="line">6879 QuorumPeerMain</span><br><span class="line"></span><br><span class="line">[root@worker1 flink-1.7.1]<span class="comment"># jps</span></span><br><span class="line">1201 DataNode</span><br><span class="line">3938 QuorumPeerMain</span><br><span class="line">6274 NodeManager</span><br><span class="line">10787 StandaloneSessionClusterEntrypoint</span><br><span class="line">11273 TaskManagerRunner</span><br><span class="line">11453 Jps</span><br><span class="line"></span><br><span class="line">[root@worker2 flink-1.7.1]<span class="comment"># jps</span></span><br><span class="line">6177 Jps</span><br><span class="line">5988 TaskManagerRunner</span><br><span class="line">2135 QuorumPeerMain</span><br><span class="line">2698 NodeManager</span><br><span class="line">1199 DataNode</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">测试</font></p>
<ol>
<li>登录web界面，查看master在哪台服务器上</li>
<li>kill掉master</li>
<li>查看master是否有更改</li>
</ol>
<h2 id="Flink-on-yarn-部署模式"><a href="#Flink-on-yarn-部署模式" class="headerlink" title="Flink on yarn 部署模式"></a>Flink on yarn 部署模式</h2><p><a href="https://hxqxiaoqi.gitee.io/2020/03/20/hadoop%20完全分布式搭建/">安装hadoop集群</a></p>
<p>因Flink强大的灵活性及开箱即用的原则， 因此提交作业分为2种情况：</p>
<ul>
<li>yarn seesion</li>
<li>Flink run</li>
</ul>
<p>这2者对于现有大数据平台资源使用率有着很大的区别：</p>
<ul>
<li>1.第一种yarn seesion(Start a long-running Flink cluster on YARN)这种方式需要先启动集群，然后在提交作业，接着会向yarn申请一块空间后，资源永远保持不变。如果资源满了，下一个作业就无法提交，只能等到yarn中的其中一个作业执行完成后，释放了资源，那下一个作业才会正常提交.</li>
<li>2.第二种Flink run直接在YARN上提交运行Flink作业(Run a Flink job on YARN)，这种方式的好处是一个任务会对应一个job,即每提交一个作业会根据自身的情况，向yarn申请资源，直到作业执行完成，并不会影响下一个作业的正常运行，除非是yarn上面没有任何资源的情况下。</li>
</ul>
<p>注意事项:如果是平时的本地测试或者开发，可以采用第一种方案；如果是生产环境推荐使用第二种方案；</p>
<p>Flink on yarn模式部署时，不需要对Flink做任何修改配置，只需要将其解压传输到各个节点之上。但如果要实现高可用的方案，这个时候就需要到Flink相应的配置修改参数，具体的配置文件是FLINK_HOME/conf/flink-conf.yaml。</p>
<p>对于Flink on yarn模式，我们并不需要在conf配置下配置 masters和slaves。因为在指定TM的时候可以通过参数“-n”来标识需要启动几个TM;Flink on yarn启动后，如果是在分离式模式你会发现，在所有的节点只会出现一个 YarnSessionClusterEntrypoint进程；如果是客户端模式会出现2个进程一个YarnSessionClusterEntrypoint和一个FlinkYarnSessionCli进程。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 客户端模式</span></span><br><span class="line">./bin/yarn-session.sh -n 2 -jm 1024 -tm 1024</span><br><span class="line"></span><br><span class="line">./bin/flink run ./examples/batch/WordCount.jar -input hdfs://192.168.50.63:9000/LICENSE -output hdfs://192.168.50.63:9000/wordcount-result_1.txt</span><br><span class="line"></span><br><span class="line">yarn application --list	<span class="comment"># 查看所有yarn容器</span></span><br><span class="line">yarn application -<span class="built_in">kill</span> application_1550836652097_0002	<span class="comment"># 删除指定yarn</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分离模式</span></span><br><span class="line">./bin/yarn-session.sh -nm test3 -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># Flink run 方式提交</span></span><br><span class="line">./bin/flink run -m yarn-cluster -yn 1 -yjm 1024 -ytm 1024 ./examples/batch/WordCount.jar</span><br><span class="line"></span><br><span class="line">hdfs dfs -put LICENSE /	<span class="comment">#上传文件到hdfs</span></span><br><span class="line"></span><br><span class="line">./bin/flink run -m yarn-cluster -yn 1 -yjm 1024 -ytm 1024  ./examples/batch/WordCount.jar -input hdfs://192.168.50.63:9000/LICENSE -output hdfs://192.168.50.63:9000/wordcount-result.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行到指定的yarn session</span></span><br><span class="line">./bin/flink run -yid application_1550579025929_62420 ./examples/batch/WordCount.jar -input hdfs://data-hadoop-112-16.bjrs.zybang.com:8020/flume/events-.1539684881482 -output hdfs://data-hadoop-112-16.bjrs.zybang.com:8020/flink/flink-test02.txt</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>flink</tag>
      </tags>
  </entry>
  <entry>
    <title>hbase 分布式搭建</title>
    <url>/2020/03/20/hbash%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><font color="32CD32">HBase 简介</font></p>
<p>1、HBase是Apache Hadoop的数据库，能够对大型数据提供随机、实时的读写访问，是Google的BigTable的开源实现。</p>
<p>2、HBase的目标是存储并处理大型的数据，更具体地说仅用普通的硬件配置，能够处理成千上万的行和列所组成的大型数据库。<br>3、HBase是一个开源的、分布式的、多版本的、面向列的存储模型。可以直接使用本地文件系统，也可使用Hadoop的HDFS文件存储系统。</p>
<p>为了提高数据的可靠性和系统的健壮性，并且发挥HBase处理大型数据的能力，还是使用HDFS作为文件存储系统更佳。</p>
<p>另外，HBase存储的是松散型数据，具体来说，HBase存储的数据介于映射（key/value）和关系型数据之间。HBase存储的数据从逻辑上看就是一张很大的表，并且它的数据列可以根据需要动态增加。每一个cell中的数据又可以有多个版本（通过时间戳来区别），从下图来看，HBase还具有 “ 向下提供存储，向上提供运算 “ 的特点。</p>
<p><font color="32CD32">HBase 体系结构</font></p>
<p>HBase的服务器体系结构遵从简单的主从服务器架构，它由HRegion Server群和HBase Master服务器构成。</p>
<p>HBase Master负责管理所有的HRegion Server，而HBase中的所有RegionServer都是通过ZooKeeper来协调，并处理HBase服务器运行期间可能遇到的错误。</p>
<p>HBase Master Server本身并不存储HBase中的任何数据，HBase逻辑上的表可能会被划分成多个Region，然后存储到HRegion Server群中。HBase Master Server中存储的是从数据到HRegion Server的映射。</p>
<p><code>Client</code>：HBase Client 使用HBase的RPC机制与HMaster和HRegionServer进行通信：对于管理类操作，Client与HMaster进行RPC；对于数据读写类操作，Client与HRegionServer进行RPC。</p>
<p><code>Zookeeper</code>：Zookeeper Quorum中除了存储了-ROOT-表的地址和HMaster的地址，HRegionServer也会把自己以Ephemeral方式注册到 Zookeeper中，使得HMaster可以随时感知到各个HRegionServer的健康状态。此外，Zookeeper也避免了HMaster的 单点问题。</p>
<p><code>HMaster</code>：每台HRegionServer都会与HMaster进行通信，HMaster的主要任务就是要告诉每台HRegion Server它要维护哪些HRegion。当一台新的HRegionServer登录到HMaster时，HMaster会告诉它等待分配数据。而当一台HRegion死机时，HMaster会把它负责的HRegion标记为未分配，然后再把它们分配到其他的HRegion Server中。<br>HBase已经解决了HMaster单点故障问题（SPFO），并且HBase中可以启动多个HMaster，那么它就能够通过Zookeeper来保证系统中总有一个Master在运行。HMaster在功能上主要负责Table和Region的管理工作。</p>
<p> <code>HRegion</code>：当表的大小超过设置值得时候，HBase会自动地将表划分为不同的区域，每个区域包含所有行的一个子集。对用户来说，每个表是一堆数据的集合，靠主键来区分。从物理上来说，一张表被拆分成了多块，每一块就是一个HRegion。我们用表名+开始/结束主键来区分每一个HRegion，一个HRegion会保存一个表里面某段连续的数据，从开始主键到结束主键，一张完整的表格是保存在多个HRegion上面。 </p>
<ul>
<li>管理用户对Table的增删改查操作</li>
<li>管理HRegionServer的负载均衡，调整Region分布</li>
<li>在Region Split后，负责新Region的分配</li>
<li>在HRegionServer停机后，负责失效HRegionServer上的Region迁移</li>
</ul>
<p><code>HRegionServer</code>：主要负责响应用户I/O请求，向HDFS文件系统中读写数据，是HBase中最核心的模块。HRegionServer内部管理了一系列HRegion对象，每个HRegion对应了Table中的一个 Region，HRegion中由多个HStore组成。每个HStore对应了Table中的一个Column Family的存储，可以看出每个Column Family其实就是一个集中的存储单元，因此最好将具备共同IO特性的column放在一个Column Family中，这样最高效。</p>
<p><code>HStore</code>：存储是HBase存储的核心，其中由两部分组成，一部分是MemStore，一部分是StoreFiles。 MemStore是Sorted Memory Buffer，用户写入的数据首先会放入MemStore，当MemStore满了以后会Flush成一个StoreFile(底层实现是HFile)， 当StoreFile文件数量增长到一定阈值，会触发Compact合并操作，将多个StoreFiles合并成一个StoreFile，合并过程中会进行版本合并和数据删除，因此可以看出HBase其实只有增加数据，所有的更新和删除操作都是在后续的compact过程中进行的，这使得用户的写操作只要 进入内存中就可以立即返回，保证了HBase I/O的高性能。当StoreFiles Compact后，会逐步形成越来越大的StoreFile，当单个StoreFile大小超过一定阈值后，会触发Split操作，同时把当前 Region Split成2个Region，父Region会下线，新Split出的2个孩子Region会被HMaster分配到相应的HRegionServer 上，使得原先1个Region的压力得以分流到2个Region上。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="hadoop-安装"><a href="#hadoop-安装" class="headerlink" title="hadoop 安装"></a>hadoop 安装</h2><p><a href="https://hxqxiaoqi.gitee.io/2020/03/20/hadoop%20完全分布式搭建/#hadoop-安装">hadoop 分布式集群安装教程</a> ：hbase是基于hadoop的hdfs所设计的NoSql数据库，所以需要先安装hadoop集群</p>
<h2 id="zookeeper-安装"><a href="#zookeeper-安装" class="headerlink" title="zookeeper 安装"></a>zookeeper 安装</h2><p><a href="https://hxqxiaoqi.gitee.io/2019/09/03/zookeeper安装/">zookeeper 安装教程</a></p>
<h2 id="hbase-安装"><a href="#hbase-安装" class="headerlink" title="hbase 安装"></a>hbase 安装</h2><p><font color="32CD32">在 192.168.40.100 上操作：</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget https://mirror.bit.edu.cn/apache/hbase/stable/hbase-2.2.3-bin.tar.gz</span><br><span class="line">tar xf hbase-2.2.3-bin.tar.gz -C /opt/</span><br><span class="line"><span class="built_in">cd</span> /opt/hbase-2.2.3/conf/</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">修改 hbase-env.sh，添加以下内容：</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># jdk 环境变量</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/opt/jdk1.8.0_221</span><br><span class="line"><span class="comment"># hbase 配置目录环境变量</span></span><br><span class="line"><span class="built_in">export</span> HBASE_CLASSPATH=/opt/hbase-2.2.3/conf</span><br><span class="line"><span class="comment"># 关闭内部zookeeper，使用外部zookeeper的配置</span></span><br><span class="line"><span class="built_in">export</span> HBASE_MANAGES_ZK=<span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><font color="32CD32">修改 hbase-site.xml ：</font></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.unsafe.stream.capability.enforce<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.property.clientPort<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop0,hadoop1,hadoop2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.property.dataDir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/var/zookeeper<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://hadoop0:9000/hbase<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.cluster.distributed<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><font color="32CD32">修改 regionservers ：</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hadoop0</span><br><span class="line">hadoop1</span><br><span class="line">hadoop2</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">配置高可用</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"hadoop1"</span> &gt; /opt/hbase-2.2.3/conf/backup-masters</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">分发配置</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp -r /opt/hbase-2.2.3/ root@hadoop1:/opt/</span><br><span class="line">scp -r /opt/hbase-2.2.3/ root@hadoop2:/opt/</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">启动与关闭</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在master上启动集群</span></span><br><span class="line">/opt/hbase-2.2.3/bin/start-hbase.sh</span><br><span class="line">/opt/hbase-2.2.3/bin/stop-hbase.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单独启动master</span></span><br><span class="line">bin/hbase-daemon.sh start master</span><br><span class="line"><span class="comment"># 单独启动HRegionServer</span></span><br><span class="line">bin/hbase-daemon.sh start regionserver</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">访问</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://192.168.40.100:16010/</span><br></pre></td></tr></table></figure>

<h2 id="hbase-常用操作命令"><a href="#hbase-常用操作命令" class="headerlink" title="hbase 常用操作命令"></a>hbase 常用操作命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 登录hbase数据库</span></span><br><span class="line"><span class="built_in">cd</span> /opt/hbase-2.2.3/bin/</span><br><span class="line">./hbase shell</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出当前数据库中的所有namespace：</span></span><br><span class="line">&gt; list_namespace</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出hbase中的表：</span></span><br><span class="line">&gt; list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看帮助信息，找到创建的语法格式，注意要加上引号：</span></span><br><span class="line">&gt; <span class="built_in">help</span> <span class="string">'create_namespace'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建namespace：</span></span><br><span class="line">&gt; create_namespace <span class="string">'nstest'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 描述查看namespace的结构：</span></span><br><span class="line">&gt; drop_namespace <span class="string">'nstest'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建表，表名user，列簇info：</span></span><br><span class="line">示例：create <span class="string">'ns1:t1'</span>, &#123;NAME =&gt; <span class="string">'f1'</span>, VERSIONS =&gt; 5&#125;</span><br><span class="line"><span class="comment"># 1）ns1指的就是namespace</span></span><br><span class="line"><span class="comment"># 2）t1代表table_name</span></span><br><span class="line"><span class="comment"># 3）ns1:t1这样的格式就是唯一确定了一张表</span></span><br><span class="line"><span class="comment"># 4）在hbase中=&gt;符号表示等于</span></span><br><span class="line"><span class="comment"># 5）f指的是列簇，建表时要指定一个列簇</span></span><br><span class="line"><span class="comment"># 6）VERSIONS =&gt; 5代表同时能够存储的版本数</span></span><br><span class="line"><span class="comment"># 7）可以指定多个列簇，一个大括号中只能指定一个NAME（变量）</span></span><br><span class="line"><span class="comment"># 8）一个列簇就是一个大括号</span></span><br><span class="line"><span class="comment"># 9）在建表的时候可以指定在某个namespace下，比如：ns1:t1，没有指定就是在默认的数据库下面创建</span></span><br><span class="line">&gt; create <span class="string">'user'</span>,<span class="string">'info'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看表user的结构：</span></span><br><span class="line">&gt; describe <span class="string">'user'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 向表user中插入数据。表名user，rowkey为10001，列簇info，列名name等，cell值为zhangsan：</span></span><br><span class="line">&gt; put <span class="string">'user'</span>,<span class="string">'10001'</span>,<span class="string">'info:name'</span>,<span class="string">'zhangsan'</span></span><br><span class="line">&gt; put <span class="string">'user'</span>,<span class="string">'10001'</span>,<span class="string">'info:age'</span>,<span class="string">'25'</span></span><br><span class="line">&gt; put <span class="string">'user'</span>,<span class="string">'10001'</span>,<span class="string">'info:sex'</span>,<span class="string">'male'</span></span><br><span class="line">&gt; put <span class="string">'user'</span>,<span class="string">'10001'</span>,<span class="string">'info:address'</span>,<span class="string">'shanghai'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># HBase中的数据查询有三种方式：</span></span><br><span class="line"><span class="comment"># 1）依据rowkey查询，这是最快的，使用get命令；</span></span><br><span class="line"><span class="comment"># 2）依据范围查询，这是最常用的，使用scan range命令；</span></span><br><span class="line"><span class="comment"># 3）全表扫描，这是最慢的，使用scan命令。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询user表中rowkey为10001的信息：</span></span><br><span class="line">&gt; get <span class="string">'user'</span>,<span class="string">'10001'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询user表中rowkey为10001，列簇为info的信息：</span></span><br><span class="line">&gt; get <span class="string">'user'</span>,<span class="string">'10001'</span>,<span class="string">'info'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询user表中rowkey为10001，列簇为info，列名为name的信息：</span></span><br><span class="line">&gt; get <span class="string">'user'</span>,<span class="string">'10001'</span>,<span class="string">'info:name'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入rowkey为10002的信息：</span></span><br><span class="line">&gt; put <span class="string">'user'</span>,<span class="string">'10002'</span>,<span class="string">'info:name'</span>,<span class="string">'wangwu'</span></span><br><span class="line">&gt; put <span class="string">'user'</span>,<span class="string">'10002'</span>,<span class="string">'info:age'</span>,<span class="string">'30'</span></span><br><span class="line">&gt; put <span class="string">'user'</span>,<span class="string">'10002'</span>,<span class="string">'info:tel'</span>,<span class="string">'25354212'</span></span><br><span class="line">&gt; put <span class="string">'user'</span>,<span class="string">'10002'</span>,<span class="string">'info:qq'</span>,<span class="string">'232523551'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 全表扫描：</span></span><br><span class="line">&gt; scan</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全表扫描user表：</span></span><br><span class="line">&gt; scan <span class="string">'user'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入user表中列簇为10003的信息：</span></span><br><span class="line">&gt; put <span class="string">'user'</span>,<span class="string">'10003'</span>,<span class="string">'info:name'</span>,<span class="string">'zhaoliu'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 范围查询：查询user表中的name列和age列的信息：</span></span><br><span class="line">&gt; scan <span class="string">'user'</span>,&#123;COLUMNS =&gt; [<span class="string">'info:name'</span>,<span class="string">'info:age'</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 范围查询：查询user表中起始rowkey为10002开始的行信息：</span></span><br><span class="line">&gt; scan <span class="string">'user'</span>, &#123;STARTROW=&gt;<span class="string">'10002'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># STARTROW代表开始的行号，大括号中的所有变量都必须是大写：</span></span><br><span class="line">&gt; scan <span class="string">'ns1:t1'</span>, &#123;COLUMNS =&gt; [<span class="string">'c1'</span>, <span class="string">'c2'</span>], LIMIT =&gt; 10, STARTROW =&gt; <span class="string">'xyz'</span>&#125;</span><br><span class="line">&gt; scan <span class="string">'nstest:tb1'</span>, &#123;STARTROW =&gt; <span class="string">'20170521_10002'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># STOPROW代表结束的行号，包头不包尾：</span></span><br><span class="line">&gt; scan <span class="string">'nstest:tb1'</span>, &#123;STARTROW =&gt; <span class="string">'20170521_10001'</span>,STOPROW =&gt; <span class="string">'20170521_10003'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除user表中rowkey为10001，列簇为info，列名为name，值为zhangsan的数据（可能该值有多个版本）：</span></span><br><span class="line">&gt; delete <span class="string">'user'</span>,<span class="string">'10001'</span>,<span class="string">'info:name'</span>,<span class="string">'zhangsan'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除user表中rowkey为10001，列簇为info，列名为name的列数据：全表扫描user表：查看结果</span></span><br><span class="line">&gt; delete <span class="string">'user'</span>,<span class="string">'10001'</span>,<span class="string">'info:name'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除user表中rowkey为10001的全部信息：全表扫描user表：查看结果</span></span><br><span class="line">&gt; deleteall <span class="string">'user'</span>,<span class="string">'10001'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁用user表：</span></span><br><span class="line">&gt; <span class="built_in">disable</span> <span class="string">'user'</span></span><br><span class="line"><span class="comment"># 启用user表：</span></span><br><span class="line">&gt; <span class="built_in">enable</span> <span class="string">'user'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除user表：</span></span><br><span class="line">&gt; drop <span class="string">'user'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出hbase shell命令行：</span></span><br><span class="line">&gt; <span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除g开头的表,\ny：自动确认</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"disable_all 'g.*'\ny"</span> | /data/hbase-2.2.3/bin/hbase shell -n</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"drop_all 'g.*'\ny"</span> | /data/hbase-2.2.3/bin/hbase shell -n</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>iptables常用命令</title>
    <url>/2020/04/02/iptables%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p><strong>1、删除现有规则</strong></p>
<p>在开始建立新的规则之前，您可能需要清理所有默认规则和现有规则。使用<strong>iptables</strong>如下所示的命令来做这个。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -F 　　　　　　<span class="comment">#警告：当前命令后将切断linux对外的一切端口请求，请确保你还能连接到vnc或主机上</span></span><br><span class="line">(or)</span><br><span class="line">iptables --flush</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除单条记录</span></span><br><span class="line">iptables -nL --line-number</span><br><span class="line">iptables -D INPUT 2</span><br></pre></td></tr></table></figure>

<p><strong>2、设置默认链策略</strong></p>
<p>默认的<strong>iptables</strong>策略是ACCEPT。将此更改为如下所示。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -P INPUT DROP</span><br><span class="line">iptables -P FORWARD DROP</span><br><span class="line">iptables -P OUTPUT DROP</span><br></pre></td></tr></table></figure>

<p>当将INPUT和OUTPUT默认策略作为DROP时，对于每一个防火墙规则要求都应该定义两条规则。即一个INPUT和一个OUTPUT。<br>如果信任内部用户，则可以忽略上面OUTPUT的设置。默认情况下，不要丢弃所有OUTPUT的数据包。在这种情况下，对于每一个防火墙规则的要求，你只需要定义一个规则。即定义规则传入，因为传出是接受所有数据包。</p>
<p><strong>3、阻止一个特定的IP地址</strong></p>
<p>在我们做其他规则前，如果你想阻止一个特定的IP地址，你应该先做如下所示。当您在日志文件中找到特定的IP地址时发现一些奇怪的活动，并希望在进一步研究时暂时阻止该IP地址，这将很有帮助。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">BLOCK_THIS_IP=<span class="string">"192.168.1.108"</span></span><br><span class="line">iptables -A INPUT -s <span class="string">"<span class="variable">$BLOCK_THIS_IP</span>"</span> -j DROP</span><br></pre></td></tr></table></figure>

<p>你也可以使用下面的一种规则。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT -i eth0 -s <span class="string">"<span class="variable">$BLOCK_THIS_IP</span>"</span> -j DROP           //规则禁止这个IP地址对我们服务器eth0网卡的所有连接</span><br><span class="line">iptables -A INPUT -i eth0 -p tcp -s <span class="string">"<span class="variable">$BLOCK_THIS_IP</span>"</span> -j DROP   //规则只禁止这个IP地址对我们服务器eth0网卡的tcp协议的连接</span><br></pre></td></tr></table></figure>

<p><strong>4.允许所有传入SSH</strong></p>
<p>以下规则允许eth0接口上的所有传入的SSH连接。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT  -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -o eth0 -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure>

<p><strong>5.只能从一个特定的网络允许传入的SSH</strong></p>
<p>下面的规则只允许从网络192.168.100.X传入SSH连接。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT  -i eth0 -p tcp -s 192.168.100.0/24 --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -o eth0 -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure>

<p><strong>6.允许传入的HTTP和HTTPS</strong></p>
<p>以下规则允许所有传入的网络流量。即HTTP流量的端口80。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT  -i eth0 -p tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -o eth0 -p tcp --sport 80 -m state --state ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure>

<p>下面的规则允许所有传入安全的网络流量。即HTTPS流量的端口443。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT  -i eth0 -p tcp --dport 443 -m state --state NEW,ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -o eth0 -p tcp --sport 443 -m state --state ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure>

<p><strong>7.相结合多个规则使用多端口</strong></p>
<p>当你不是写为每个端口单独的规则，而是从外面的世界多个端口传入的连接，可以在一起使用多端口扩展。</p>
<p>下面的示例允许所有传入SSH，HTTP和HTTPS流量。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT  -i eth0 -p tcp -m multiport --dports 22,80,443 -m state --state NEW,ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -o eth0 -p tcp -m multiport --sports 22,80,443 -m state --state ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure>

<p><strong>8.允许OUTPUT SSH</strong></p>
<p>以下规则允许传出ssh连接。也就是说当你从内ssh到外部服务器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -A OUTPUT -o eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT  <span class="comment">#允许双方新建立的OUTPUT链通信</span></span><br><span class="line">iptables -A INPUT  -i eth0 -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT      <span class="comment">#只允许双方已经建立的INPUT链通信</span></span><br></pre></td></tr></table></figure>

<p><strong>9.允许拨出SSH到特定网络</strong></p>
<p>下面的规则只允许特定的网络传出的ssh连接。即你的SSH只有从内部网络192.168.100.0/24。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -A OUTPUT -o eth0 -p tcp -d 192.168.100.0/24 --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A INPUT  -i eth0 -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure>

<p><strong>10.允许拨出HTTPS</strong></p>
<p>以下规则允许传出安全的Web流量。当你想允许互联网流量的用户，这是很有帮助。在服务器上，当你想使用wget从外部下载一些文件，这些规则也有帮助。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -A OUTPUT -o eth0 -p tcp --dport 443 -m state --state NEW,ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A INPUT  -i eth0 -p tcp --sport 443 -m state --state ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure>

<p>注：对于传出HTTP Web流量，增加两个额外的规则就像上面，并改变443 80。</p>
<p><strong>11.负载均衡传入的Web流量</strong></p>
<p>您也可以加载使用<strong>iptables</strong>防火墙规则平衡传入的网络流量。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">This uses the iptables nth extension. The following example load balances the HTTPS traffic to three different ip-address. For every 3th packet, it is load balanced to the appropriate server (using the counter 0).</span><br><span class="line">iptables -A PREROUTING -i eth0 -p tcp --dport 443 -m state --state NEW -m nth --counter 0 --every 3 --packet 0 -j DNAT --to-destination 192.168.1.101:443</span><br><span class="line">iptables -A PREROUTING -i eth0 -p tcp --dport 443 -m state --state NEW -m nth --counter 0 --every 3 --packet 1 -j DNAT --to-destination 192.168.1.102:443</span><br><span class="line">iptables -A PREROUTING -i eth0 -p tcp --dport 443 -m state --state NEW -m nth --counter 0 --every 3 --packet 2 -j DNAT --to-destination 192.168.1.103:443</span><br></pre></td></tr></table></figure>

<p><strong>12.允许从外部到内部Ping</strong></p>
<p>以下规则允许外部用户能够ping您的服务器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT  -p icmp --icmp-type <span class="built_in">echo</span>-request -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p icmp --icmp-type <span class="built_in">echo</span>-reply -j ACCEPT</span><br></pre></td></tr></table></figure>

<p><strong>13.允许从内部到外部ping</strong></p>
<p>以下规则允许您从内部ping到任何外部服务器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -A OUTPUT -p icmp --icmp-type <span class="built_in">echo</span>-request -j ACCEPT</span><br><span class="line">iptables -A INPUT  -p icmp --icmp-type <span class="built_in">echo</span>-reply -j ACCEPT</span><br></pre></td></tr></table></figure>

<p><strong>14.允许环回访问</strong></p>
<p>您应该允许在服务器上进行完全环回访问。即使用127.0.0.1访问</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT -i lo -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -o lo -j ACCEPT</span><br></pre></td></tr></table></figure>

<p><strong>15.允许内部网络到外部网络</strong></p>
<p>在防火墙服务器上，一个以太网卡连接到外部网络，另一个以太网卡连接到内部服务器，请使用以下规则允许内部网络与外部网络通信。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在此示例中，eth1连接到外部网络（互联网），eth0连接到内部网络（例如：192.168.1.x）。</span></span><br><span class="line">iptables -A FORWARD -i eth0 -o eth1 -j ACCEPT</span><br></pre></td></tr></table></figure>

<p><strong>16.允许出站DNS</strong></p>
<p>以下规则允许传出DNS连接。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -A OUTPUT -p udp -o eth0 --dport 53 -j ACCEPT</span><br><span class="line">iptables -A INPUT  -p udp -i eth0 --sport 53 -j ACCEPT</span><br></pre></td></tr></table></figure>

<p><strong>17.允许NIS连接</strong></p>
<p>如果您正在运行NIS（网络信息服务）来管理您的用户帐户，您应该允许NIS连接。即使允许SSH连接，如果您不允许NIS相关的ypbind连接，用户将无法登录。</p>
<p>NIS端口是动态的。即当ypbind启动时，它分配端口。（<em>ypbind</em>是定义NIS服务器的客户端进程。）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#首先做一个rpcinfo -p如下所示并获取端口号。在此示例中，它使用端口853和850。</span></span><br><span class="line">rpcinfo -p | grep ypbind</span><br><span class="line"></span><br><span class="line"><span class="comment">#现在允许到端口111的入站连接，以及ypbind使用的端口。</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 111 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p udp --dport 111 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p tcp --dport 853 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p udp --dport 853 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p tcp --dport 850 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p udp --dport 850 -j ACCEPT</span><br></pre></td></tr></table></figure>

<p>以上不会工作，当你重新启动ypbind，因为它在不同的时间会有不同的端口号。</p>
<p>有两个解决方案：1）使用静态ip地址为您的NIS，或2）使用一些聪明的shell脚本技术来自动抓取动态端口号从“rpcinfo -p”命令输出，并使用上述<strong>iptables</strong>规则。</p>
<p><strong>18.允许Rsync来自特定网络</strong></p>
<p>以下规则仅允许来自特定网络的rsync。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT  -i eth0 -p tcp -s 192.168.101.0/24 --dport 873 -m state --state NEW,ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -o eth0 -p tcp --sport 873 -m state --state ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure>

<p><strong>19.仅允许来自特定网络的MySQL连接</strong></p>
<p>如果你正在运行MySQL，通常你不想允许从外部直接连接。在大多数情况下，您可能在运行MySQL数据库的同一服务器上运行Web服务器。</p>
<p>但是DBA和开发人员可能需要使用MySQL客户端从他们的笔记本电脑和桌面直接登录到MySQL。在这种情况下，您可能希望允许内部网络直接与MySQL通信，如下所示。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT  -i eth0 -p tcp -s 192.168.100.0/24 --dport 3306 -m state --state NEW,ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -o eth0 -p tcp --sport 3306 -m state --state ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure>

<p><strong>20.允许Sendmail或Postfix流量</strong></p>
<p>以下规则允许邮件通信。它可以是sendmail或postfix。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT  -i eth0 -p tcp --dport 25 -m state --state NEW,ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -o eth0 -p tcp --sport 25 -m state --state ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure>

<p><strong>21.允许IMAP和IMAPS</strong></p>
<p>以下规则允许IMAP / IMAP2流量。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT -i eth0 -p tcp --dport 143 -m state --state NEW,ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -o eth0 -p tcp --sport 143 -m state --state ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure>

<p>以下规则允许IMAPS流量。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT -i eth0 -p tcp --dport 993 -m state --state NEW,ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -o eth0 -p tcp --sport 993 -m state --state ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure>

<p><strong>22.允许POP3和POP3S</strong></p>
<p>以下规则允许POP3访问。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT  -i eth0 -p tcp --dport 110 -m state --state NEW,ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -o eth0 -p tcp --sport 110 -m state --state ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure>

<p>以下规则允许POP3S访问。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT  -i eth0 -p tcp --dport 995 -m state --state NEW,ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -o eth0 -p tcp --sport 995 -m state --state ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure>

<p><strong>23.防止DoS攻击</strong></p>
<p>以下<strong>iptables</strong>规则将帮助您防止对您的Web服务器的拒绝服务（DoS）攻击。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT -p tcp --dport 80 -m <span class="built_in">limit</span> --<span class="built_in">limit</span> 25/minute --<span class="built_in">limit</span>-burst 100 -j ACCEPT</span><br></pre></td></tr></table></figure>

<p>在上面的例子中：<br>　　-m limit：这使用限制<strong>iptables</strong>扩展<br>　　-limit 25 /分钟：每分钟最多只能连接25个请求包。根据您的具体要求更改此值<br>　　-limit-burst 100：此值指示仅在连接的总数达到limit之后才实施限制/分钟</p>
<p>注意“-m limit”只匹配数据包而不是连接，所以上方例子中你将匹配25包每分钟。</p>
<p>如果是想限制每分钟下connect次数呢。限制连接数的解决方案是使用connlimit匹配。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT -p tcp –syn –dport 80 -m connlimit –connlimit-above 15 –connlimit-mask 32 -j REJECT –reject-with tcp-reset</span><br></pre></td></tr></table></figure>

<p>它将拒绝来自一个源IP的15以上的连接 - 一个很好的规则来保护Web服务器。</p>
<p>此外，当与“hashlimit” 结合后在保护免受DDoS攻击时效果更好。</p>
<p>使用“limit”匹配，您可以限制每个时间间隔的数据包的全局速率，但是使用“hashlimit”，您可以限制每个IP，每个组合IP +端口等。</p>
<p>所以一个Web服务器的例子将是这样：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT -p tcp –dport 80 -m hashlimit –hashlimit 45/sec –hashlimit-burst 60 –hashlimit-mode srcip–hashlimit-name DDOS –hashlimit-htable-size 32768 –hashlimit-htable-max 32768 –hashlimit-htable-gcinterval 1000 –hashlimit-htable-expire 100000 -j ACCEPT</span><br></pre></td></tr></table></figure>

<p><strong>24. 端口转发</strong></p>
<p>例：将来自422端口的流量全部转到22端口。</p>
<p>这意味着我们既能通过422端口又能通过22端口进行ssh连接。启用DNAT转发。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -t nat -A PREROUTING -p tcp -d 192.168.102.37 --dport 422 -j DNAT --to 192.168.102.37:22</span><br></pre></td></tr></table></figure>

<p>除此之外，还需要允许连接到422端口的请求</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT -i eth0 -p tcp --dport 422 -m state --state NEW,ESTABLISHED -j ACCEPTiptables -A OUTPUT                   -o eth0 -p tcp --sport 422 -m state --state ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure>

<p><strong>25. 记录丢弃的数据表</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -N LOGGING   <span class="comment">#1.新建名为LOGGING的链</span></span><br><span class="line">iptables -A INPUT -j LOGGING  <span class="comment">#2.将所有来自INPUT链中的数据包跳转到LOGGING链中</span></span><br><span class="line">iptables -A LOGGING -m <span class="built_in">limit</span> --<span class="built_in">limit</span> 2/min -j LOG --<span class="built_in">log</span>-prefix <span class="string">"IPTables Packet Dropped: "</span> --<span class="built_in">log</span>-level 7  <span class="comment">#3.为这些包自定义个前缀，命名为”IPTables Packet Dropped”</span></span><br><span class="line">iptables -A LOGGING -j DROP   <span class="comment">#4.丢弃这些数据包</span></span><br></pre></td></tr></table></figure>

<p><strong>26. 例子</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@iZ233pgwujzZ ~]<span class="comment"># iptables-save</span></span><br><span class="line"><span class="comment"># Generated by iptables-save v1.4.7 on Wed May  6 14:27:04 2020</span></span><br><span class="line">*filter</span><br><span class="line">:INPUT ACCEPT [0:0]</span><br><span class="line">:FORWARD ACCEPT [0:0]</span><br><span class="line">:OUTPUT ACCEPT [670583527:153247221001]</span><br><span class="line"><span class="comment"># 允许指定IP访问所有服务</span></span><br><span class="line">-A INPUT -s 172.16.30.0/24 -p tcp -j ACCEPT</span><br><span class="line"><span class="comment"># 访问端口范围</span></span><br><span class="line">-A INPUT -s 192.168.40.1/32 -p tcp -m tcp --dport 1:65535 -j ACCEPT</span><br><span class="line"><span class="comment"># 意思是允许进入的数据包只能是刚刚我发出去的数据包的回应，ESTABLISHED：已建立的链接状态。RELATED：该数据包与本机发出的数据包有关。</span></span><br><span class="line">-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT </span><br><span class="line"><span class="comment"># 允许所有IP访问22端口</span></span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT</span><br><span class="line"><span class="comment"># 允许icmp和io</span></span><br><span class="line">-A INPUT -p icmp -j ACCEPT </span><br><span class="line">-A INPUT -i lo -j ACCEPT </span><br><span class="line"><span class="comment"># 这两内条的意思是在INPUT表和FORWARD表中拒绝所有其他不符合上述任何一条规则的容数据包。并且发送一条host prohibited的消息给被拒绝的主机。</span></span><br><span class="line">-A INPUT -j REJECT --reject-with icmp-host-prohibited </span><br><span class="line">-A FORWARD -j REJECT --reject-with icmp-host-prohibited </span><br><span class="line">COMMIT</span><br><span class="line"><span class="comment"># Completed on Wed May  6 14:27:04 2020</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux基础</category>
      </categories>
      <tags>
        <tag>iptables</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s之ingress-nginx</title>
    <url>/2020/07/09/k8s%E4%B9%8Bingress-nginx/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><strong>Ingress是什么？</strong></p>
<p>ingress 是除了 hostport  nodeport  clusterIP以及云环境专有的负载均衡器外的访问方式,官方提供了Nginx ingress controller。ingress-nginx本身就是nodeport模式</p>
<p><strong>Ingress能做什么？</strong></p>
<p>k8s中，不管是哪种类型的svc，不管是用iptables还是ipvs实现端口转发实现负载均衡，也只是实现了四层的负载均衡，但是，如果有需求要进行七层负载均衡呢？比如你想将你的网站设置为https呢？Ingress就是来帮你解决此问题的。</p>
<p><strong>Ingress工作原理及主要组成部分？</strong></p>
<p>工作原理：</p>
<p>类似于Nginx，可以理解为在Ingress建立一个个映射规则，Ingress Controller通过监听Ingress这个api对象里的规则并转化为Nginx/HAporxy等的配置，然后对外部提供服务。</p>
<p>组成部分：</p>
<p>ingress controller：</p>
<p>核心是一个deployment，实现方式有很多种，比如Nignx、HAproxy、trafik、lstio，需要编写的yaml有：Deployment、Service、ConfigMap、ServiceAccount(Auth)，其中Service类型可以是NodePort或者LoadBalance</p>
<p>ingress resources：这个是类型为ingress的k8s api对象，主要面向开发人员。</p>
<h1 id="nginx-ingress-controller-yaml部署"><a href="#nginx-ingress-controller-yaml部署" class="headerlink" title="nginx-ingress-controller yaml部署"></a>nginx-ingress-controller yaml部署</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line">    <span class="string">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="string">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-configuration</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line">    <span class="string">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="string">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">tcp-services</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line">    <span class="string">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="string">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">udp-services</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line">    <span class="string">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="string">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-ingress-serviceaccount</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line">    <span class="string">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="string">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-ingress-clusterrole</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line">    <span class="string">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="string">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="attr">  - apiGroups:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">""</span></span><br><span class="line"><span class="attr">    resources:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">configmaps</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">endpoints</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">nodes</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">pods</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">secrets</span></span><br><span class="line"><span class="attr">    verbs:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">list</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">watch</span></span><br><span class="line"><span class="attr">  - apiGroups:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">""</span></span><br><span class="line"><span class="attr">    resources:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">nodes</span></span><br><span class="line"><span class="attr">    verbs:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">get</span></span><br><span class="line"><span class="attr">  - apiGroups:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">""</span></span><br><span class="line"><span class="attr">    resources:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">services</span></span><br><span class="line"><span class="attr">    verbs:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">get</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">list</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">watch</span></span><br><span class="line"><span class="attr">  - apiGroups:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">""</span></span><br><span class="line"><span class="attr">    resources:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">events</span></span><br><span class="line"><span class="attr">    verbs:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">create</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">patch</span></span><br><span class="line"><span class="attr">  - apiGroups:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"extensions"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"networking.k8s.io"</span></span><br><span class="line"><span class="attr">    resources:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">ingresses</span></span><br><span class="line"><span class="attr">    verbs:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">get</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">list</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">watch</span></span><br><span class="line"><span class="attr">  - apiGroups:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"extensions"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"networking.k8s.io"</span></span><br><span class="line"><span class="attr">    resources:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">ingresses/status</span></span><br><span class="line"><span class="attr">    verbs:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">update</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-ingress-role</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line">    <span class="string">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="string">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="attr">  - apiGroups:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">""</span></span><br><span class="line"><span class="attr">    resources:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">configmaps</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">pods</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">secrets</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">namespaces</span></span><br><span class="line"><span class="attr">    verbs:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">get</span></span><br><span class="line"><span class="attr">  - apiGroups:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">""</span></span><br><span class="line"><span class="attr">    resources:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">configmaps</span></span><br><span class="line"><span class="attr">    resourceNames:</span></span><br><span class="line">      <span class="comment"># Defaults to "&lt;election-id&gt;-&lt;ingress-class&gt;"</span></span><br><span class="line">      <span class="comment"># Here: "&lt;ingress-controller-leader&gt;-&lt;nginx&gt;"</span></span><br><span class="line">      <span class="comment"># This has to be adapted if you change either parameter</span></span><br><span class="line">      <span class="comment"># when launching the nginx-ingress-controller.</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"ingress-controller-leader-nginx"</span></span><br><span class="line"><span class="attr">    verbs:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">get</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">update</span></span><br><span class="line"><span class="attr">  - apiGroups:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">""</span></span><br><span class="line"><span class="attr">    resources:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">configmaps</span></span><br><span class="line"><span class="attr">    verbs:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">create</span></span><br><span class="line"><span class="attr">  - apiGroups:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">""</span></span><br><span class="line"><span class="attr">    resources:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">endpoints</span></span><br><span class="line"><span class="attr">    verbs:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">get</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-ingress-role-nisa-binding</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line">    <span class="string">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="string">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line"><span class="attr">  apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"><span class="attr">  kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-ingress-role</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="attr">  - kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">nginx-ingress-serviceaccount</span></span><br><span class="line"><span class="attr">    namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-ingress-clusterrole-nisa-binding</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line">    <span class="string">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="string">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line"><span class="attr">  apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"><span class="attr">  kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-ingress-clusterrole</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="attr">  - kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">nginx-ingress-serviceaccount</span></span><br><span class="line"><span class="attr">    namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-ingress-controller</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line">    <span class="string">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="string">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line">      <span class="string">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">      <span class="string">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line">        <span class="string">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">        <span class="string">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">      annotations:</span></span><br><span class="line">        <span class="string">prometheus.io/port:</span> <span class="string">"10254"</span></span><br><span class="line">        <span class="string">prometheus.io/scrape:</span> <span class="string">"true"</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line">      <span class="comment"># wait up to five minutes for the drain of connections</span></span><br><span class="line"><span class="attr">      hostNetwork:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      terminationGracePeriodSeconds:</span> <span class="number">300</span></span><br><span class="line"><span class="attr">      serviceAccountName:</span> <span class="string">nginx-ingress-serviceaccount</span></span><br><span class="line"><span class="attr">      nodeSelector:</span></span><br><span class="line">        <span class="string">kubernetes.io/os:</span> <span class="string">linux</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">nginx-ingress-controller</span></span><br><span class="line"><span class="attr">          image:</span> <span class="string">bitnami/nginx-ingress-controller:0.26.2</span></span><br><span class="line"><span class="attr">          args:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">/nginx-ingress-controller</span></span><br><span class="line"><span class="bullet">            -</span> <span class="bullet">--configmap=$(POD_NAMESPACE)/nginx-configuration</span></span><br><span class="line"><span class="bullet">            -</span> <span class="bullet">--tcp-services-configmap=$(POD_NAMESPACE)/tcp-services</span></span><br><span class="line"><span class="bullet">            -</span> <span class="bullet">--udp-services-configmap=$(POD_NAMESPACE)/udp-services</span></span><br><span class="line"><span class="bullet">            -</span> <span class="bullet">--publish-service=$(POD_NAMESPACE)/ingress-nginx</span></span><br><span class="line"><span class="bullet">            -</span> <span class="bullet">--annotations-prefix=nginx.ingress.kubernetes.io</span></span><br><span class="line"><span class="attr">          securityContext:</span></span><br><span class="line"><span class="attr">            allowPrivilegeEscalation:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">            capabilities:</span></span><br><span class="line"><span class="attr">              drop:</span></span><br><span class="line"><span class="bullet">                -</span> <span class="string">ALL</span></span><br><span class="line"><span class="attr">              add:</span></span><br><span class="line"><span class="bullet">                -</span> <span class="string">NET_BIND_SERVICE</span></span><br><span class="line">            <span class="comment"># www-data -&gt; 33</span></span><br><span class="line"><span class="attr">            runAsUser:</span> <span class="number">33</span></span><br><span class="line"><span class="attr">          env:</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">POD_NAME</span></span><br><span class="line"><span class="attr">              valueFrom:</span></span><br><span class="line"><span class="attr">                fieldRef:</span></span><br><span class="line"><span class="attr">                  fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">POD_NAMESPACE</span></span><br><span class="line"><span class="attr">              valueFrom:</span></span><br><span class="line"><span class="attr">                fieldRef:</span></span><br><span class="line"><span class="attr">                  fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line"><span class="attr">          ports:</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">http</span></span><br><span class="line"><span class="attr">              containerPort:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">              protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">https</span></span><br><span class="line"><span class="attr">              containerPort:</span> <span class="number">443</span></span><br><span class="line"><span class="attr">              protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">          livenessProbe:</span></span><br><span class="line"><span class="attr">            failureThreshold:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">            httpGet:</span></span><br><span class="line"><span class="attr">              path:</span> <span class="string">/healthz</span></span><br><span class="line"><span class="attr">              port:</span> <span class="number">10254</span></span><br><span class="line"><span class="attr">              scheme:</span> <span class="string">HTTP</span></span><br><span class="line"><span class="attr">            initialDelaySeconds:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">            periodSeconds:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">            successThreshold:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">            timeoutSeconds:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">          readinessProbe:</span></span><br><span class="line"><span class="attr">            failureThreshold:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">            httpGet:</span></span><br><span class="line"><span class="attr">              path:</span> <span class="string">/healthz</span></span><br><span class="line"><span class="attr">              port:</span> <span class="number">10254</span></span><br><span class="line"><span class="attr">              scheme:</span> <span class="string">HTTP</span></span><br><span class="line"><span class="attr">            periodSeconds:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">            successThreshold:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">            timeoutSeconds:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">          lifecycle:</span></span><br><span class="line"><span class="attr">            preStop:</span></span><br><span class="line"><span class="attr">              exec:</span></span><br><span class="line"><span class="attr">                command:</span></span><br><span class="line"><span class="bullet">                  -</span> <span class="string">/wait-shutdown</span></span><br></pre></td></tr></table></figure>

<h1 id="ingress-配置"><a href="#ingress-配置" class="headerlink" title="ingress 配置"></a>ingress 配置</h1><h2 id="示例一：暴露域名"><a href="#示例一：暴露域名" class="headerlink" title="示例一：暴露域名"></a>示例一：暴露域名</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">ingress1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">  - host:</span> <span class="string">www1.wuzi.com</span></span><br><span class="line"><span class="attr">    http:</span></span><br><span class="line"><span class="attr">      paths:</span></span><br><span class="line"><span class="attr">      - path:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">        backend:</span></span><br><span class="line"><span class="attr">          serviceName:</span> <span class="string">ingress-svc1</span></span><br><span class="line"><span class="attr">          servicePort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>

<h2 id="示例二：暴露ip"><a href="#示例二：暴露ip" class="headerlink" title="示例二：暴露ip"></a>示例二：暴露ip</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">gw</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">b2b-test</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line">    <span class="string">kubernetes.io/ingress.class:</span> <span class="string">"nginx"</span></span><br><span class="line">    <span class="comment"># 地址重写</span></span><br><span class="line">    <span class="string">nginx.ingress.kubernetes.io/rewrite-target:</span> <span class="string">/$2</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">  - http:</span></span><br><span class="line"><span class="attr">      paths:</span></span><br><span class="line">      <span class="comment"># 绑定的svc内容。可以配置多个</span></span><br><span class="line"><span class="attr">        - backend:</span></span><br><span class="line"><span class="attr">            serviceName:</span> <span class="string">mmhsy-gateway</span></span><br><span class="line"><span class="attr">            servicePort:</span> <span class="number">9900</span></span><br><span class="line"><span class="attr">          path:</span> <span class="string">/b2b-gw(/|$)(.*)</span></span><br><span class="line"><span class="attr">        - backend:</span></span><br><span class="line"><span class="attr">            serviceName:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">            servicePort:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">          path:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure>

<h2 id="示例三：https配置"><a href="#示例三：https配置" class="headerlink" title="示例三：https配置"></a>示例三：https配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 创建私钥key</span></span><br><span class="line">openssl genrsa -des3 -out server.key 2048</span><br><span class="line"><span class="comment">## 创建csr请求</span></span><br><span class="line">openssl req -new -key server.key -out server.csr</span><br><span class="line"><span class="comment">## 去除私钥的连接密码</span></span><br><span class="line">cp server.key&#123;,.org&#125;</span><br><span class="line">openssl rsa -<span class="keyword">in</span> server.key.org -out server.key</span><br><span class="line"><span class="comment">## 生成证书文件</span></span><br><span class="line">openssl x509 -req -days 3650 -<span class="keyword">in</span> server.csr -signkey server.key -out server.crt</span><br><span class="line"><span class="comment">## 生成tls格式</span></span><br><span class="line">kubectl create secret tls tls-secret --key server.key --cert server.crt</span><br></pre></td></tr></table></figure>

<p>ingress引用tls证书</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">ingress-https</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  tls:</span></span><br><span class="line"><span class="attr">  - hosts:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">www3.wuzi.com</span></span><br><span class="line"><span class="attr">    secretName:</span> <span class="string">tls-secret</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">  - host:</span> <span class="string">www3.wuzi.com</span></span><br><span class="line"><span class="attr">    http:</span></span><br><span class="line"><span class="attr">      paths:</span></span><br><span class="line"><span class="attr">      - path:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">        backend:</span></span><br><span class="line"><span class="attr">          serviceName:</span> <span class="string">ingress-https</span></span><br><span class="line"><span class="attr">          servicePort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>

<h2 id="示例四：重写"><a href="#示例四：重写" class="headerlink" title="示例四：重写"></a>示例四：重写</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line">    <span class="string">nginx.ingress.kubernetes.io/rewrite-target:</span> <span class="attr">https://www3.wuzi.com:31087</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">rewrite</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">  - host:</span> <span class="string">www5.wuzi.com</span></span><br><span class="line"><span class="attr">    http:</span></span><br><span class="line"><span class="attr">      paths:</span></span><br><span class="line"><span class="attr">      - backend:</span></span><br><span class="line"><span class="attr">          serviceName:</span> <span class="string">ingress-svc1</span></span><br><span class="line"><span class="attr">          servicePort:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">        path:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>kubeadm部署</title>
    <url>/2019/09/17/k8s%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p> Kubernetes是当今最流行的开源容器管理平台，它就是大名鼎鼎的Google Borg的开源版本。Google在2014年推出了Kubernetes，本文发布时最新的版本是1.11。</p>
<p>Kubernetes源于希腊语，意为舵手，K8S是一个简称，因为首尾字母中间正好有8个字母。基于容器技术，Kubernetes可以方便的进行集群应用的部署、扩容、缩容、自愈机制、服务发现、负载均衡、日志、监控等功能，大大减少日常运维的工作量。</p>
<p>Kubernetes所有的操作都可以通过Kubernetes API来进行，通过API来操作Kubernetes中的对象，包括Pod、Service、Volume、Namespace等等。</p>
<h1 id="组件说明"><a href="#组件说明" class="headerlink" title="组件说明"></a>组件说明</h1><p><font color="98F5FF">API Server：</font>整个集群管理的 API 接口，所有对集群进行的查询和管理都要通过 API 来进行集群内部各个模块之间通信的枢纽，所有模块之前并不会之间互相调用，而是通过和 API Server 打交道来完成自己那部分的工作集群安全控制，API Server 提供的验证和授权保证了整个集群的安全。</p>
<p><font color="98F5FF">Kube Proxy：</font>负责为pod提供代理。它会定期从etcd获取所有的service，并根据service信息创建代理。当某个客户pod要访问其他pod时，访问请求会经过本机proxy做转发。</p>
<p><font color="98F5FF">Scheduler：</font>负责集群的资源调度,跟踪集群中所有Node的资源利用情况,对新创建的pod，采取合适的调度策略，进行均衡的调度到合适的节点上。</p>
<p><font color="98F5FF">etcd：</font>Kubernetes所有的配置数据存储在etcd中；所有组件通过API Server和etcd打交道。</p>
<p><font color="98F5FF">Controller Manager：</font>主要负责集群的故障检测和恢复的自动化，它内部的组件如下:<br>1.endpointController:定期关联service和pod，关联信息由endpoint负责创建和更新。<br>2.ReplicationController:完成pod的复制或移除，以确保ReplicationController定义的复本数量与实际运行pod的数量一致性</p>
<p><font color="98F5FF">CoreDNS：</font>Kubernetes包括用于服务发现的DNS服务器Kube-DNS。 该DNS服务器利用SkyDNS的库来为Kubernetes pod和服务提供DNS请求。在这种灵活的模型中添加对Kubernetes的支持，相当于创建了一个Kubernetes中间件。该中间件使用Kubernetes API来满足针对特定Kubernetes pod或服务的DNS请求。而且由于Kube-DNS作为Kubernetes的另一项服务，kubelet和Kube-DNS之间没有紧密的绑定。您只需要将DNS服务的IP地址和域名传递给kubelet，而Kubernetes并不关心谁在实际处理该IP请求。</p>
<p><font color="98F5FF">pause：</font>我们看下在node节点上都会起很多pause容器，和pod是一一对应的。每个Pod里运行着一个特殊的被称之为Pause的容器，其他容器则为业务容器，这些业务容器共享Pause容器的网络栈和Volume挂载卷，因此他们之间通信和数据交换更为高效，在设计时我们可以充分利用这一特性将一组密切相关的服务进程放入同一个Pod中。同一个Pod里的容器之间仅需通过localhost就能互相通信。</p>
<p><font color="98F5FF">Flannel：</font>通过给每台宿主机分配一个子网的方式为容器提供虚拟网络，它基于Linux TUN/TAP，使用UDP封装IP包来创建overlay网络，并借助etcd维护网络的分配情况。简单说就是给pod分配ip的。</p>
<p><font color="98F5FF">kubelet：</font>每个node上都会启动一个kubelet服务进程，相当于agent进程，该进程用于处理master节点下发到本节点的任务，管理Pod及Pod中的容器，同时Kubelet进程会在API Server上注册节点自身的信息，定期向Master节点汇报节点的资源情况，并通过cAdvise监控容器和节点资源；它负责创建和销毁Pod，通过探针监测Pod的状态，并通过cAdvise监控Pod的状态。</p>
<p><font color="98F5FF">kubeadm：</font>k8s的一键安装工具。</p>
<p><font color="98F5FF">kubectl：</font>通过apiserver组件向整个集群內发送控制命令的管理工具。</p>
<p><font color="98F5FF">service：</font>是pod的路由代理抽象，用于解决pod之间的服务发现问题，即上下游pod之间使用的问题。传统部署方式中，实例所在的主机ip（或者dns名字）一般是不会改变的，但是pod的运行状态可动态变化(比如容器重启、切换机器了、缩容过程中被终止了等)，所以访问端不能以写死IP的方式去访问该pod提供的服务。service的引入旨在保证pod的动态变化对访问端透明，访问端只需要知道service的地址，由service来提供代理。Service分为三类：ClusterIP，NodePort，LoadBalancer。</p>
<p><font color="98F5FF">Pod：</font>Pod是kubernetes集群中的最小单元，可以运行一个或多个容器，Pod对外共享一个ip，通过livenessProbe探针监测容器是否健康，另外一类是readinessProbe探针来判断容器是否启动完成。</p>
<p><font color="98F5FF">Deployment：</font>为Pod和Replica Set提供声明式更新。你只需要在 Deployment 中描述您想要的目标状态是什么，Deployment controller 就会帮您将 Pod 和ReplicaSet 的实际状态改变到您的目标状态。您可以定义一个全新的</p>
<h1 id="kubeadm部署"><a href="#kubeadm部署" class="headerlink" title="kubeadm部署"></a>kubeadm部署</h1><h2 id="环境准备（所有节点都要操作）"><a href="#环境准备（所有节点都要操作）" class="headerlink" title="环境准备（所有节点都要操作）"></a>环境准备（所有节点都要操作）</h2><p>实验虚拟机：<br>k8s-master：192.168.40.100<br>k8s-node1：192.168.40.101<br>k8s-node2：192.168.40.102 </p>
<p><strong>设置主机名：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostnamectl <span class="built_in">set</span>-hostname k8s-master</span><br><span class="line">hostnamectl <span class="built_in">set</span>-hostname k8s-node1</span><br><span class="line">hostnamectl <span class="built_in">set</span>-hostname k8s-node2</span><br></pre></td></tr></table></figure>

<p><strong>配置hosts文件解析：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &gt;&gt; /etc/hosts &lt;&lt; EOF</span><br><span class="line">192.168.40.100 k8s-master</span><br><span class="line">192.168.40.101 k8s-node1</span><br><span class="line">192.168.40.102 k8s-node2</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p><strong>关闭防火墙和selinux：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld &amp;&amp; systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line">sed -i <span class="string">'s/^SELINUX=enforcing$/SELINUX=disabled/'</span> /etc/selinux/config &amp;&amp; setenforce 0</span><br></pre></td></tr></table></figure>

<p><strong>关闭swap：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">swapoff -a </span><br><span class="line">sed -i <span class="string">'s/.*swap.*/#&amp;/'</span> /etc/fstab</span><br></pre></td></tr></table></figure>

<p><strong>设置网桥包经过iptalbes：</strong><br>RHEL / CentOS 7上的一些用户报告了由于iptables被绕过而导致流量路由不正确的问题。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建/etc/sysctl.d/k8s.conf文件，添加如下内容</span></span><br><span class="line">cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf</span><br><span class="line">vm.swappiness = 0</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使配置生效</span></span><br><span class="line">modprobe br_netfilter</span><br><span class="line">sysctl -p /etc/sysctl.d/k8s.conf</span><br></pre></td></tr></table></figure>

<p><strong>kube-proxy开启ipvs的前提条件：</strong><br>由于ipvs已经加入到了内核的主干，所以为kube-proxy开启ipvs的前提需要加载以下的内核模块：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;EOF</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">modprobe -- ip_vs</span><br><span class="line">modprobe -- ip_vs_rr</span><br><span class="line">modprobe -- ip_vs_wrr</span><br><span class="line">modprobe -- ip_vs_sh</span><br><span class="line">modprobe -- nf_conntrack_ipv4</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行脚本</span></span><br><span class="line">chmod 755 /etc/sysconfig/modules/ipvs.modules &amp;&amp; bash /etc/sysconfig/modules/ipvs.modules &amp;&amp; lsmod | grep -e ip_vs -e nf_conntrack_ipv4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否已经正确加载所需的内核模块</span></span><br><span class="line">lsmod | grep -e ip_vs -e nf_conntrack_ipv4</span><br></pre></td></tr></table></figure>

<p><strong>安装ipvsadm：</strong><br>接下来还需要确保各个节点上已经安装了ipset软件包，为了便于查看ipvs的代理规则。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install ipset ipvsadm</span><br></pre></td></tr></table></figure>

<p><strong>安装Docker：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install yum-utils</span><br><span class="line"></span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line">yum install -y docker-ce-18.06.1.ce</span><br><span class="line"></span><br><span class="line">systemctl start docker &amp;&amp; systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure>

<p><strong>配置kubernetes源：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p><strong>安装kubeadm、kubelet、kubectl：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y kubelet-1.13.1 </span><br><span class="line">yum install -y kubeadm-1.13.1 </span><br><span class="line">yum install -y kubectl-1.13.1</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet &amp;&amp; systemctl start kubelet</span><br></pre></td></tr></table></figure>

<h2 id="设置时间同步"><a href="#设置时间同步" class="headerlink" title="设置时间同步"></a>设置时间同步</h2><p><strong>配置k8s-master节点：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装chrony：</span></span><br><span class="line">yum install -y chrony</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注释默认ntp服务器</span></span><br><span class="line">sed -i <span class="string">'s/^server/#&amp;/'</span> /etc/chrony.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定上游公共 ntp 服务器，并允许其他节点同步时间</span></span><br><span class="line">cat &gt;&gt; /etc/chrony.conf &lt;&lt; EOF</span><br><span class="line">server 0.asia.pool.ntp.org iburst</span><br><span class="line">server 1.asia.pool.ntp.org iburst</span><br><span class="line">server 2.asia.pool.ntp.org iburst</span><br><span class="line">server 3.asia.pool.ntp.org iburst</span><br><span class="line">allow all</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启chronyd服务并设为开机启动：</span></span><br><span class="line">systemctl <span class="built_in">enable</span> chronyd &amp;&amp; systemctl restart chronyd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启网络时间同步功能</span></span><br><span class="line">timedatectl <span class="built_in">set</span>-ntp <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><strong>配置k8s-node节点：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装chrony：</span></span><br><span class="line">yum install -y chrony</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注释默认服务器</span></span><br><span class="line">sed -i <span class="string">'s/^server/#&amp;/'</span> /etc/chrony.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定内网 master节点为上游NTP服务器</span></span><br><span class="line"><span class="built_in">echo</span> server 192.168.40.100 iburst &gt;&gt; /etc/chrony.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启服务并设为开机启动：</span></span><br><span class="line">systemctl <span class="built_in">enable</span> chronyd &amp;&amp; systemctl restart chronyd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有节点执行，查看是否同步成功</span></span><br><span class="line">chronyc sources</span><br></pre></td></tr></table></figure>

<h2 id="master节点操作"><a href="#master节点操作" class="headerlink" title="master节点操作"></a>master节点操作</h2><p><strong>初始化k8s-master：</strong><br>初始化过程需要下载镜像，要等待几分钟，注意更改主机IP。<br>注意：如果cpu需要2核，否则会报错。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化，成功后会生成节点加入集群的命令，保存下来</span></span><br><span class="line">kubeadm init --apiserver-advertise-address=192.168.40.100 --image-repository registry.aliyuncs.com/google_containers --kubernetes-version v1.13.1 --pod-network-cidr=10.244.0.0/16</span><br><span class="line"></span><br><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看集群状态</span></span><br><span class="line">kubectl get cs</span><br></pre></td></tr></table></figure>

<p><strong>下载flannel网络插件：</strong><br>如果网络不好，需要耐心等待flannel进行下载完成</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装flannel插件</span></span><br><span class="line">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看coredns是否运行</span></span><br><span class="line">kubectl get pod -n kube-system -o wide</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果节点Ready状态，即表示运行正常</span></span><br><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure>

<h2 id="node操作加入集群"><a href="#node操作加入集群" class="headerlink" title="node操作加入集群"></a>node操作加入集群</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行，这是master节点出生成功后生成的</span></span><br><span class="line">kubeadm join 192.168.40.100:6443 --token 0jxnxc.5pn1l3z931kcdqzv --discovery-token-ca-cert-hash sha256:d3de7befd0aa46d999c8f3a4880e45b7f4ab87dafa54c39232078b6cec5b1833</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果执行kubeadm init时没有记录下加入集群的命令，可以通过以下命令重新创建</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看节点，如果node显示，则成功</span></span><br><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure>

<h1 id="kubectl命令"><a href="#kubectl命令" class="headerlink" title="kubectl命令"></a>kubectl命令</h1><p>获取节点相应服务的信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get pods</span><br></pre></td></tr></table></figure>

<p>查看集群信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl cluster-info</span><br></pre></td></tr></table></figure>

<p>查看各组件信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get cs</span><br></pre></td></tr></table></figure>

<p>查看pods所在的运行节点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get pods -o wide</span><br></pre></td></tr></table></figure>

<p>查看pods定义的详细信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get pods -o yaml</span><br></pre></td></tr></table></figure>

<p>查看运行的pod的环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl <span class="built_in">exec</span> pod名 env</span><br></pre></td></tr></table></figure>

<p>查看指定pod的日志</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl logs -f pods/heapster-xxxxx</span><br></pre></td></tr></table></figure>

<p>创建资源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create -f 文件名.yaml</span><br></pre></td></tr></table></figure>

<p>重建资源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl replace -f 文件名  [--force]</span><br></pre></td></tr></table></figure>

<p>删除资源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl delete -f 文件名</span><br><span class="line">kubectl delete pod pod名</span><br><span class="line">kubectl delete rc rc名</span><br><span class="line">kubectl delete service service名</span><br><span class="line">kubectl delete pod --all</span><br></pre></td></tr></table></figure>

<p>查看所有service</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get services kubernetes-dashboard -n kube-system</span><br></pre></td></tr></table></figure>

<p>查看所有发布</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get deployment kubernetes-dashboard -n kube-system</span><br></pre></td></tr></table></figure>

<p>查看所有pod</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get pods --all-namespaces</span><br></pre></td></tr></table></figure>

<p>查看所有pod的IP及节点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get pods -o wide --all-namespaces </span><br><span class="line">kubectl get pods -n kube-system | grep dashboard</span><br></pre></td></tr></table></figure>

<p>查看指定资源详细描述信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl describe svc --namespace=<span class="string">"kube-system"</span></span><br></pre></td></tr></table></figure>

<p>指定类型查看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl describe pods/kubernetes-dashboard-349859023-g6q8c --namespace=<span class="string">"kube-system"</span></span><br></pre></td></tr></table></figure>

<p>查看pod详细信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl describe pod nginx-772ai</span><br></pre></td></tr></table></figure>

<p>动态伸缩</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl scale rc nginx --replicas=5</span><br></pre></td></tr></table></figure>

<p>动态伸缩</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl scale deployment redis-slave --replicas=5</span><br></pre></td></tr></table></figure>

<p>动态伸缩</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl scale --replicas=2 -f redis-slave-deployment.yaml</span><br></pre></td></tr></table></figure>

<p>进入pod容器<br>注：/bin/bash如果不能进入，可以换成sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl <span class="built_in">exec</span> -it redis-master-1033017107-q47hh /bin/bash</span><br></pre></td></tr></table></figure>

<p>增加lable值 [key]=[value]</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl label pod redis-master-1033017107-q47hh role=master</span><br></pre></td></tr></table></figure>

<p>删除lable值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl label pod redis-master-1033017107-q47hh role-</span><br></pre></td></tr></table></figure>

<p>修改lable值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl label pod redis-master-1033017107-q47hh role=backend --overwrite</span><br></pre></td></tr></table></figure>

<p>指定pod在哪个节点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl label nodes node1 zone=north</span><br></pre></td></tr></table></figure>

<p>配置文件滚动升级</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl rolling-update redis-master -f redis-master-controller-v2.yaml</span><br></pre></td></tr></table></figure>

<p>命令升级</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl rolling-update redis-master --image=redis-master:2.0</span><br></pre></td></tr></table></figure>

<p>pod版本回滚</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl rolling-update redis-master --image=redis-master:1.0 --rollback</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>kafka 集群搭建</title>
    <url>/2020/03/25/kafka%20%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>kafka 是一个分布式的消息队列系统，消息以topic分类传输，生产者往topic发送消息时，消息会被分散到topic的不同分区中，消费者以组的形式消费topic中的数据，一个topic的一个分区，只能被同一个组里的一个消费者消费，但同一个消费者，可以消费多个分区数据，每个组自己维护topic每个分区的消费偏移量。</p>
<p>kafka 不能保证不同分区消息的消费顺序，因此若对于消息消费顺序有要求，必须确保该类消息处于同一分区，可以通过发送消息时，指定相同key来处理。</p>
<h1 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h1><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p><font color="32CD32">配置hosts文件，让集群服务器间互相使用主机名访问</font></p>
<table>
<thead>
<tr>
<th align="center">服务器ip</th>
<th align="center">主机名</th>
<th align="center">服务</th>
<th align="center">安装目录</th>
</tr>
</thead>
<tbody><tr>
<td align="center">192.168.40.100</td>
<td align="center">kafka0</td>
<td align="center">kafka，zookeeper，jdk8</td>
<td align="center">/opt</td>
</tr>
<tr>
<td align="center">192.168.40.101</td>
<td align="center">kafka1</td>
<td align="center">kafka，zookeeper，jdk8</td>
<td align="center">/opt</td>
</tr>
<tr>
<td align="center">192.168.40.102</td>
<td align="center">kafka2</td>
<td align="center">kafka，zookeeper，jdk8</td>
<td align="center">/opt</td>
</tr>
</tbody></table>
<h2 id="jdk8-安装"><a href="#jdk8-安装" class="headerlink" title="jdk8 安装"></a>jdk8 安装</h2><p>所有节点安装：<a href="https://hxqxiaoqi.gitee.io/2019/06/04/JDK1.8环境安装-linux/">jdk 安装教程</a></p>
<h2 id="zookeeper-集群安装"><a href="#zookeeper-集群安装" class="headerlink" title="zookeeper 集群安装"></a>zookeeper 集群安装</h2><p><a href="https://hxqxiaoqi.gitee.io/2020/03/26/zookeeper%20集群搭建/">zk集群安装教程</a></p>
<h2 id="kafka-集群安装"><a href="#kafka-集群安装" class="headerlink" title="kafka 集群安装"></a>kafka 集群安装</h2><p><font color="32CD32">在 kafka0 主机上配置</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget http://archive.apache.org/dist/kafka/2.4.0/kafka_2.13-2.4.0.tgz</span><br><span class="line"></span><br><span class="line">tar xf kafka_2.13-2.4.0.tgz -C /opt</span><br><span class="line"><span class="built_in">cd</span> /opt/kafka_2.13-2.4.0/config</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">修改 server.properties 文件</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 集群识别号，每台服务器上的kafka都不能相同</span></span><br><span class="line">broker.id=0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监听地址，填写本机地址</span></span><br><span class="line">listeners=PLAINTEXT://kafka0:9092</span><br><span class="line"></span><br><span class="line"><span class="comment"># 外网监听地址，返回给客户端的地址，填写本机地址</span></span><br><span class="line">advertised.listeners=PLAINTEXT://kafka0:9092</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据存储目录,默认/tmp下，建议不要设置到/tmp下，否则有可能服务崩溃</span></span><br><span class="line">log.dirs=/data/kafka-logs</span><br><span class="line"></span><br><span class="line"><span class="comment"># zookeeper地址</span></span><br><span class="line">zookeeper.connect=kafka0:2181,kafka1:2181,kafka2:2181</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">修改/opt/kafka_2.13-2.4.0/bin/kafka-server-start.sh 文件</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="string">"x<span class="variable">$KAFKA_HEAP_OPTS</span>"</span> = <span class="string">"x"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">export</span> KAFKA_HEAP_OPTS=<span class="string">"-Xmx1G -Xms1G"</span></span><br><span class="line">    <span class="comment"># 添加以下这条设置，用于kafka-manager监控</span></span><br><span class="line">    <span class="built_in">export</span> JMX_PORT=<span class="string">"9999"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p><font color="32CD32">复制 kafka 目录到其它集群服务器上，并修改相应配置</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果没有免密，需要输入密码</span></span><br><span class="line">scp -r /opt/kafka_2.13-2.4.0 root@kafka1:/opt</span><br><span class="line">scp -r /opt/kafka_2.13-2.4.0 root@kafka1:/opt</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">启动与关闭</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 前台启动</span></span><br><span class="line">/opt/kafka_2.13-2.4.0/bin/kafka-server-start.sh /opt/kafka_2.13-2.4.0/config/server.properties</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后台启动</span></span><br><span class="line">/opt/kafka_2.13-2.4.0/bin/kafka-server-start.sh -daemon /opt/kafka_2.13-2.4.0/config/server.properties</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">/opt/kafka_2.13-2.4.0/bin/kafka-server-stop.sh</span><br></pre></td></tr></table></figure>

<h2 id="kafka-manager安装"><a href="#kafka-manager安装" class="headerlink" title="kafka-manager安装"></a>kafka-manager安装</h2><p>kafka-manager用于监控kafka集群状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/yahoo/CMAK/archive/3.0.0.4.tar.gz</span><br></pre></td></tr></table></figure>

<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/kafka_2.13-2.4.0/bin/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建topic，--replication-facto：副本，--partitions：分区</span></span><br><span class="line">./kafka-topics.sh --create --zookeeper kafka0:2181,kafka1:2181,kafka2:2181 --replication-factor 3 --partitions 1 --topic kafka-test</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看top信息</span></span><br><span class="line">./kafka-topics.sh --describe --zookeeper kafka0:2181,kafka1:2181,kafka2:2181 --topic kafka-test</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动生产者</span></span><br><span class="line">./kafka-console-producer.sh --broker-list kafka0:9092,kafka1:9092,kafka2:9092 --topic kafka-test</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动消费者，--from-beginning：从头开始消费</span></span><br><span class="line">./kafka-console-consumer.sh --bootstrap-server kafka0:9092,kafka1:9092,kafka2:9092 --topic kafka-test --from-beginning</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看topic列表</span></span><br><span class="line">./kafka-topics.sh --list --zookeeper kafka0:2181,kafka1:2181,kafka2:2181</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除topic</span></span><br><span class="line">./kafka-topics.sh --zookeeper kafka0:2181,kafka1:2181,kafka2:2181 --delete  --topic kafka-test</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看topic策略</span></span><br><span class="line">bin/kafka-configs.sh --zookeeper 192.168.10.111:2181,192.168.10.112:2181,192.168.10.113:2181 --describe --entity-type topics --entity-name TOPIC_DW_USER_STATS</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置topic策略，保存时间</span></span><br><span class="line">bin/kafka-configs.sh --zookeeper 192.168.10.111:2181,192.168.10.112:2181,192.168.10.113:2181 --entity-type topics --entity-name TOPIC_DW_USER_STATS --alter --add-config retention.ms=10000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消topic策略</span></span><br><span class="line">bin/kafka-configs.sh --zookeeper 192.168.10.111:2181,192.168.10.112:2181,192.168.10.113:2181 --entity-type topics --entity-name TOPIC_DW_USER_STATS --alter --delete-config retention.ms</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有消费者</span></span><br><span class="line">bin/kafka-consumer-groups.sh --bootstrap-server 192.168.10.111:9092,192.168.10.112:9092,192.168.10.113:9092 --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定消费者信息</span></span><br><span class="line">bin/kafka-consumer-groups.sh --describe --bootstrap-server 192.168.10.111:9092,192.168.10.112:9092,192.168.10.113:9092 --group member-star-member-count-job</span><br></pre></td></tr></table></figure>

<h2 id="server-properties-配置文件详解"><a href="#server-properties-配置文件详解" class="headerlink" title="server.properties 配置文件详解"></a>server.properties 配置文件详解</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># broker在集群中的唯一标识，不能为负数</span></span><br><span class="line">broker.id</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据存放的目录，这个目录可以配置为“，”逗号分割的表达式，下面的num.io.threads要大于这个目录的个数，如果配置多个目录，新创建topic消息持久化的地方是，当前以逗号分割的目录中，分区数最少的那一个</span></span><br><span class="line">log.dirs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相当于下面的host.name+port</span></span><br><span class="line">listeners	PLAINTEXT://hostname:port</span><br><span class="line"></span><br><span class="line"><span class="comment"># 外网客户端访问返回的地址 PLAINTEXT://hostname:port</span></span><br><span class="line">advertised.listeners	</span><br><span class="line"></span><br><span class="line"><span class="comment"># broker的主机地址，若是设置了，那么会绑定到这个地址上，若是没有，会绑定到所有的接口上，并将其中之一发送到ZK</span></span><br><span class="line">host.name	</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监听端口</span></span><br><span class="line">port</span><br><span class="line"></span><br><span class="line"><span class="comment"># 消息最大字节</span></span><br><span class="line">message.max.bytes</span><br><span class="line"></span><br><span class="line"><span class="comment"># broker处理网络消息的最大线程数</span></span><br><span class="line">num.network.threads</span><br><span class="line"></span><br><span class="line"><span class="comment"># broker处理磁盘IO的线程数，数值应该大于你的目录数</span></span><br><span class="line">num.io.threads</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理后台任务的线程数，例如过期消息文件的删除等</span></span><br><span class="line">background.threads</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待IO线程处理的请求队列最大数，若是等待IO的请求超过这个数值，那么会停止接受外部消息，应该是一种自我保护机制</span></span><br><span class="line">queued.max.requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># socket的发送缓冲区</span></span><br><span class="line">socket.send.buffer.bytes</span><br><span class="line"></span><br><span class="line"><span class="comment"># socket的接受缓冲区</span></span><br><span class="line">socket.receive.buffer.bytes</span><br><span class="line"></span><br><span class="line"><span class="comment"># socket请求的最大字节数值，防止serverOOM，message.max.bytes必然要小于socket.request.max.bytes，会被topic创建时的指定参数覆盖</span></span><br><span class="line">socket.request.max.bytes</span><br><span class="line"></span><br><span class="line"><span class="comment"># topic的分区是以一堆segment文件存储的，这个控制每个segment的大小，会被topic创建时的指定参数覆盖</span></span><br><span class="line">log.segment.bytes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在日志segment没有达到log.segment.bytes设置的大小，但超过设定时间，也会强制新建一个segment。会被 topic创建时的指定参数覆盖</span></span><br><span class="line">log.roll.hours</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志清理策略选择有：delete和compact主要针对过期数据的处理，或是日志文件达到限制的额度，会被 topic创建时的指定参数覆盖</span></span><br><span class="line">log.cleanup.policy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据存储的最大时间超过这个时间会根据log.cleanup.policy设置的策略处理数据，也就是消费端能够多久去消费数据，log.retention.bytes和log.retention.minutes任意一个达到要求，都会执行删除，会被topic创建时的指定参数覆盖</span></span><br><span class="line">log.retention.minutes</span><br><span class="line"></span><br><span class="line"><span class="comment"># topic每个分区的最大文件大小，一个topic的大小限制 =分区数*log.retention.bytes。-1没有大小限log.retention.bytes和log.retention.minutes任意一个达到要求，都会执行删除，会被topic创建时的指定参数覆盖</span></span><br><span class="line">log.retention.bytes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件大小检查的周期时间，是否执行 log.cleanup.policy中设置的策略</span></span><br><span class="line">log.retention.check.interval.ms</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否开启日志压缩</span></span><br><span class="line">log.cleaner.enable</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志压缩运行的线程数</span></span><br><span class="line">log.cleaner.threads</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志压缩时每秒处理的最大大小</span></span><br><span class="line">log.cleaner.io.max.bytes.per.second</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志压缩去重时候的缓存空间，在空间允许的情况下，越大越好</span></span><br><span class="line">log.cleaner.dedupe.buffer.size</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志清理时候用到的IO块大小一般不需要修改</span></span><br><span class="line">log.cleaner.io.buffer.size</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志清理中hash表的扩大因子一般不需要修改</span></span><br><span class="line">log.cleaner.io.buffer.load.factor</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否触发日志清理的间隔</span></span><br><span class="line">log.cleaner.backoff.ms</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志清理的频率控制，越大意味着更高效的清理，同时会存在一些空间上的浪费，会被topic创建时的指定参数覆盖</span></span><br><span class="line">log.cleaner.min.cleanable.ratio</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于压缩的日志保留的最长时间，也是客户端消费消息的最长时间，与log.retention.minutes的区别在于一个控制未压缩数据，一个控制压缩后的数据。会被topic创建时的指定参数覆盖</span></span><br><span class="line">log.cleaner.delete.retention.ms</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于segment日志的索引文件大小限制，会被topic创建时的指定参数覆盖</span></span><br><span class="line">log.index.size.max.bytes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当执行一个fetch操作后，需要一定的空间来扫描最近的offset大小，设置越大，代表扫描速度越快，但是也更好内存，一般情况下不需要搭理这个参数</span></span><br><span class="line">log.index.interval.bytes</span><br><span class="line"></span><br><span class="line"><span class="comment"># log文件”sync”到磁盘之前累积的消息条数,因为磁盘IO操作是一个慢操作,但又是一个”数据可靠性"的必要手段,所以此参数的设置,需要在"数据可靠性"与"性能"之间做必要的权衡.如果此值过大,将会导致每次"fsync"的时间较长(IO阻塞),如果此值过小,将会导致"fsync"的次数较多,这也意味着整体的client请求有一定的延迟.物理server故障,将会导致没有fsync的消息丢失.</span></span><br><span class="line">log.flush.interval.messages</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否需要固化到硬盘的时间间隔</span></span><br><span class="line">log.flush.scheduler.interval.ms</span><br><span class="line"></span><br><span class="line"><span class="comment"># 仅仅通过interval来控制消息的磁盘写入时机,是不足的.此参数用于控制"fsync"的时间间隔,如果消息量始终没有达到阀值,但是离上一次磁盘同步的时间间隔达到阀值,也将触发.</span></span><br><span class="line">log.flush.interval.ms</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件在索引中清除后保留的时间一般不需要去修改</span></span><br><span class="line">log.delete.delay.ms</span><br><span class="line"></span><br><span class="line"><span class="comment"># 控制上次固化硬盘的时间点，以便于数据恢复一般不需要去修改</span></span><br><span class="line">log.flush.offset.checkpoint.interval.ms </span><br><span class="line"></span><br><span class="line"><span class="comment"># 消息时间戳类型，CreateTime 和 LogAppendTime ；前者表示producer创建这条消息的时间；后者表示broker接收到这条消息的时间(严格来说，是leader broker将这条消息写入到log的时间</span></span><br><span class="line">log.message.timestamp.type	</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否允许自动创建topic，若是false，就需要通过命令创建topic</span></span><br><span class="line">auto.create.topics.enable </span><br><span class="line"></span><br><span class="line"><span class="comment"># 每个topic的分区个数，会被topic创建时的指定参数覆盖</span></span><br><span class="line">num.partitions</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>openldap 安装</title>
    <url>/2020/04/30/openldap%20%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><font color="32CD32">LDAP</font>（Lightweight Directory Access Protocol）是基于X.500标准的轻量目录访问协议。它比X.500具有更快的查询速度和更低的资源消耗，精简灵活，支持TCP/IP协议。LDAP为用户管理提供了统一认证服务，解决了办公环境中多套用户认证和项目管理系统相互独立分散的难题，而OpenLDAP 是LDAP的开源实现。</p>
<p>其实就是各个支持ldap协议的应用，统一账号的地方，而不需要在每个应用上注册管理单独账号。</p>
<p><font color="32CD32">cn ：</font>common name 用户名</p>
<p>对象的属性为CN，例如一个用户的名字为：张三，那么“张三”就是一个CN。</p>
<p><font color="32CD32">ou : </font>OrganizationUnit 组织单位</p>
<p>o和ou都是ldap目录结构的一个属性，建立目录的时候可选新建o，ou 等。在配置我司交换设备ldap的时候具体是配置ou，o还是cn等，要具体看ldap服务器的相应目录是什么属性。</p>
<p><font color="32CD32">o：</font>organizationName 组织名</p>
<p><font color="32CD32">uid: </font>userid</p>
<p>对象的属性为uid，例如我司一个员工的名字为：zsq，他的UID为：z02691，ldap查询的时候可以根据cn，也可以根据uid。配置ldap查询的时候需要考虑用何种查询方式。我司两种方式都支持，具体我司设备配置根据何种方式查询需要有ldap服务器的相关配置来决定。</p>
<p><font color="32CD32">dc：</font>域组件</p>
<p>DC类似于dns中的每个元素，例如h3c.com，“.”符号分开的两个单词可以看成两个DC，</p>
<p><font color="32CD32">dn：</font>Distinguished Name</p>
<p>类似于DNS，DN与DNS的区别是：组成DN的每个值都有一个属性类型，例如:H3c.com是一个dns，那么用dn表示为：dc=h3c,dc=com 级别越高越靠后。H3c和com的属性都是DC。DN可以表示为ldap的某个目录，也可以表示成目录中的某个对象，这个对象可以是用户等。</p>
<blockquote>
<p>例如：CN=test,OU=developer,DC=domainname,DC=com </p>
<p>在上面的代码中 cn=test 可能代表一个用户名，ou=developer 代表一个 active directory 中的组织单位。这句话的含义可能就是说明 test 这个对象处在domainname.com 域的 developer 组织单元中。</p>
</blockquote>
<h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><p><font color="32CD32">实验环境</font></p>
<table>
<thead>
<tr>
<th align="center">主机名</th>
<th align="center">IP</th>
<th align="center">安装服务</th>
<th align="center">系统版本</th>
</tr>
</thead>
<tbody><tr>
<td align="center">server</td>
<td align="center">192.168.40.100</td>
<td align="center">openldap openldap-servers openldap-clients</td>
<td align="center">centos7.4</td>
</tr>
<tr>
<td align="center">client</td>
<td align="center">192.168.40.101</td>
<td align="center">openldap openldap-servers openldap-clients</td>
<td align="center">centos7.4</td>
</tr>
</tbody></table>
<p><font color="32CD32">关闭防火墙和selinux</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line">setenforce 0</span><br><span class="line">sed -i <span class="string">"s/SELINUX=enforcing/SELINUX=disabled/g"</span> /etc/selinux/config</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">配置epel源</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install epel-release -y</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">OpenLDAP安装</font></p>
<p>注：以下操作没有特殊说明，均在server主机操作。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install openldap openldap-servers openldap-clients -y</span><br><span class="line">cp /usr/share/openldap-servers/DB_CONFIG.example /var/lib/ldap/DB_CONFIG</span><br><span class="line">systemctl start slapd</span><br><span class="line">systemctl <span class="built_in">enable</span> slapd</span><br><span class="line">systemctl status slapd</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">配置管理员密码</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">slappasswd -s 111111</span><br><span class="line">&#123;SSHA&#125;AjIAg98NFvRRlhoBOvsfVqMeAGZwi5O9</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">生成的密码写入到 rootpwd.ldif 文件中</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF&gt;rootpwd.ldif</span><br><span class="line">dn: olcDatabase=&#123;0&#125;config,cn=config</span><br><span class="line">changetype: modify</span><br><span class="line">add: olcRootPW</span><br><span class="line">olcRootPW: &#123;SSHA&#125;AjIAg98NFvRRlhoBOvsfVqMeAGZwi5O9</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相关参数说明：</span></span><br><span class="line"><span class="comment"># olcRootPW参数值为slappasswd命令的结果输出。</span></span><br><span class="line"><span class="comment"># olcRootPW: &#123;SSHA&#125;AjIAg98NFvRRlhoBOvsfVqMeAGZwi5O9指定了属性值。</span></span><br><span class="line"><span class="comment"># ldif文件是LDAP中数据交换的文件格式。文件内容采用的是key-value形式。注意value后面不能有空格。</span></span><br><span class="line"><span class="comment"># olc（OnlineConfiguration）表示写入LDAP后立即生效。</span></span><br><span class="line"><span class="comment"># changetype: modify表示修改entry，此外changetype的值也可以是add,delete等。</span></span><br><span class="line"><span class="comment"># add: olcRootPW表示对这个entry新增olcRootPW的属性。</span></span><br></pre></td></tr></table></figure>

<p><font color="32CD32">写入配置</font></p>
<p>执行命令，添加 rootpwd.ldif 配置 到 openldap 中：ldap所有修改操作都需要编写单独的文件，切记不要直接去修改原有的配置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ldapadd -Y EXTERNAL -H ldapi:/// -f rootpwd.ldif</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">导入schema</font></p>
<p>schema包含支持特殊场景的相关属性，可选择性导入或全部导入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls /etc/openldap/schema/*.ldif | <span class="keyword">while</span> <span class="built_in">read</span> i; <span class="keyword">do</span> ldapadd -Y EXTERNAL -H ldapi:/// -f <span class="variable">$i</span>; <span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p><font color="32CD32">新建默认域配置文件</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF&gt; domain.ldif</span><br><span class="line">dn: olcDatabase=&#123;1&#125;monitor,cn=config</span><br><span class="line">changetype: modify</span><br><span class="line">replace: olcAccess</span><br><span class="line">olcAccess: &#123;0&#125;to * by dn.base=<span class="string">"gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth"</span> <span class="built_in">read</span> by dn.base=<span class="string">"cn=Manager,dc=mydomain,dc=com"</span> <span class="built_in">read</span> by * none</span><br><span class="line"></span><br><span class="line"><span class="comment"># olcDatabase=&#123;2&#125;hdb，改配置名需要到/etc/openldap/slapd.d/cn\=config/目录查看，不是都一样的，需要修改</span></span><br><span class="line">dn: olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class="line">changetype: modify</span><br><span class="line">replace: olcSuffix</span><br><span class="line">olcSuffix: dc=mydomain,dc=com</span><br><span class="line"></span><br><span class="line">dn: olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class="line">changetype: modify</span><br><span class="line">replace: olcRootDN</span><br><span class="line">olcRootDN: cn=Manager,dc=mydomain,dc=com</span><br><span class="line"></span><br><span class="line">dn: olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class="line">changetype: modify</span><br><span class="line">add: olcRootPW</span><br><span class="line"><span class="comment"># 上面生成的密码填写到这，或可以重新生成一个填写，与管理员密码区分</span></span><br><span class="line">olcRootPW: &#123;SSHA&#125;7AA7V1xy++LVZcUbBWYYM9/81wfODiIK</span><br><span class="line"></span><br><span class="line">dn: olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class="line">changetype: modify</span><br><span class="line">add: olcAccess</span><br><span class="line">olcAccess: &#123;0&#125;to attrs=userPassword,shadowLastChange by dn=<span class="string">"cn=Manager,dc=mydomain,dc=com"</span> write by anonymous auth by self write by * none</span><br><span class="line">olcAccess: &#123;1&#125;to dn.base=<span class="string">""</span> by * <span class="built_in">read</span></span><br><span class="line">olcAccess: &#123;2&#125;to * by dn=<span class="string">"cn=Manager,dc=mydomain,dc=com"</span> write by * <span class="built_in">read</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">写入配置</font></p>
<p>执行命令，添加 domain.ldif 配置 到 openldap 中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ldapmodify -Y EXTERNAL -H ldapi:/// -f domain.ldif</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">添加基本信息</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF&gt; basedomain.ldif</span><br><span class="line">dn: dc=mydomain,dc=com</span><br><span class="line">objectClass: top</span><br><span class="line">objectClass: dcObject</span><br><span class="line">objectclass: organization</span><br><span class="line">o: mydomain com</span><br><span class="line">dc: mydomain</span><br><span class="line"></span><br><span class="line">dn: cn=Manager,dc=mydomain,dc=com</span><br><span class="line">objectClass: organizationalRole</span><br><span class="line">cn: Manager</span><br><span class="line">description: Directory Manager</span><br><span class="line"></span><br><span class="line">dn: ou=People,dc=mydomain,dc=com</span><br><span class="line">objectClass: organizationalUnit</span><br><span class="line">ou: People</span><br><span class="line"></span><br><span class="line">dn: ou=Group,dc=mydomain,dc=com</span><br><span class="line">objectClass: organizationalUnit</span><br><span class="line">ou: Group</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">写入</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ldapadd -x -D cn=Manager,dc=mydomain,dc=com -W -f basedomain.ldif</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">查看信息</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ldapsearch -LLL -W -x -D <span class="string">"cn=Manager,dc=mydomain,dc=com"</span> -H ldap://localhost -b<span class="string">"dc=mydomain,dc=com"</span></span><br></pre></td></tr></table></figure>

<p>如果没有报错，则openldap服务端安装成功。</p>
<h1 id="安装-ldapadmin-web-管理"><a href="#安装-ldapadmin-web-管理" class="headerlink" title="安装 ldapadmin web 管理"></a>安装 ldapadmin web 管理</h1><p>在OpenLDAP运行节点安装ldapadmin工具包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y httpd php php-mbstring php-pear phpldapadmin</span><br></pre></td></tr></table></figure>

<p>修改 /etc/httpd/httpd.conf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># line 86: 修改admin邮箱地址</span></span><br><span class="line">ServerAdmin root@openldap.mydomain.world</span><br><span class="line"></span><br><span class="line"><span class="comment"># line 95: 修改主机域名</span></span><br><span class="line">ServerName www.mydomain.com:80</span><br><span class="line"></span><br><span class="line"><span class="comment"># line 152: 修改成如下内容：</span></span><br><span class="line">AllowOverride All</span><br><span class="line"></span><br><span class="line"><span class="comment"># line 165: 添加可访问目录名的文件名称</span></span><br><span class="line">DirectoryIndex index.html index.cgi index.php</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在文件末尾增加如下两部分内容</span></span><br><span class="line"><span class="comment"># server's response header</span></span><br><span class="line">ServerTokens Prod</span><br><span class="line"></span><br><span class="line"><span class="comment"># keepalive is ON</span></span><br><span class="line">KeepAlive On</span><br></pre></td></tr></table></figure>

<p>启动Apache服务并设置开机自启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start httpd</span><br><span class="line">systemctl <span class="built_in">enable</span> httpd</span><br></pre></td></tr></table></figure>

<p>编辑 /etc/phpldapadmin/config.php</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#注释掉398行，并取消397行的注释，修改后内容如下：</span></span><br><span class="line"><span class="variable">$servers</span>-&gt;setValue(<span class="string">'login'</span>,<span class="string">'attr'</span>,<span class="string">'dn'</span>);</span><br><span class="line">// <span class="variable">$servers</span>-&gt;setValue(<span class="string">'login'</span>,<span class="string">'attr'</span>,<span class="string">'uid'</span>);</span><br></pre></td></tr></table></figure>

<p>编辑 /etc/httpd/conf.d/phpldapadmin.conf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;Directory/usr/share/phpldapadmin/htdocs&gt;</span><br><span class="line">  &lt;IfModule mod_authz_core.c&gt;</span><br><span class="line">    <span class="comment"># Apache 2.4</span></span><br><span class="line">    Require <span class="built_in">local</span></span><br><span class="line">    Require all granted</span><br><span class="line">  &lt;/IfModule&gt;</span><br></pre></td></tr></table></figure>

<p>重启Apache服务使配置生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart httpd</span><br></pre></td></tr></table></figure>

<p>访问</p>
<p>账号：cn=Manager,dc=mydomain,dc=com</p>
<p>密码：111111</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://192.168.40.100/ldapadmin/</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux基础</category>
      </categories>
      <tags>
        <tag>ldap</tag>
      </tags>
  </entry>
  <entry>
    <title>redis配置文件详解</title>
    <url>/2019/10/19/redis%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>源码包安装的redis中redis.conf和sentinel.conf的配置文件详解</p>
<h1 id="redis-conf配置详解"><a href="#redis-conf配置详解" class="headerlink" title="redis.conf配置详解"></a>redis.conf配置详解</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 后台运行</span></span><br><span class="line">daemonize yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭保护，无密码连接</span></span><br><span class="line">protected-mode no</span><br><span class="line"></span><br><span class="line">pidfile <span class="string">"/var/run/redis.pid"</span></span><br><span class="line">port 6379</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此参数确定了TCP连接中已完成队列(完成三次握手之后)的长度， 当然此值必须不大于Linux系统定义</span></span><br><span class="line">的/proc/sys/net/core/somaxconn值，默认是511，而Linux的默认参数值是128。当系统并发量大并且客户端</span><br><span class="line">速度缓慢的时候，可以将这二个参数一起参考设定。该内核参数默认值一般是128，对于负载很大的服务程序来说大大的不够。一般会将它修改为2048或者更大。在/etc/sysctl.conf中添加:net.core.somaxconn = 2048，</span><br><span class="line">然后在终端中执行sysctl -p</span><br><span class="line">tcp-backlog 511</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此参数为设置客户端空闲超过timeout，服务端会断开连接，为0则服务端不会主动断开连接，不能小于0</span></span><br><span class="line">timeout 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># tcp keepalive参数。如果设置不为0，就使用配置tcp的SO_KEEPALIVE值，使用keepalive有两个好处:检测挂</span></span><br><span class="line">掉的对端。降低中间设备出问题而导致网络看似连接却已经与对端端口的问题。在Linux内核中，设置了keepalive，redis会定时给对端发送ack。检测到对端关闭需要两倍的设置值</span><br><span class="line">tcp-keepalive 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定了服务端日志的级别。级别包括：debug（很多信息，方便开发、测试），verbose（许多有用的信息，</span></span><br><span class="line">但是没有debug级别信息多），notice（适当的日志级别，适合生产环境），warn（只有非常重要的信息）</span><br><span class="line">loglevel notice</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">logfile <span class="string">"/data/redis-stable/redis_master_6379.log"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库的数量，默认使用的数据库是0。可以通过”SELECT 【数据库序号】“命令选择一个数据库，序号从0开始</span></span><br><span class="line">databases 16</span><br><span class="line"></span><br><span class="line"><span class="comment"># RDB核心规则配置 save &lt;指定时间间隔&gt; &lt;执行指定次数更新操作&gt;，满足条件就将内存中的数据同步到硬盘</span></span><br><span class="line">中。官方出厂配置默认是 900秒内有1个更改，300秒内有10个更改以及60秒内有10000个更改，则将内存中的</span><br><span class="line">数据快照写入磁盘。若不想用RDB方案，可以把 save <span class="string">""</span> 的注释打开，下面三个注释</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当RDB持久化出现错误后，是否依然进行继续进行工作，yes：不能进行工作，no：可以继续进行工作，可以通过info中的rdb_last_bgsave_status了解RDB持久化是否有错误</span></span><br><span class="line">stop-writes-on-bgsave-error no</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置存储至本地数据库时是否压缩数据，默认为yes。Redis采用LZF压缩方式，但占用了一点CPU的时间。若关闭该选项，但会导致数据库文件变的巨大。建议开启。</span></span><br><span class="line">rdbcompression no</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否校验rdb文件;从rdb格式的第五个版本开始，在rdb文件的末尾会带上CRC64的校验和。这跟有利于文件的</span></span><br><span class="line">容错性，但是在保存rdb文件的时候，会有大概10%的性能损耗，所以如果你追求高性能，可以关闭该配置</span><br><span class="line">rdbchecksum yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定本地数据库文件名，一般采用默认的 dump.rdb</span></span><br><span class="line">dbfilename <span class="string">"dump.rdb"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据目录，数据库的写入会在这个目录。rdb、aof文件也会写在这个目录</span></span><br><span class="line">dir <span class="string">"/data/redis-stable/data"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当从库同主机失去连接或者复制正在进行，从机库有两种运行方式：1) 如果slave-serve-stale-data设置为yes(默认设置)，从库会继续响应客户端的请求。2) 如果slave-serve-stale-data设置为no，INFO,replicaOF, AUTH, PING, SHUTDOWN, REPLCONF, ROLE, CONFIG,SUBSCRIBE, UNSUBSCRIBE,PSUBSCRIBE, PUNSUBSCRIBE, PUBLISH, PUBSUB,COMMAND, POST, HOST: and LATENCY命令之外的任何请求都会返回一个错误”SYNC with master in progress”。</span></span><br><span class="line">slave-serve-stale-data yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从节点为只读</span></span><br><span class="line">slave-read-only yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否使用socket方式复制数据。目前redis复制提供两种方式，disk和socket。如果新的slave连上来或者重连的slave无法部分同步，就会执行全量同步，master会生成rdb文件。有2种方式：disk方式是master创建一个新的进程把rdb文件保存到磁盘，再把磁盘上的rdb文件传递给slave。socket是master创建一个新的进程，直接把rdb文件以socket的方式发给slave。disk方式的时候，当一个rdb保存的过程中，多个slave都能共享这个rdb文件。socket的方式就的一个个slave顺序复制。在磁盘速度缓慢，网速快的情况下推荐用socket方式。</span></span><br><span class="line">repl-diskless-sync no</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># diskless复制的延迟时间，防止设置为0。一旦复制开始，节点不会再接收新slave的复制请求直到下一个rdb传输。所以最好等待一段时间，等更多的slave连上来</span></span><br><span class="line">repl-diskless-sync-delay 5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否禁止复制tcp链接的tcp nodelay参数，可传递yes或者no。默认是no，即使用tcp nodelay。如果master设置了yes来禁止tcp nodelay设置，在把数据复制给slave的时候，会减少包的数量和更小的网络带宽。但是这也可能带来数据的延迟。默认我们推荐更小的延迟，但是在数据量传输很大的场景下，建议选择yes</span></span><br><span class="line">repl-disable-tcp-nodelay no</span><br><span class="line"></span><br><span class="line"><span class="comment"># 适用Sentinel模块(unstable,M-S集群管理和监控),需要额外的配置文件支持。slave的权重值,默认100.当master失效后,Sentinel将会从slave列表中找到权重值最低(&gt;0)的slave,并提升为master。如果权重值为0,表示此slave为"观察者",不参与master选举</span></span><br><span class="line">slave-priority 100</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认情况下，redis 会在后台异步的把数据库镜像备份到磁盘，但是该备份是非常耗时的，而且备份也不能很频繁。所以redis 提供了另外一种更加高效的数据库备份及灾难恢复方式。开启append only 模式之后，redis 会把所接收到的每一次写操作请求都追加到appendonly.aof 文件中，当redis 重新启动时，会从该文件恢复出之前的状态。但是这样会造成appendonly.aof 文件过大，所以redis 还支持了BGREWRITEAOF 指令，对appendonly.aof 进行重新整理。如果不经常进行数据迁移操作，推荐生产环境下的做法为关闭镜像，开启appendonly.aof，同时可以选择在访问较少的时间每天对appendonly.aof 进行重写一次。</span></span><br><span class="line">appendonly no</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定本地数据库文件名，默认值为 appendonly.aof</span></span><br><span class="line">appendfilename <span class="string">"appendonly.aof"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># aof持久化策略的配置</span></span><br><span class="line"><span class="comment"># no表示不执行fsync，由操作系统保证数据同步到磁盘，速度最快</span></span><br><span class="line"><span class="comment"># always表示每次写入都执行fsync，以保证数据同步到磁盘</span></span><br><span class="line"><span class="comment"># everysec表示每秒执行一次fsync，可能会导致丢失这1s数据</span></span><br><span class="line">appendfsync everysec</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在aof重写或者写入rdb文件的时候，会执行大量IO，此时对于everysec和always的aof模式来说，执行fsync会造成阻塞过长时间，no-appendfsync-on-rewrite字段设置为默认设置为no。如果对延迟要求很高的应用，这个字段可以设置为yes，否则还是设置为no，这样对持久化特性来说这是更安全的选择。设置为yes表示rewrite期间对新写操作不fsync,暂时存在内存中,等rewrite完成后再写入，默认为no，建议yes。Linux的默认fsync策略是30秒。可能丢失30秒数据</span></span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"></span><br><span class="line"><span class="comment"># aof自动重写配置。当目前aof文件大小超过上一次重写的aof文件大小的百分之多少进行重写，即当aof文件增长到一定大小的时候Redis能够调用bgrewriteaof对日志文件进行重写。当前AOF文件大小是上次日志重写得到AOF文件大小的二倍（设置为100）时，自动启动新的日志重写过程</span></span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置允许重写的最小aof文件大小，避免了达到约定百分比但尺寸仍然很小的情况还要重写</span></span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line"></span><br><span class="line"><span class="comment"># aof文件可能在尾部是不完整的，当redis启动的时候，aof文件的数据被载入内存。重启可能发生在redis所在的主机操作系统宕机后，尤其在ext4文件系统没有加上data=ordered选项（redis宕机或者异常终止不会造成尾部不完整现象。）出现这种现象，可以选择让redis退出，或者导入尽可能多的数据。如果选择的是yes，当截的aof文件被导入的时候，会自动发布一个log给客户端然后load。如果是no，用户必须手动redis-check-aof修复AOF文件才可以</span></span><br><span class="line">aof-load-truncated yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在aof重写的时候，如果打开了aof-rewrite-incremental-fsync开关，系统会每32MB执行一次fsync。这对于把文件写入磁盘是有帮助的，可以避免过大的延迟峰值</span></span><br><span class="line">aof-rewrite-incremental-fsync yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果达到最大时间限制（毫秒），redis会记个log，然后返回error。当一个脚本超过了最大时限。只有SCRIPT KILL和SHUTDOWN NOSAVE可以用。第一个可以杀没有调write命令的东西。要是已经调用了write，只能用第二个命令杀</span></span><br><span class="line">lua-time-limit 5000</span><br><span class="line"></span><br><span class="line"><span class="comment"># slog log是用来记录redis运行中执行比较慢的命令耗时。当命令的执行超过了指定时间，就记录在slow log中，slog log保存在内存中，所以没有IO操作。</span></span><br><span class="line"><span class="comment"># 执行时间比slowlog-log-slower-than大的请求记录到slowlog里面，单位是微秒，所以1000000就是1秒。注意，负数时间会禁用慢查询日志，而0则会强制记录所有命令。</span></span><br><span class="line">slowlog-log-slower-than 50000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 慢查询日志长度。当一个新的命令被写进日志的时候，最老的那个记录会被删掉。这个长度没有限制。只要有足够的内存就行。你可以通过 SLOWLOG RESET 来释放内存</span></span><br><span class="line">slowlog-max-len 128</span><br><span class="line"></span><br><span class="line"><span class="comment"># 延迟监控功能是用来监控redis中执行比较缓慢的一些操作，用LATENCY打印redis实例在跑命令时的耗时图表。只记录大于等于下边设置的值的操作。0的话，就是关闭监视。默认延迟监控功能是关闭的，如果你需要打开，也可以通过CONFIG SET命令动态设置</span></span><br><span class="line">latency-monitor-threshold 0</span><br><span class="line"></span><br><span class="line"><span class="comment">#键空间通知使得客户端可以通过订阅频道或模式，来接收那些以某种方式改动了 Redis 数据集的事件。因为开启键空间通知功能需要消耗一些 CPU ，所以在默认配置下，该功能处于关闭状态。</span></span><br><span class="line"><span class="comment">#notify-keyspace-events 的参数可以是以下字符的任意组合，它指定了服务器该发送哪些类型的通知：</span></span><br><span class="line"><span class="comment">##K 键空间通知，所有通知以 __keyspace@__ 为前缀</span></span><br><span class="line"><span class="comment">##E 键事件通知，所有通知以 __keyevent@__ 为前缀</span></span><br><span class="line"><span class="comment">##g DEL 、 EXPIRE 、 RENAME 等类型无关的通用命令的通知</span></span><br><span class="line"><span class="comment">##$ 字符串命令的通知</span></span><br><span class="line"><span class="comment">##l 列表命令的通知</span></span><br><span class="line"><span class="comment">##s 集合命令的通知</span></span><br><span class="line"><span class="comment">##h 哈希命令的通知</span></span><br><span class="line"><span class="comment">##z 有序集合命令的通知</span></span><br><span class="line"><span class="comment">##x 过期事件：每当有过期键被删除时发送</span></span><br><span class="line"><span class="comment">##e 驱逐(evict)事件：每当有键因为 maxmemory 政策而被删除时发送</span></span><br><span class="line"><span class="comment">##A 参数 g$lshzxe 的别名</span></span><br><span class="line"><span class="comment">#输入的参数中至少要有一个 K 或者 E，否则的话，不管其余的参数是什么，都不会有任何 通知被分发。详细使用可以参考http://redis.io/topics/notifications</span></span><br><span class="line">notify-keyspace-events <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hash类型的数据结构在编码上可以使用ziplist和hashtable。ziplist的特点就是文件存储(以及内存存储)所需的空间较小,在内容较小时,性能和hashtable几乎一样.因此redis对hash类型默认采取ziplist。如果hash中条目的条目个数或者value长度达到阀值,将会被重构为hashtable。</span></span><br><span class="line"><span class="comment"># 这个参数指的是ziplist中允许存储的最大条目个数，，默认为512，建议为128</span></span><br><span class="line"><span class="built_in">hash</span>-max-ziplist-entries 512</span><br><span class="line"></span><br><span class="line"><span class="comment"># ziplist中允许条目value值最大字节数，默认为64，建议为1024</span></span><br><span class="line"><span class="built_in">hash</span>-max-ziplist-value 64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于list类型,将会采取ziplist,linkedlist两种编码类型。解释同上。</span></span><br><span class="line">list-max-ziplist-entries 512</span><br><span class="line">list-max-ziplist-value 64</span><br><span class="line"></span><br><span class="line"><span class="comment"># intset中允许保存的最大条目个数,如果达到阀值,intset将会被重构为hashtable</span></span><br><span class="line"><span class="built_in">set</span>-max-intset-entries 512</span><br><span class="line"></span><br><span class="line"><span class="comment"># zset为有序集合,有2中编码类型:ziplist,skiplist。因为"排序"将会消耗额外的性能,当zset中数据较多时,将会被重构为skiplist。</span></span><br><span class="line">zset-max-ziplist-entries 128</span><br><span class="line">zset-max-ziplist-value 64</span><br><span class="line"></span><br><span class="line"><span class="comment"># value大小小于等于hll-sparse-max-bytes使用稀疏数据结构（sparse），大于hll-sparse-max-bytes使用稠密的数据结构（dense）。一个比16000大的value是几乎没用的，建议的value大概为3000。如果对CPU要求不高，对空间要求较高的，建议设置到10000左右</span></span><br><span class="line">hll-sparse-max-bytes 3000</span><br><span class="line"></span><br><span class="line"><span class="comment"># Redis将在每100毫秒时使用1毫秒的CPU时间来对redis的hash表进行重新hash，可以降低内存的使用。当你的使用场景中，有非常严格的实时性需要，不能够接受Redis时不时的对请求有2毫秒的延迟的话，把这项配置为no。如果没有这么严格的实时性要求，可以设置为yes，以便能够尽可能快的释放内存</span></span><br><span class="line">activerehashing yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端buffer控制。在客户端与server进行的交互中,每个连接都会与一个buffer关联,此buffer用来队列化等待被client接受的响应信息。如果client不能及时的消费响应信息,那么buffer将会被不断积压而给server带来内存压力.如果buffer中积压的数据达到阀值,将会导致连接被关闭,buffer被移除。</span></span><br><span class="line"><span class="comment"># buffer控制类型包括:normal -&gt; 普通连接；slave -&gt;与slave之间的连接；pubsub -&gt;pub/sub类型连接，此类型的连接，往往会产生此种问题;因为pub端会密集的发布消息,但是sub端可能消费不足.</span></span><br><span class="line"><span class="comment"># 指令格式:client-output-buffer-limit &lt;class&gt; &lt;hard&gt; &lt;soft&gt; &lt;seconds&gt;,其中hard表示buffer最大值,一旦达到阀值将立即关闭连接;soft表示"容忍值",它和seconds配合,如果buffer值超过soft且持续时间达到了seconds,也将立即关闭连接,如果超过了soft但是在seconds之后，buffer数据小于了soft,连接将会被保留.其中hard和soft都设置为0,则表示禁用buffer控制.通常hard值大于soft.</span></span><br><span class="line">client-output-buffer-limit normal 0 0 0</span><br><span class="line">client-output-buffer-limit slave 256mb 64mb 60</span><br><span class="line">client-output-buffer-limit pubsub 32mb 8mb 60</span><br><span class="line"></span><br><span class="line"><span class="comment">#Redis server执行后台任务的频率,默认为10,此值越大表示redis对"间歇性task"的执行次数越频繁(次数/秒)。"间歇性task"包括"过期集合"检测、关闭"空闲超时"的连接等,此值必须大于0且小于500。此值过小就意味着更多的cpu周期消耗,后台task被轮询的次数更频繁。此值过大意味着"内存敏感"性较差。建议采用默认值。</span></span><br><span class="line">hz 10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置密码</span></span><br><span class="line"><span class="comment"># requirepass 123456</span></span><br><span class="line"><span class="comment"># 用于连接认证</span></span><br><span class="line"><span class="comment"># masterauth "123456"</span></span><br></pre></td></tr></table></figure>

<h1 id="sentinel-conf配置详解"><a href="#sentinel-conf配置详解" class="headerlink" title="sentinel.conf配置详解"></a>sentinel.conf配置详解</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">port 8001</span><br><span class="line"></span><br><span class="line"><span class="comment"># 守护进程模式</span></span><br><span class="line">daemonize yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指明日志文件名</span></span><br><span class="line">logfile <span class="string">"./sentinel1.log"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 工作路径，sentinel一般指定/tmp比较简单</span></span><br><span class="line">dir ./</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置监听的主服务器，这里sentinel monitor代表监控，redis01代表服务器的名称，可以自定义，192.168.40.100代表监控的主服务器，6379代表端口，1代表只有1个或1个以上的哨兵认为主服务器不可用的时候，才会进行failover操作</span></span><br><span class="line">sentinel monitor mymaster 192.168.40.100 6379 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># master或slave多长时间（默认30秒）不能使用后标记为s_down状态。</span></span><br><span class="line">sentinel down-after-milliseconds mymaster 1500</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若sentinel在该配置值内未能完成failover操作（即故障时master/slave自动切换），则认为本次failover失败。</span></span><br><span class="line">sentinel failover-timeout mymaster 10000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置master和slaves验证密码</span></span><br><span class="line">sentinel auth-pass mymaster testmaster123</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定最大同时同步新maser配置的salve数量</span></span><br><span class="line">sentinel parallel-syncs mymaster 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确认mymater SDOWN时长</span></span><br><span class="line">sentinel config-epoch mymaster 0   </span><br><span class="line"></span><br><span class="line"><span class="comment"># 同时一时间最多2个slave可同时更新配置.</span></span><br><span class="line">sentinel leader-epoch mymaster 2</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>网络顶级域名查看表</title>
    <url>/2019/06/09/%E7%BD%91%E7%BB%9C%E9%A1%B6%E7%BA%A7%E5%9F%9F%E5%90%8D%E6%9F%A5%E7%9C%8B%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="国际域名"><a href="#国际域名" class="headerlink" title="国际域名"></a>国际域名</h1><p>　　.com：商业机构，任何人都可以注册;</p>
<p>　　.edu：教育机构;</p>
<p>　　.gov：政府部门;</p>
<p>　　.int：国际组织;</p>
<p>　　.mil：美国军事部门;</p>
<p>　　.net：网络组织，例如因特网服务商和维修商，现在任何人都可以注册;</p>
<p>　　.org：非盈利组织，任何人都可以注册;</p>
<p>　　.biz：商业;</p>
<p>　　.info：网络信息服务组织;</p>
<p>　　.pro：用于会计、律师和医生。;</p>
<p>　　.name：用于个人;</p>
<p>　　.museum：用于博物馆;</p>
<p>　　.coop：用于商业合作团体;</p>
<p>　　.aero：用于航空工业;</p>
<p>　　.xxx：用于成人、色情网站;</p>
<p>　　.idv：用于个人</p>
<p>　</p>
<h1 id="国家域名-按国家地区名称汉语拼音排列"><a href="#国家域名-按国家地区名称汉语拼音排列" class="headerlink" title="国家域名 (按国家地区名称汉语拼音排列)"></a>国家域名 (按国家地区名称汉语拼音排列)</h1><p>　　A - B - C - D - E - F - G - H - I - J - K - L - M - N - O - P - Q - R - S - T - U - V - W - X - Y - Z</p>
<p>　　</p>
<ul>
<li>A</li>
</ul>
<p>　　阿尔巴尼亚 .al</p>
<p>　　阿尔及利亚 .dz</p>
<p>　　阿富汗 .af</p>
<p>　　阿根廷 .ar</p>
<p>　　阿拉伯联合酋长国 .ae</p>
<p>　　阿鲁巴 .aw</p>
<p>　　阿曼 .om</p>
<p>　　阿塞拜疆 .az</p>
<p>　　埃及 .eg</p>
<p>　　埃塞俄比亚 .et</p>
<p>　　爱尔兰 .ie</p>
<p>　　爱沙尼亚 .ee</p>
<p>　　安道尔 .ad</p>
<p>　　安哥拉 .ao</p>
<p>　　安圭拉 .ai</p>
<p>　　安提瓜和巴布达 .ag</p>
<p>　　奥地利 .at</p>
<p>　　澳大利亚 .au</p>
<p>　　澳门地区 .mo</p>
<p>　</p>
<ul>
<li>B</li>
</ul>
<p>　　巴巴多斯 .bb</p>
<p>　　巴布亚新几内亚 .pg</p>
<p>　　巴哈马 .bs</p>
<p>　　巴基斯坦 .pk</p>
<p>　　巴拉圭 .py</p>
<p>　　巴勒斯坦 .ps</p>
<p>　　巴林 .bh</p>
<p>　　巴拿马 .pa</p>
<p>　　巴西 .br</p>
<p>　　白俄罗斯 .by</p>
<p>　　百慕大 .bm</p>
<p>　　保加利亚 .bg</p>
<p>　　北马里亚纳群岛 .mp</p>
<p>　　贝宁 .bj</p>
<p>　　比利时 .be</p>
<p>　　冰岛 .is</p>
<p>　　波多黎各 .pr</p>
<p>　　波斯尼亚和黑塞哥维那 .ba</p>
<p>　　波兰 .pl</p>
<p>　　玻利维亚 .bo</p>
<p>　　伯利兹 .bz</p>
<p>　　博茨瓦纳 .bw</p>
<p>　　不丹 .bt</p>
<p>　　布基纳法索 .bf</p>
<p>　　布隆迪 .bi</p>
<p>　　布维岛 .bv</p>
<ul>
<li>C</li>
</ul>
<p>　　朝鲜 .kp</p>
<p>　　赤道几内亚 .gq</p>
<ul>
<li>D</li>
</ul>
<p>　　丹麦 .dk</p>
<p>　　德国 .de</p>
<p>　　东帝汶 .tl (新域名); .tp (旧域名，尚未停用)</p>
<p>　　多哥 .tg</p>
<p>　　多米尼克 .dm</p>
<p>　　多米尼加共和国 .do</p>
<ul>
<li>E</li>
</ul>
<p>　　俄罗斯 .ru</p>
<p>　　厄瓜多尔 .ec</p>
<p>　　厄立特里亚 .er</p>
<ul>
<li>F</li>
</ul>
<p>　　法国 .fr</p>
<p>　　法罗群岛 .fo</p>
<p>　　法属波利尼西亚 .pf</p>
<p>　　法属圭亚那 .gf</p>
<p>　　法属南部领土 .tf</p>
<p>　　梵蒂冈 .va</p>
<p>　　菲律宾 .ph</p>
<p>　　斐济 .fj</p>
<p>　　芬兰 .fi</p>
<p>　　佛得角 .cv</p>
<p>　　福克兰群岛 .fk</p>
<ul>
<li>G</li>
</ul>
<p>　　冈比亚 .gm</p>
<p>　　刚果 .cg</p>
<p>　　刚果民主共和国 .cd</p>
<p>　　哥伦比亚 .co</p>
<p>　　哥斯达黎加 .cr</p>
<p>　　格恩西岛 .gg</p>
<p>　　格林纳达 .gd</p>
<p>　　格陵兰 .gl</p>
<p>　　格鲁吉亚 .ge</p>
<p>　　古巴 .cu</p>
<p>　　瓜德罗普 .gp</p>
<p>　　关岛 .gu</p>
<p>　　圭亚那 .gy</p>
<ul>
<li>H</li>
</ul>
<p>　　哈萨克斯坦 .kz</p>
<p>　　海地 .ht</p>
<p>　　韩国 .kr</p>
<p>　　荷兰 .nl</p>
<p>　　荷属安地列斯群岛 .an</p>
<p>　　赫德和麦克唐纳群岛 .hm</p>
<p>　　洪都拉斯 .hn</p>
<ul>
<li>J</li>
</ul>
<p>　　基里巴斯 .ki</p>
<p>　　吉布提 .dj</p>
<p>　　吉尔吉斯斯坦 .kg</p>
<p>　　几内亚 .gn</p>
<p>　　几内亚比绍 .gw</p>
<p>　　加拿大 .ca</p>
<p>　　加纳 .gh</p>
<p>　　加蓬 .ga</p>
<p>　　柬埔寨 .kh</p>
<p>　　捷克共和国 .cz</p>
<p>　　津巴布韦 .zw</p>
<ul>
<li>K</li>
</ul>
<p>　　喀麦隆 .cm</p>
<p>　　卡塔尔 .qa</p>
<p>　　开曼群岛 .ky</p>
<p>　　科摩罗 .km</p>
<p>　　科特迪瓦 .ci</p>
<p>　　科威特 .kw</p>
<p>　　可可群岛 .cc</p>
<p>　　克罗地亚 .hr</p>
<p>　　肯尼亚 .ke</p>
<p>　　库克群岛 .ck</p>
<ul>
<li>L</li>
</ul>
<p>　　拉脱维亚 .lv</p>
<p>　　莱索托 .ls</p>
<p>　　老挝 .la</p>
<p>　　黎巴嫩 .lb</p>
<p>　　立陶宛 .lt</p>
<p>　　利比里亚 .lr</p>
<p>　　利比亚 .ly</p>
<p>　　列支敦士登 .li</p>
<p>　　留尼汪 .re</p>
<p>　　卢森堡 .lu</p>
<p>　　卢旺达 .rw</p>
<p>　　罗马尼亚 .ro</p>
<ul>
<li>M</li>
</ul>
<p>　　马达加斯加 .mg</p>
<p>　　马恩岛 .im</p>
<p>　　马尔代夫 .mv</p>
<p>　　马耳他 .mt</p>
<p>　　马拉维 .mw</p>
<p>　　马来西亚 .my</p>
<p>　　马里 .ml</p>
<p>　　马其顿 .mk</p>
<p>　　马绍尔群岛 .mh</p>
<p>　　马提尼克岛 .mq</p>
<p>　　马约特岛 .yt</p>
<p>　　毛里求斯 .mu</p>
<p>　　毛里塔尼亚 .mr</p>
<p>　　美国 .us</p>
<p>　　美国本土外小岛屿 .um</p>
<p>　　美属萨摩亚 .as</p>
<p>　　美属维尔京群岛 .vi</p>
<p>　　蒙古 .mn</p>
<p>　　蒙特塞拉特岛 .ms</p>
<p>　　孟加拉国 .bd</p>
<p>　　秘鲁 .pe</p>
<p>　　密克罗尼西亚联邦 .fm</p>
<p>　　缅甸 .mm</p>
<p>　　摩尔多瓦 .md</p>
<p>　　摩洛哥 .ma</p>
<p>　　摩纳哥 .mc</p>
<p>　　莫桑比克 .mz</p>
<p>　　墨西哥 .mx</p>
<p>　</p>
<ul>
<li>N</li>
</ul>
<p>　　瑙鲁 .nr</p>
<p>　　尼泊尔 .np</p>
<p>　　尼加拉瓜 .ni</p>
<p>　　尼日尔 .ne</p>
<p>　　尼日利亚 .ng</p>
<p>　　纽埃岛 .nu</p>
<p>　　挪威 .no</p>
<p>　　诺福克岛 .nf</p>
<p>　　纳米比亚 .na</p>
<p>　　南非 .za</p>
<p>　　南极洲 .aq</p>
<p>　　南乔治亚岛和南桑德韦奇岛 .gs</p>
<p>　</p>
<ul>
<li>O</li>
</ul>
<p>　　欧洲联盟 .eu</p>
<p>　</p>
<ul>
<li>P</li>
</ul>
<p>　　帕劳 .pw</p>
<p>　　皮特凯恩群岛 .pn</p>
<p>　　葡萄牙 .pt</p>
<p>　</p>
<ul>
<li>R</li>
</ul>
<p>　　日本 .jp</p>
<p>　　瑞典 .se</p>
<p>　　瑞士 .ch</p>
<p>　</p>
<ul>
<li>S</li>
</ul>
<p>　　萨尔瓦多 .sv</p>
<p>　　萨摩亚 .ws</p>
<p>　　塞尔维亚和黑山 .yu</p>
<p>　　塞拉利昂 .sl</p>
<p>　　塞内加尔 .sn</p>
<p>　　塞浦路斯 .cy</p>
<p>　　塞舌尔 .sc</p>
<p>　　沙特阿拉伯 .sa</p>
<p>　　圣诞岛 .cx</p>
<p>　　圣多美和普林西比 .st</p>
<p>　　圣赫勒拿岛 .sh</p>
<p>　　圣基茨和尼维斯 .kn</p>
<p>　　圣卢西亚 .lc</p>
<p>　　圣马力诺 .sm</p>
<p>　　圣皮埃尔岛及密客隆岛 .pm</p>
<p>　　圣文森特和格林纳丁斯 .vc</p>
<p>　　斯里兰卡 .lk</p>
<p>　　斯洛伐克 .sk</p>
<p>　　斯洛文尼亚 .si</p>
<p>　　斯瓦尔巴岛和扬马延岛 .sj</p>
<p>　　斯威士兰 .sz</p>
<p>　　苏丹 .sd</p>
<p>　　苏里南 .sr</p>
<p>　　所罗门群岛 .sb</p>
<p>　　索马里 .so</p>
<ul>
<li>T</li>
</ul>
<p>　　塔吉克斯坦 .tj</p>
<p>　　台湾 .tw</p>
<p>　　泰国 .th</p>
<p>　　坦桑尼亚 .tz</p>
<p>　　汤加 .to</p>
<p>　　特克斯和凯科斯群岛 .tc</p>
<p>　　特立尼达和多巴哥 .tt</p>
<p>　　突尼斯 .tn</p>
<p>　　图瓦卢 .tv</p>
<p>　　土耳其 .tr</p>
<p>　　土库曼斯坦 .tm</p>
<p>　　托克劳 .tk</p>
<ul>
<li>W</li>
</ul>
<p>　　瓦利斯和富图纳群岛 .wf</p>
<p>　　瓦努阿图 .vu</p>
<p>　　危地马拉 .gt</p>
<p>　　委内瑞拉 .ve</p>
<p>　　文莱 .bn</p>
<p>　　乌干达 .ug</p>
<p>　　乌克兰 .ua</p>
<p>　　乌拉圭 .uy</p>
<p>　　乌兹别克斯坦 .uz</p>
<ul>
<li>X</li>
</ul>
<p>　　西班牙 .es</p>
<p>　　西撒哈拉 .eh</p>
<p>　　希腊 .gr</p>
<p>　　香港地区 .hk</p>
<p>　　新加坡 .sg</p>
<p>　　新喀里多尼亚 .nc</p>
<p>　　新西兰 .nz</p>
<p>　　匈牙利 .hu</p>
<p>　　叙利亚 .sy</p>
<ul>
<li>Y</li>
</ul>
<p>　　牙买加 .jm</p>
<p>　　亚美尼亚 .am</p>
<p>　　亚森松岛 .ac</p>
<p>　　也门 .ye</p>
<p>　　伊拉克 .iq</p>
<p>　　伊朗 .ir</p>
<p>　　以色列 .il</p>
<p>　　意大利 .it</p>
<p>　　印度 .in</p>
<p>　　印度尼西亚 .id</p>
<p>　　英国 .uk</p>
<p>　　英属维尔京群岛 .vg</p>
<p>　　英属印度洋地区 .io</p>
<p>　　约旦 .jo</p>
<p>　　越南 .vn</p>
<ul>
<li>Z</li>
</ul>
<p>　　赞比亚 .zm</p>
<p>　　泽西岛 .je</p>
<p>　　乍得 .td</p>
<p>　　直布罗陀 .gi</p>
<p>　　智利 .cl</p>
<p>　　中非共和国 .cf</p>
<p>　　中国 .cn</p>
<p>　</p>
<h1 id="国家域名-按国家、地区的域名顺序排列"><a href="#国家域名-按国家、地区的域名顺序排列" class="headerlink" title="国家域名 (按国家、地区的域名顺序排列)"></a>国家域名 (按国家、地区的域名顺序排列)</h1><p>　　A - B - C - D - E - F - G - H - I - J - K - L - M - N - O - P - Q - R - S - T - U - V - W - X - Y - Z</p>
<ul>
<li>A</li>
</ul>
<p>　　.ac 亚森松岛</p>
<p>　　.ad 安道尔</p>
<p>　　.ae 阿拉伯联合酋长国</p>
<p>　　.af 阿富汗</p>
<p>　　.ag 安提瓜和巴布达</p>
<p>　　.ai 安圭拉</p>
<p>　　.al 阿尔巴尼亚</p>
<p>　　.am 亚美尼亚</p>
<p>　　.an 荷属安地列斯群岛</p>
<p>　　.ao 安哥拉</p>
<p>　　.aq 南极洲</p>
<p>　　.ar 阿根廷</p>
<p>　　.as 美属萨摩亚</p>
<p>　　.at 奥地利</p>
<p>　　.au 澳大利亚</p>
<p>　　.aw 阿鲁巴</p>
<p>　　.az 阿塞拜疆</p>
<ul>
<li>B</li>
</ul>
<p>　　.ba 波斯尼亚和黑塞哥维那</p>
<p>　　.bb 巴巴多斯</p>
<p>　　.bd 孟加拉国</p>
<p>　　.be 比利时</p>
<p>　　.bf 布基纳法索</p>
<p>　　.bg 保加利亚</p>
<p>　　.bh 巴林</p>
<p>　　.bi 布隆迪</p>
<p>　　.bj 贝宁</p>
<p>　　.bm 百慕大</p>
<p>　　.bn 文莱</p>
<p>　　.bo 玻利维亚</p>
<p>　　.br 巴西</p>
<p>　　.bs 巴哈马</p>
<p>　　.bt 不丹</p>
<p>　　.bv 布维岛</p>
<p>　　.bw 博茨瓦纳</p>
<p>　　.by 白俄罗斯</p>
<p>　　.bz 伯利兹</p>
<ul>
<li>C</li>
</ul>
<p>　　.ca 加拿大</p>
<p>　　.cc 可可群岛</p>
<p>　　.cd 刚果民主共和国</p>
<p>　　.cf 中非共和国</p>
<p>　　.cg 刚果</p>
<p>　　.ch 瑞士</p>
<p>　　.ci 科特迪瓦</p>
<p>　　.ck 库克群岛</p>
<p>　　.cl 智利</p>
<p>　　.cm 喀麦隆</p>
<p>　　.cn 中国大陆</p>
<p>　　.co 哥伦比亚</p>
<p>　　.cr 哥斯达黎加</p>
<p>　　.cu 古巴</p>
<p>　　.cv 佛得角</p>
<p>　　.cx 圣诞岛</p>
<p>　　.cy 塞浦路斯</p>
<p>　　.cz 捷克共和国</p>
<ul>
<li>D</li>
</ul>
<p>　　.de 德国</p>
<p>　　.dj 吉布提</p>
<p>　　.dk 丹麦</p>
<p>　　.dm 多米尼克</p>
<p>　　.do 多米尼加共和国</p>
<p>　　.dz 阿尔及利亚</p>
<ul>
<li>E</li>
</ul>
<p>　　.ec 厄瓜多尔</p>
<p>　　.ee 爱沙尼亚</p>
<p>　　.eg 埃及</p>
<p>　　.eh 西撒哈拉</p>
<p>　　.er 厄立特里亚</p>
<p>　　.es 西班牙</p>
<p>　　.et 埃塞俄比亚</p>
<p>　　.eu 欧洲联盟</p>
<ul>
<li>F</li>
</ul>
<p>　　.fi 芬兰</p>
<p>　　.fj 斐济</p>
<p>　　.fk 福克兰群岛</p>
<p>　　.fm 密克罗尼西亚联邦</p>
<p>　　.fo 法罗群岛</p>
<p>　　.fr 法国</p>
<ul>
<li>G</li>
</ul>
<p>　　.ga 加蓬</p>
<p>　　.gd 格林纳达</p>
<p>　　.ge 格鲁吉亚</p>
<p>　　.gf 法属圭亚那</p>
<p>　　.gg 格恩西岛</p>
<p>　　.gh 加纳</p>
<p>　　.gi 直布罗陀</p>
<p>　　.gl 格陵兰</p>
<p>　　.gm 冈比亚</p>
<p>　　.gn 几内亚</p>
<p>　　.gp 瓜德罗普</p>
<p>　　.gq 赤道几内亚</p>
<p>　　.gr 希腊</p>
<p>　　.gs 南乔治亚岛和南桑德韦奇岛</p>
<p>　　.gt 危地马拉</p>
<p>　　.gu 关岛</p>
<p>　　.gw 几内亚比绍</p>
<p>　　.gy 圭亚那</p>
<ul>
<li>H</li>
</ul>
<p>　　.hk 香港</p>
<p>　　.hm 赫德和麦克唐纳群岛</p>
<p>　　.hn 洪都拉斯</p>
<p>　　.hr 克罗地亚</p>
<p>　　.ht 海地</p>
<p>　　.hu 匈牙利</p>
<ul>
<li>I</li>
</ul>
<p>　　.id 印度尼西亚</p>
<p>　　.ie 爱尔兰</p>
<p>　　.il 以色列</p>
<p>　　.im 马恩岛</p>
<p>　　.in 印度</p>
<p>　　.io 英属印度洋地区</p>
<p>　　.iq 伊拉克</p>
<p>　　.ir 伊朗</p>
<p>　　.is 冰岛</p>
<p>　　.it 意大利</p>
<ul>
<li>J</li>
</ul>
<p>　　.je 泽西岛</p>
<p>　　.jm 牙买加</p>
<p>　　.jo 约旦</p>
<p>　　.jp 日本</p>
<p>　</p>
<ul>
<li>K</li>
</ul>
<p>　　.ke 肯尼亚</p>
<p>　　.kg 吉尔吉斯斯坦</p>
<p>　　.kh 柬埔寨</p>
<p>　　.ki 基里巴斯</p>
<p>　　.km 科摩罗</p>
<p>　　.kn 圣基茨和尼维斯</p>
<p>　　.kp 朝鲜</p>
<p>　　.kr 韩国</p>
<p>　　.kw 科威特</p>
<p>　　.ky 开曼群岛</p>
<p>　　.kz 哈萨克斯坦</p>
<ul>
<li>L</li>
</ul>
<p>　　.la 老挝</p>
<p>　　.lb 黎巴嫩</p>
<p>　　.lc 圣卢西亚</p>
<p>　　.li 列支敦士登</p>
<p>　　.lk 斯里兰卡</p>
<p>　　.lr 利比里亚</p>
<p>　　.ls 莱索托</p>
<p>　　.lt 立陶宛</p>
<p>　　.lu 卢森堡</p>
<p>　　.lv 拉脱维亚</p>
<p>　　.ly 利比亚</p>
<ul>
<li>M</li>
</ul>
<p>　　.ma 摩洛哥</p>
<p>　　.mc 摩纳哥</p>
<p>　　.md 摩尔多瓦</p>
<p>　　.mg 马达加斯加</p>
<p>　　.mh 马绍尔群岛</p>
<p>　　.mk 马其顿</p>
<p>　　.ml 马里</p>
<p>　　.mm 缅甸</p>
<p>　　.mn 蒙古</p>
<p>　　.mo 中国澳门</p>
<p>　　.mp 北马里亚纳群岛</p>
<p>　　.mq 马提尼克岛</p>
<p>　　.mr 毛里塔尼亚</p>
<p>　　.ms 蒙特塞拉特岛</p>
<p>　　.mt 马耳他</p>
<p>　　.mu 毛里求斯</p>
<p>　　.mv 马尔代夫</p>
<p>　　.mw 马拉维</p>
<p>　　.mx 墨西哥</p>
<p>　　.my 马来西亚</p>
<p>　　.mz 莫桑比克</p>
<ul>
<li>N</li>
</ul>
<p>　　.na 纳米比亚</p>
<p>　　.nc 新喀里多尼亚</p>
<p>　　.ne 尼日尔</p>
<p>　　.nf 诺福克岛</p>
<p>　　.ng 尼日利亚</p>
<p>　　.ni 尼加拉瓜</p>
<p>　　.nl 荷兰</p>
<p>　　.no 挪威</p>
<p>　　.np 尼泊尔</p>
<p>　　.nr 瑙鲁</p>
<p>　　.nu 纽埃岛</p>
<p>　　.nz 新西兰</p>
<p>　</p>
<ul>
<li>O</li>
</ul>
<p>　　.om 阿曼</p>
<ul>
<li>P</li>
</ul>
<p>　　.pa 巴拿马</p>
<p>　　.pe 秘鲁</p>
<p>　　.pf 法属波利尼西亚</p>
<p>　　.pg 巴布亚新几内亚</p>
<p>　　.ph 菲律宾</p>
<p>　　.pk 巴基斯坦</p>
<p>　　.pl 波兰</p>
<p>　　.pm 圣皮埃尔岛及密客隆岛</p>
<p>　　.pn 皮特凯恩群岛</p>
<p>　　.pr 波多黎各</p>
<p>　　.ps 巴勒斯坦</p>
<p>　　.pt 葡萄牙</p>
<p>　　.pw 帕劳</p>
<p>　　.py 巴拉圭</p>
<p>　　</p>
<ul>
<li>Q</li>
</ul>
<p>　　.qa 卡塔尔</p>
<ul>
<li>R</li>
</ul>
<p>　　.re 留尼汪</p>
<p>　　.ro 罗马尼亚</p>
<p>　　.ru 俄罗斯</p>
<p>　　.rw 卢旺达</p>
<ul>
<li>S</li>
</ul>
<p>　　.sa 沙特阿拉伯</p>
<p>　　.sb 所罗门群岛</p>
<p>　　.sc 塞舌尔</p>
<p>　　.sd 苏丹</p>
<p>　　.se 瑞典</p>
<p>　　.sg 新加坡</p>
<p>　　.sh 圣赫勒拿岛</p>
<p>　　.si 斯洛文尼亚</p>
<p>　　.sj 斯瓦尔巴岛和扬马延岛</p>
<p>　　.sk 斯洛伐克</p>
<p>　　.sl 塞拉利昂</p>
<p>　　.sm 圣马力诺</p>
<p>　　.sn 塞内加尔</p>
<p>　　.so 索马里</p>
<p>　　.sr 苏里南</p>
<p>　　.st 圣多美和普林西比</p>
<p>　　.sv 萨尔瓦多</p>
<p>　　.sy 叙利亚</p>
<p>　　.sz 斯威士兰</p>
<ul>
<li>T</li>
</ul>
<p>　　.tc 特克斯和凯科斯群岛</p>
<p>　　.td 乍得</p>
<p>　　.tf 法属南部领土</p>
<p>　　.tg 多哥</p>
<p>　　.th 泰国</p>
<p>　　.tj 塔吉克斯坦</p>
<p>　　.tk 托克劳</p>
<p>　　.tl 东帝汶(新域名)</p>
<p>　　.tm 土库曼斯坦</p>
<p>　　.tn 突尼斯</p>
<p>　　.to 汤加</p>
<p>　　.tp 东帝汶(旧域名，尚未停用)</p>
<p>　　.tr 土耳其</p>
<p>　　.tt 特立尼达和多巴哥</p>
<p>　　.tv 图瓦卢</p>
<p>　　.tw 台湾</p>
<p>　　.tz 坦桑尼亚</p>
<ul>
<li>U</li>
</ul>
<p>　　.ua 乌克兰</p>
<p>　　.ug 乌干达</p>
<p>　　.uk 英国</p>
<p>　　.um 美国本土外小岛屿</p>
<p>　　.us 美国</p>
<p>　　.uy 乌拉圭</p>
<p>　　.uz 乌兹别克斯坦</p>
<ul>
<li>V</li>
</ul>
<p>　　.va 梵蒂冈</p>
<p>　　.vc 圣文森特和格林纳丁斯</p>
<p>　　.ve 委内瑞拉</p>
<p>　　.vg 英属维尔京群岛</p>
<p>　　.vi 美属维尔京群岛</p>
<p>　　.vn 越南</p>
<p>　　.vu 瓦努阿图</p>
<p>　</p>
<ul>
<li>W</li>
</ul>
<p>　　.wf 瓦利斯和富图纳群岛</p>
<p>　　.ws 萨摩亚</p>
<p>　</p>
<ul>
<li>Y</li>
</ul>
<p>　　.ye 也门</p>
<p>　　.yt 马约特岛</p>
<p>　　.yu 塞尔维亚和黑山</p>
<p>　　.yr 耶纽</p>
<ul>
<li>Z</li>
</ul>
<p>　　.za 南非</p>
<p>　　.zm 赞比亚</p>
<p>　　.zw 津巴布韦</p>
]]></content>
      <categories>
        <category>linux基础</category>
      </categories>
      <tags>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoop完全分布式搭建</title>
    <url>/2020/03/20/hadoop%20%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><font color="32CD32">Hadoop</font><br>Hadoop是一个由Apache基金会所开发的分布式系统基础架构。</p>
<p>Hadoop实现了一个分布式文件系统（Hadoop Distributed File System），简称HDFS。HDFS有高容错性的特点，并且设计用来部署在低廉的（low-cost）硬件上；而且它提供高吞吐量（high throughput）来访问应用程序的数据，适合那些有着超大数据集（large data set）的应用程序。HDFS放宽了（relax）POSIX的要求，可以以流的形式访问（streaming access）文件系统中的数据。</p>
<p>Hadoop的框架最核心的设计就是：HDFS和MapReduce。HDFS为海量的数据提供了存储，则MapReduce为海量的数据提供了计算。</p>
<p><font color="32CD32">YARN：</font> (分布式资源管理器) 不同计算框架可以共享同一个HDFS集群上的数据，享受整体的资源调度。</p>
<p>YARN的基本思想是将资源管理和作业调度/监控的功能分解为单独的守护进程（守护进程(daemon)是一类在后台运行的特殊进程，用于执行特定的系统任务。很多守护进程在系统引导的时候启动，并且一直运行直到系统关闭。另一些只在需要的时候才启动，完成任务后就自动结束。）。 这个想法是有一个全局的ResourceManager（RM）和每个应用程序的ApplicationMaster（AM）。 应用程序可以是单个作业，也可以是DAG作业。</p>
<p><font color="32CD32">工作组件介绍</font></p>
<p><code>Client</code>：客户端，系统使用者。</p>
<ol>
<li>文件切分。文件上传 HDFS 的时候，Client 将文件切分成 一个一个的Block，然后进行存储。</li>
<li>与 NameNode 交互，获取文件的位置信息。</li>
<li>与 DataNode 交互，读取或者写入数据。</li>
<li>Client 提供一些命令来管理 HDFS，比如启动或者关闭HDFS。</li>
<li>Client 可以通过一些命令来访问 HDFS。</li>
</ol>
<p><code>NameNode</code>：就是 master，它是一个主管、管理者。</p>
<ol>
<li>管理 HDFS 的名称空间。</li>
<li>管理数据块（Block）映射信息</li>
<li>配置副本策略</li>
<li>处理客户端读写请求。</li>
</ol>
<p><code>DataNode</code>：就是Slave。NameNode 下达命令，DataNode 执行实际的操作。</p>
<ol>
<li>存储实际的数据块。</li>
<li>执行数据块的读/写操作。</li>
<li>定期向NameNode发送心跳信息，汇报本身及其所有的block信息，健康情况。</li>
</ol>
<p><code>Secondary NameNode</code>：并非 NameNode 的热备。当NameNode 挂掉的时候，它并不能马上替换 NameNode 并提供服务。注意：在hadoop 2.x 版本，当启用 hdfs ha 时，将没有这一角色</p>
<ol>
<li>辅助 NameNode，分担其工作量。</li>
<li>定期合并 fsimage和fsedits，并推送给NameNode。</li>
<li>在紧急情况下，可辅助恢复 NameNode。</li>
</ol>
<p><code>ResourceManager</code>， 简称RM，ResourceManager是仲裁系统中所有应用程序之间资源的最终权威机构。（大管理员）</p>
<ol>
<li>整个集群同一时间提供服务的RM只有一个，它负责集群资源的统一管理和调度。</li>
<li>处理客户端的请求，例如：提交作业或结束作业等。</li>
<li>监控集群中的NM，一旦某个NM挂了，那么就需要将该NM上运行的任务告诉AM来如何进行处理。</li>
<li>ResourceManager主要有两个组件：<code>Scheduler</code> 和 <code>ApplicationManager</code>。</li>
<li>Scheduler是一个资源调度器，它主要负责协调集群中各个应用的资源分配，保障整个集群的运行效率。Scheduler的角色是一个纯调度器，它只负责调度Containers，不会关心应用程序监控及其运行状态等信息。同样，它也不能重启因应用失败或者硬件错误而运行失败的任务。Scheduler是一个可插拔的插件，它可以调度集群中的各种队列、应用等。</li>
<li>ApplicationManager主要负责接收job的提交请求，为应用分配第一个Container来运行ApplicationMaster，还有就是负责监控ApplicationMaster，在遇到失败时重启ApplicationMaster运行的Container。</li>
</ol>
<p><code>NodeManager</code>， 简称NM，（执行者，小员工）</p>
<ol>
<li>整个集群中会有多个NM，它主要负责自己本身节点的资源管理和使用。</li>
<li>定时向RM汇报本节点的资源使用情况。</li>
<li>接收并处理来自RM的各种命令，例如：启动Container。</li>
<li>NM还需要处理来自AM的命令，例如：AM会告诉NM需要启动多少个Container来跑task，单个节点的资源管理。</li>
</ol>
<p><code>ApplicationMaster</code>， 简称AM，应用级别（小管理员）</p>
<ol>
<li>每个应用程序都对应着一个AM。例如：MapReduce会对应一个、Spark会对应一个，它主要负责应用程序的管理。</li>
<li>为应用程序向RM申请资源（Core、Memory），将资源分配给内部的task。</li>
<li>AM需要与NM通信，以此来启动或停止task。遇到失败的任务还负责重启它。</li>
</ol>
<p><code>Container</code></p>
<ol>
<li>封装了CPU、Memory等资源的一个容器</li>
<li>是一个任务运行环境的抽象</li>
</ol>
<h1 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h1><p><font color="32CD32">实验环境：</font></p>
<table>
<thead>
<tr>
<th align="center">主机名</th>
<th align="center">IP地址</th>
<th align="center">运行组件</th>
</tr>
</thead>
<tbody><tr>
<td align="center">hadoop0</td>
<td align="center">192.168.40.100</td>
<td align="center">NameNode，ResourceManager，SecondaryNameNode</td>
</tr>
<tr>
<td align="center">hadoop1</td>
<td align="center">192.168.40.101</td>
<td align="center">NodeManager，DataNode</td>
</tr>
<tr>
<td align="center">hadoop2</td>
<td align="center">192.168.40.102</td>
<td align="center">NodeManager，DataNode</td>
</tr>
</tbody></table>
<h2 id="JDK-安装"><a href="#JDK-安装" class="headerlink" title="JDK 安装"></a>JDK 安装</h2><p>所有节点均安装：<a href="https://hxqxiaoqi.gitee.io/2019/06/04/JDK1.8环境安装-linux/">jdk安装教程</a></p>
<h2 id="hosts-配置"><a href="#hosts-配置" class="headerlink" title="hosts 配置"></a>hosts 配置</h2><p>所有节点均配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &gt;&gt; /etc/hosts &lt;&lt; EOF</span><br><span class="line">192.168.40.100 hadoop0</span><br><span class="line">192.168.40.101 hadoop1</span><br><span class="line">192.168.40.102 hadoop2</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h2 id="ssh-免密配置"><a href="#ssh-免密配置" class="headerlink" title="ssh 免密配置"></a>ssh 免密配置</h2><p>在所有节点上执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需要输入的，一路回车就行</span></span><br><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>

<p>在 192.168.40.100 执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<p>将其他节点的公钥添加进authorized_keys，之后执行以下命令：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">scp ~<span class="regexp">/.ssh/authorized</span>_keys root<span class="variable">@hadoop1</span><span class="symbol">:/root/</span>.ssh/</span><br><span class="line">scp ~<span class="regexp">/.ssh/authorized</span>_keys root<span class="variable">@hadoop2</span><span class="symbol">:/root/</span>.ssh/</span><br></pre></td></tr></table></figure>

<h2 id="ntp-时间同步"><a href="#ntp-时间同步" class="headerlink" title="ntp 时间同步"></a>ntp 时间同步</h2><p>所有节点执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install ntp</span><br><span class="line">ntpdate -u ntp1.aliyun.com</span><br></pre></td></tr></table></figure>

<h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><p>所有节点执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看防火墙状态</span></span><br><span class="line">firewall-cmd --state</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止firewall</span></span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁止firewall开机启动</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service</span><br></pre></td></tr></table></figure>

<h2 id="hadoop-安装"><a href="#hadoop-安装" class="headerlink" title="hadoop 安装"></a>hadoop 安装</h2><p><font color="32CD32">以下操作只有在 192.168.40.100 上执行，全部配置好后，再传给其它节点。</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget http://mirror.bit.edu.cn/apache/hadoop/common/hadoop-2.7.7/hadoop-2.7.7.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar xf hadoop-2.7.7.tar.gz -C /opt/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到配置目录</span></span><br><span class="line"><span class="built_in">cd</span> /opt/hadoop-2.7.7/etc/hadoop/</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">修改 hadoop-env.sh</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改jdk环境变量</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/opt/jdk1.8.0_221</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">修改 yarn-env.sh</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加jdk环境变量</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/opt/jdk1.8.0_221/</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">修改 core-site.xml</font></p>
<p>注：file后的路径下的temp文件夹需要自己创建，所有节点均创建</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    	<span class="comment">&lt;!-- 指定HDFS老大（namenode）的通信地址 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://hadoop0:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>io.file.buffer.size<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>131072<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    	<span class="comment">&lt;!-- 指定hadoop运行时产生文件的存储路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/temp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.root.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.root.groups<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><font color="32CD32">修改 hdfs-site.xml</font></p>
<p>注：file后的路径下的/dfs/文件夹需要自己创建，所有节点均创建</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    	<span class="comment">&lt;!-- 设置secondarynamenode的http通讯地址 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop0:9001<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    	<span class="comment">&lt;!-- 设置namenode存放的路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/dfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    	<span class="comment">&lt;!-- 设置datanode存放的路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/dfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    	<span class="comment">&lt;!-- 设置hdfs副本数量 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.webhdfs.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.permissions<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.web.ugi<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>supergroup<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><font color="32CD32">修改 mapred-site.xml</font></p>
<p>注：要将mapred-site.xml.template重命名为 .xml的文件   mv mapred-site.xml.template mapred-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    	<span class="comment">&lt;!-- 通知框架MR使用YARN --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop0:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop0:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><font color="32CD32">修改 yarn-site.xml</font></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    	<span class="comment">&lt;!-- reducer取数据的方式是mapreduce_shuffle --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services.mapreduce.shuffle.class<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.mapred.ShuffleHandler<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop0:8032<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.scheduler.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop0:8030<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.resource-tracker.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop0:8031<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.admin.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop0:8033<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    	<span class="comment">&lt;!-- resourcemanager web访问端口 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop0:8088<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><font color="32CD32">修改 slaves</font></p>
<p>指定从节点：会运行 <code>NodeManager</code> 与 <code>DataNode</code> 组件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hadoop1</span><br><span class="line">hadoop2</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">配置 hadoop 环境变量</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &gt;&gt; /etc/profile &lt;&lt; EOF</span><br><span class="line"><span class="comment"># hadoop环境变量</span></span><br><span class="line"><span class="built_in">export</span>  HADOOP_HOME=/opt/hadoop-2.7.7/</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HADOOP_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/sbin</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">拷贝文件到其它节点</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拷贝hadoop-2.7.</span></span><br><span class="line">scp -r /opt/hadoop-2.7.7/ root@hadoop1:/opt/</span><br><span class="line">scp -r /opt/hadoop-2.7.7/ root@hadoop2:/opt/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝profile文件，之后需要在其它节点执行：source /etc/profile 使配置生效</span></span><br><span class="line">scp /etc/profile root@hadoop1:/etc/</span><br><span class="line">scp /etc/profile root@hadoop2:/etc/</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">格式化主节点的namenode，我的主节点是 192.168.40.100</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 主节点上进入hadoop目录</span></span><br><span class="line"><span class="built_in">cd</span> /opt/hadoop-2.7.7/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后执行：提示：successfully formatted表示格式化成功</span></span><br><span class="line">./bin/hadoop namenode -format</span><br><span class="line"></span><br><span class="line"><span class="comment">#新版本用下面的语句不用hadoop命令了</span></span><br><span class="line">./bin/hdfs namenode -format</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">启动与关闭</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/hadoop-2.7.7/</span><br><span class="line">./sbin/start-all.sh</span><br><span class="line">./sbin/stop-all.sh</span><br></pre></td></tr></table></figure>

<p><font color="32CD32">查看各节点进程</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 主节点</span></span><br><span class="line">[root@hadoop0 hadoop]<span class="comment"># jps</span></span><br><span class="line">4051 NameNode</span><br><span class="line">4389 ResourceManager</span><br><span class="line">9611 Jps</span><br><span class="line">4238 SecondaryNameNode</span><br><span class="line"></span><br><span class="line"><span class="comment"># 两个子节点</span></span><br><span class="line">[root@hadoop1 hadoop]<span class="comment"># jps</span></span><br><span class="line">1990 NodeManager</span><br><span class="line">3575 Jps</span><br><span class="line">1885 DataNode</span><br></pre></td></tr></table></figure>

<p>如果全部启动成功，表示安装完成</p>
<p><font color="32CD32">访问</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 访问 hdfs web管理界面</span></span><br><span class="line">curl http://192.168.40.100:50070</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问 yarn web管理界面</span></span><br><span class="line">curl http://192.168.40.100:8088</span><br></pre></td></tr></table></figure>

<h1 id="HA自动切换配置"><a href="#HA自动切换配置" class="headerlink" title="HA自动切换配置"></a>HA自动切换配置</h1><p>参考文档：<a href="https://blog.csdn.net/weixin_37838429/article/details/81710045" target="_blank" rel="noopener">https://blog.csdn.net/weixin_37838429/article/details/81710045</a></p>
<h2 id="zk安装"><a href="#zk安装" class="headerlink" title="zk安装"></a>zk安装</h2><p><a href="https://hxqxiaoqi.gitee.io/2020/03/26/zookeeper%20%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/">安装zookeeper</a></p>
<h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>在192.168.40.100上执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /opt/HA</span><br><span class="line">cp -r /opt/hadoop-2.7.7/ /opt/HA</span><br></pre></td></tr></table></figure>

<p>修改core-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 把两个NameNode）的地址组装成一个集群mycluster --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://mycluster<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 声明journalnode服务本地文件系统存储目录--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.journalnode.edits.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/HA/hadoop-2.7.7/data/jn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 指定hadoop运行时产生文件的存储目录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/HA/hadoop-2.7.7/data/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>ha.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop0:2181,hadoop1:2181,hadoop2:2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改hdfs-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 完全分布式集群名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.nameservices<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mycluster<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 集群中NameNode节点都有哪些 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.namenodes.mycluster<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>nn1,nn2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- nn1的RPC通信地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.rpc-address.mycluster.nn1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop0:8020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- nn2的RPC通信地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.rpc-address.mycluster.nn2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop1:8020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- nn1的http通信地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address.mycluster.nn1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop0:50070<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- nn2的http通信地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address.mycluster.nn2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop1:50070<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 指定NameNode元数据在JournalNode上的存放位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.shared.edits.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>qjournal://hadoop0:8485;hadoop1:8485;hadoop2:8485/mycluster<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置隔离机制，即同一时刻只能有一台服务器对外响应 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.fencing.methods<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>sshfence<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用隔离机制时需要ssh无秘钥登录--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.fencing.ssh.private-key-files<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/root/.ssh/id_rsa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 关闭权限检查--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.permissions.enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 访问代理类：client，mycluster，active配置失败自动切换实现方式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.client.failover.proxy.provider.mycluster<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.automatic-failover.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>分发配置到其它机器上</p>
<h2 id="启动步骤"><a href="#启动步骤" class="headerlink" title="启动步骤"></a>启动步骤</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭所有HDFS服务：</span></span><br><span class="line">sbin/stop-dfs.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Zookeeper集群：</span></span><br><span class="line">bin/zkServer.sh start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化HA在Zookeeper中状态，在master上执行</span></span><br><span class="line">bin/hdfs zkfc -formatZK</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动HDFS服务：</span></span><br><span class="line">sbin/start-dfs.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在各个NameNode节点上启动DFSZK Failover Controller，先在哪台机器启动，哪个机器的NameNode就是Active NameNode</span></span><br><span class="line"><span class="comment"># 说明：如果使用start-dfs.sh启动集群，不需要单独启动zkfc</span></span><br><span class="line">sbin/hadoop-daemon.sh start zkfc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证:将Active NameNode进程kill</span></span><br><span class="line"><span class="built_in">kill</span> -9 namenode的进程id</span><br></pre></td></tr></table></figure>

<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单独启动journalnode</span></span><br><span class="line">sbin/hadoop-daemon.sh start journalnode</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化</span></span><br><span class="line">bin/hdfs namenode -format</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单独启动namenode</span></span><br><span class="line">sbin/hadoop-daemon.sh start namenode</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在[nn2]上，同步nn1的元数据信息：</span></span><br><span class="line">bin/hdfs namenode -bootstrapStandby</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动所有datenode</span></span><br><span class="line">sbin/hadoop-daemons.sh start datanode</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将[nn1]切换为Active</span></span><br><span class="line">bin/hdfs haadmin -transitionToActive nn1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否Active</span></span><br><span class="line">bin/hdfs haadmin -getServiceState nn1</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>linux常用命令</title>
    <url>/2019/06/09/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="命令大全"><a href="#命令大全" class="headerlink" title="命令大全"></a>命令大全</h1><ol>
<li>ls 显示目录文件 <pre><code>选项：
-d 显示当前目录
-i    显示inode号
-h    常见单位显示
-a    显示所有文件包括隐藏文件</code></pre></li>
<li>cd 切换目录（shell内置命令）<pre><code>cd - 进入上一次目录
cd ~ 进入家目录
cd .. 进入上级目录</code></pre></li>
<li>pwd 显示当前路径</li>
<li>mkdir    建立目录<pre><code>例：mkdir -p /huang/xiao/qi 递归建立</code></pre></li>
<li>rm 删除文件    <pre><code>选项：-r递归，删除目录 
-f强制
例：rm -rf 文件和目录</code></pre></li>
<li>tree 显示目录下所有目录树（要安装的命令）</li>
<li>touch 创建新文件或修改文件时间</li>
<li>cat 查看文件内容 <pre><code>选项：-n显示行号
例：cat -n 文件名</code></pre></li>
<li>more 分页显示文件内容<pre><code>空格键：下翻        n键：上翻        q键：退出</code></pre></li>
<li>less 分行显示文件内容<pre><code>空格键或pgdn：下翻    pgup键：上翻 q键：退出</code></pre></li>
<li>head 显示文件头，默认10行<pre><code>选项：-n 指定显示文件头几行</code></pre></li>
<li>tail 显示文件后几行，默认10行<pre><code>选项：-n 指定显示文件头几行
-f    监听文件尾部</code></pre></li>
<li>cp 复制文件（如果复制链接文件，则复制原文件）<pre><code>选项：-r 复制目录（包括目录内文件数据）
-p 连带文件属性复制
-d 若源文件是链接文件，则复制链接属性
-a 相当于-rpd
例：cp -pdr 源文件位置 目的位置</code></pre></li>
<li>mv 剪切或改名<pre><code>例：mv 源文件 目的文件位置</code></pre></li>
<li>type 区分命令类型<pre><code>例：type 命令</code></pre></li>
<li>ln 生成链接文件（硬链接）<pre><code>选项：-s 生成软链接
例：ln -s 源文件 目的文件</code></pre></li>
<li>chmod 修改权限<pre><code>例：chmod 775 文件或目录
选项：-R    递归设置，将设置到该目录上的权限递归设置到该目录下的所有子文件上</code></pre></li>
<li>chown 修改所有者<pre><code>例：chown 用户:用户组 文件或目录名 （同时修改所有者和所属组）
选项：-R    递归设置，将设置到该目录上的所有者递归设置到该目录下的所有子文件上</code></pre></li>
<li>chgrp 修改所属组<pre><code>例：chgrp 所属组 文件名或目录</code></pre></li>
<li>umask 查看文件和目录默认权限</li>
<li>man 查看命令帮助<pre><code>例： man -f 命令
选项：-f 查看命令等级</code></pre>0-9 命令等级</li>
<li>help 查看内部命令帮助<pre><code>例：help 内部命令</code></pre></li>
<li>–help 查看常用命令选项帮助<pre><code>例：命令 --help
命令 --version 查看命令作者</code></pre></li>
<li>info查看帮助页<pre><code>例：info 命令
选项：n进入下一小节
p进入上一小节
q退出
enter确认</code></pre></li>
<li>which查找存储命令路径与alias别名<pre><code>例：which 命令</code></pre></li>
<li>whereis查找存储命令路径与man帮助存储位置<pre><code>例：whereis 命令</code></pre></li>
<li>whatis 查询命令帮助等级<pre><code>例：whereis 命令</code></pre></li>
<li>locate按文件名查找系统中的文件（包含匹配，在系统数据库中查找）<pre><code>例：locate 文件名
配置文件：/etc/updatedb.conf
配合命令：updatedb强制更新数据库/var/lib/mlocate/mlocatedb位置</code></pre></li>
<li>find 查询符合条件的文件名（完全匹配，可用通配符）<pre><code>例：find 查找位置 选项 文件名
选项：-name 按文件名查找
-iname 不区分大小写
-size    按文件大小查找
-type    按文件类型查找（f：文件d：目录l：链接）
-ctime    按权限修改时间查找，如+4，-4，4天
-mtime按数据修改时间查找
-atime    按访问时间查找
-nouser按没有属主的文件查找
-user    按用户名查找
-group 按用户组查找
-uid    按用户ID查找
-gid    按属组组ID查找
-inum    按i节点查找
-perm    按权限查找，如775
-exec  {}  \；管道符作用</code></pre></li>
<li>grep 查找符合条件的字符串，文件中查找数据，包含匹配<pre><code>例：grep “字符串” 文件名
选项：-i 不区分大小写
-v 反向
-c 统计符合条件的行数
-A 数字  #列出符合条件的行，并连续列出后面n行
-B 数字  #列出符合条件的行，并连续列出前面n行
--colour=auto 查找字符显示红色</code></pre></li>
<li>“|” 管道符，命令1的结果作为命令2的条件<pre><code>例：ls -l | grep “^-”</code></pre></li>
<li>netstat 查看系统网络状态<pre><code>例：netstat -tuln
选项：-t    显示tcp
-u    显示udp
-l    监听
-n    显示IP和端口</code></pre></li>
<li>tar 打包压缩命令<pre><code>例：tar -zcvf 压缩文件名 源文件
选项：-z：gz格式    -j：bz2格式    
-c：解压        -x：压缩
-t：显示压缩文件不解压
-C：解压到指定位置
tar -zxvf 123.tar.gz 123/aaa -C /root/ 解压其中一个文件</code></pre></li>
<li>w 查看当前在线用户（显示用户登入时间，在线持续时间，1,5,15分钟前的cpu负载，来源IP） </li>
<li>who查看当前在线用户（在线持续时间，来源IP）</li>
<li>last 列出登入相关信息（显示用户开始登入时间，退出登入时间，在线时间，系统重启时间）<pre><code>文件位置：/var/run/wtmp</code></pre></li>
<li>lastlog显示账户最后一次登入时间<pre><code>文件位置：/var/run/utmp</code></pre></li>
<li>write 给在线用户写信息</li>
<li>wall对所有在线用户说话</li>
<li>mail邮件命令<pre><code>例：mail 用户名 （写信ctrl+d:保存退出）
选项：1    2  查看对于邮件 h列出邮件标题  q退出
邮件保存位置：/var/spool/mail/root</code></pre></li>
<li>ping网络探测<pre><code>选项：-c    指定次数
-s    指定数据包大小</code></pre></li>
<li>ifconfig查看网卡配置<pre><code>例：ifconfig etho0 配置临时生效网卡</code></pre></li>
<li>netstat查看网络状态<pre><code>例：netstat -tuln
选项：-t tcp    
-u udp        
-l listen        
-n 显示IP和端口
配置文件：/etc/services</code></pre></li>
<li>telnet 测试端口连通性<pre><code>例：telnet  IP 端口</code></pre></li>
<li>sync数据同步，强制把内存数据保存到硬盘</li>
<li>shutdown关机重启命令<pre><code>例：shutdown -r now重启（可以指定时间，建议使用）
shutdown -h now关机</code></pre></li>
<li>mount挂载命令（直接执行可以查看已经挂载的挂载点）<pre><code>例：mount [-t iso9660] /dev/sr0 挂载点
选项：-t 文件系统 光盘iso9660   U盘fat:16或vfat：32
-L 卷标名 挂载指定卷标的分区
-o 特殊选项 可以指定挂载的额外选项
常用挂载
挂载光盘
例：mount 【-t iso9660】 /dev/sr0 /mnt/cdrom
卸载挂载
例：umount /mnt/cdrom
指定字符编码挂载
例：mount -o iocharset=utf8 /dev/sr0 /mnt/cdrom/
挂载特殊指定项
mount  -o  remount,exec  挂载点（remount针对已挂载）
挂载本地镜像
mount  -o  loop  镜像文件  挂载点
查看分硬盘区
例：fdisk -l
显示当前系统字符编码
例：echo $LANG
修改字符编码
例：    $LANG=zh_CN.UTF-8
$LANG=en_US.UTF-8
强制把内存数据保存到硬盘中（建议重启前使用）
例：sync 
重启命令（建议使用）
例：shutdown -r now 或指定时间 05:30</code></pre></li>
<li>umount 卸载挂载点<pre><code>例：umount 挂载点或设备文件名</code></pre></li>
<li>rpm二进制包安装命令<pre><code>例：rpm -ivh 包全名
选项：-i：安装
-v：显示更详细信息
-h：显示安装进度
-q：查询包是否安装
-a：查询所有安装包
-qi：查询安装包的信息
-qip：查询未安装包的信息
-ql：查询包中，文件的安装位置
-qf：查询系统文件属于哪个安装包
-qR：查询软件包所依赖的软件包
-qRp：查询没有安装的软件包的依赖包
-e：卸载
-V：检验安装包有没有修改过
-U：升级安装包，如果没有安装，就安装
-F：升级安装包，如果没有安装，就不安装
--force：强制安装，用于文件丢失
--import：用于导入数字证书，安装包在</code></pre></li>
<li>date修改时间命令<pre><code>例：date -s 20180613或15:12:11
选项：-s：指定时间</code></pre></li>
<li>lrzsz安装包，用于xshell上传或下载文件的<pre><code>例：先安装lrzsz安装包，
选项：rz：下载
sz：上传</code></pre></li>
<li>dos2unix和Unix2dos安装包，需要安装，用于Windows和Linux系统之间的文件转换<pre><code>例：dos2unix 文件名 或 unix2dos 文件名</code></pre></li>
<li>yum在线安装<pre><code>例：yum -y install 包名
选项：install安装
remove卸载
update升级（如果不指定包名，就全部软件升级，小心使用）
list查看yum源所有可以安装的rpm包，可以指定包名
search查看yum源中所有与关键字相关的包
info查看包的信息
grouplist查看所有软件组
groupinstall安装指定组包
groupinfo查看组包中的软件
groupremove卸载组包</code></pre></li>
<li>LANG查看系统当前语言<pre><code>例：LANG=zh_CN.UTF-8
选项：echo $LANG 查看当前使用语言</code></pre></li>
<li>uname -r    查看系统内核版本</li>
<li>du 统计目录大小（统计文件大小是准确的）<pre><code>例：du -sh 目录
选项：-h 人性化显示
-s 和
-a    显示每个子文件磁盘占用量</code></pre></li>
<li>df 查看分区大小（查看硬盘剩余空间是准确的）<pre><code>例：df -h
选项：-h 人性化显示
-a    显示所有文件系统
-T    显示挂着的文件系统类型</code></pre></li>
<li>diff 生成补丁<pre><code>例：diff  -Naur 旧文件 新文件  &gt; 补丁文件</code></pre></li>
<li>patch导入补丁命令<pre><code>例：patch -pn &lt; 补丁名  （-n：数字  -p：取消路径等级）</code></pre></li>
<li>防火墙关闭<pre><code>例：iptables  -F    （临时生效，清空防火墙配置）
service  iptables  stop（永久生效，停止防火墙服务）
chkconfig  iptables  off（永久生效，防火墙服务开机不启动）</code></pre></li>
<li>useradd添加用户<pre><code>例：useradd  选项  参数  用户名
选项：    -u：UID
-g：指定初始组
-d：指定家目录，目录不需要事先创建
-s：指定登录shell
-G：指定附加组
-r：创建系统用户，默认密码失效，没有家目录，与-s一起使用，指定shell为/sbin/nologin</code></pre></li>
<li>passwd修改密码<pre><code>例：passwd  选项  用户
选项：    -l：锁定用户密码
-u：解锁用户密码
-U：查看密码状态</code></pre></li>
<li>usermod用户信息修改<pre><code>例：usermod  选项  用户名
usermod -m -d /home/已更改名  用户名
选项：    -u：修改UID
-g：修改初始组
-d：修改家目录与-m一起使用
-L：锁定密码
-U：解锁密码
-G：修改附加组
-l 新用户名 旧用户名   修改用户名
-s：修改登录的shell</code></pre></li>
<li>userdel删除用户<pre><code>例：userdel 选项 用户名
选项：-r：连家目录一起删除</code></pre></li>
<li>groupadd增加组<pre><code>例：groupadd 组名</code></pre></li>
<li>groupdel删除组<pre><code>例：groupdel 组名（尽量空组）</code></pre></li>
<li>gpasswd向组内添加成员<pre><code>例：gpasswd 选项 用户名 组名
选项：-a：指定一个用户添加到组
-d：删除组内成员
-M：批量添加组成员</code></pre></li>
<li>echo  $?（上次命令是否执行成功，0表示成功，非0表示错误）     </li>
<li>id显示用户的UID，初始组，附加组<pre><code>例：id 用户名</code></pre></li>
<li>su切换用户<pre><code>例：su 用户名
例：su - 用户名 连带环境变量一起切换</code></pre></li>
<li>newgrp切换有效组<pre><code>例：newgrp    组</code></pre></li>
<li>dumpe2fs查看ACL权限<pre><code>例：dumpe2fs  分区  |  grep  acl</code></pre></li>
<li>setfacl设置ACL权限<pre><code>例：setfacl -m u:用户名:权限 文件名（添加ACL权限rwx）
setfacl -x u:用户 文件名（删除ACL权限）
setfacl -b 文件名（清空ACL权限，包括mask）
setfacl -m u:权限（设置mask权限）
setfacl -R -m u:用户名:权限 文件名（递归设置）
setfacl -d -m u:用户名:权限 文件名（默认权限设置）</code></pre></li>
<li>getfacl查看文件权限<pre><code>例：getfacl  文件名或目录</code></pre></li>
<li>chattr 文件属性设置<pre><code>例：chattr +i 文件或目录
选项：i：对文件，不允许任何操作修改
对目录，那么只能修改目录下文件的数据 
a：对文件，那么只能在文件中增加数据
对目录，那么只允许在目录中建立和修改文件
e：表示该文件是使用ext文件系统进行存储的，而且不能使用“chattr -e”命令取消e属性</code></pre></li>
<li>lsattr 查看文件属性<pre><code>例：lsattr    -a    文件名
选项：-a 显示所有
-d    如果目标是目录，仅显示目录本身</code></pre>77．fsck文件系统修复命令<pre><code>例：fsck    -y    分区名</code></pre></li>
<li>dumpe2fs 显示磁盘状态<pre><code>例：dumpe2fs    -h    分区名    
#卷标，挂载点，UUID，挂载参数，文件系统状态，inode总量/空闲，block总量/空闲，单个block大小</code></pre></li>
<li>stat显示文件详细信息<pre><code>例：stat    文件名
#文件名，文件大小，占用的block的大小，所在设备编号，硬链接数，属组，属主，权限，访问时间，数据修改时间，状态时间</code></pre></li>
<li>file判断文件类型<pre><code>例：file    文件名</code></pre></li>
<li>type判断命令是否是内部或外部命令<pre><code>例：tpye    命令</code></pre></li>
<li>fdisk分区命令MBR<pre><code>例：fdisk    -l    查看磁盘分区
选项：fdisk    进入分区交互模式
-m    操作菜单
-n    新建分区
-p    查看分区
-d    删除分区
-q    退出不保存
-w    退出保持
-t    修改分区属性（可以更改swap分区用）
-L    查看分区属性</code></pre></li>
<li>partprobe强制读取所有分区<pre><code>例：若分区报错，可使用此命令，若没安装，parted-2*安装包</code></pre></li>
<li>mkfs格式化分区<pre><code>例：mkfs    -t    ext4    分区名
mkfs    -t    ext4    -b4096        -i4096        分区
mkfs.ext4        分区</code></pre></li>
<li>parted分区命令GPT<pre><code>例：parted    分区    #进入交互模式
选项：p    打印分区表
mklabel    更改分区表类型gpt/msdos
mkpart        创建分区
rm            删除分区
q            退出（修改实时生效）</code></pre></li>
<li>swap分区命令<pre><code>例：1.fdisk分区</code></pre></li>
<li>更改分区属性为swap<br>  3.mkswap    格式化分区<br>  4.swapon        开启swap分区</li>
<li>free查看swap分区状态</li>
<li>quota磁盘配额相关命令<pre><code>选项：quotacheck    -avgu    生产磁盘配额文件
-a            #扫描所有磁盘
-v            #显示扫描过程
-c            #清楚原有文件重新生成行动文件
-g            #生成组文件
-u            #生成用户文件
edquota    -u    用户名    #指定用户限制设置
-g    组名        #指定组限制设置
-t                #用户宽限天数设置
-T                #组宽限天数设置
-p                #复制设置
quota    -uvs                #查看此用户在所有磁盘的配额
quota    -hvs            #查看此组在所有磁盘的配额
repquota    -ugvs    分区    #查看该分区的所有配额设置
quotaon    -guav    分区    #开启指定分区磁盘配额设置
quotaoff    -guav    分区    #关闭指定分区磁盘配额设置 </code></pre></li>
<li>dd用指定大小的块拷贝一个文件<pre><code>if=指定源文件
of=指定目的文件
bs=bytes：同时设置读入/输出的块大小为bytes个字节
count=blocks：仅拷贝blocks个块，块大小等于ibs指定的字节
dd应用实例</code></pre></li>
<li>将本地的/dev/hdb整盘备份到/dev/hdd<pre><code>dd if=/dev/hdb of=/dev/hdd</code></pre></li>
<li>将/dev/hdb全盘数据备份到指定路径的image文件<pre><code>dd if=/dev/hdb of=/root/image</code></pre></li>
<li>将备份文件恢复到指定盘<pre><code>dd if=/root/image of=/dev/hdb</code></pre></li>
<li>备份/dev/hdb全盘数据，并利用gzip工具进行压缩，保存到指定路径<pre><code>dd if=/dev/hdb | gzip &gt; /root/image.gz</code></pre></li>
<li>将压缩的备份文件恢复到指定盘<pre><code>gzip -dc /root/image.gz | dd of=/dev/hdb</code></pre></li>
<li>备份与恢复MBR<pre><code>a.备份磁盘开始的512个字节大小的MBR信息到指定文件：
dd if=/dev/hda of=/root/image count=1 bs=512
count=1指仅拷贝一个块；bs=512指块大小为512个字节。
b.恢复：
dd if=/root/image of=/dev/had
将备份的MBR信息写到磁盘开始部分</code></pre></li>
<li>拷贝内存内容到硬盘<pre><code>dd if=/dev/mem of=/root/mem.bin bs=1024 (指定块大小为1k)</code></pre></li>
<li>拷贝光盘内容到指定文件夹，并保存为cd.iso文件<pre><code>dd if=/dev/cdrom(sr0) of=/root/cd.iso</code></pre></li>
<li>增加swap分区文件大小<pre><code>第一步：创建一个大小为256M的文件：
dd if=/dev/zero of=/swapfile bs=1024 count=262144
第二步：把这个文件变成swap文件：
mkswap /swapfile
第三步：启用这个swap文件：
swapon /swapfile
第四步：编辑/etc/fstab文件，使在每次开机时自动加载swap文件：
/swapfile swap swap default 0 0</code></pre></li>
<li>销毁磁盘数据<pre><code>dd if=/dev/urandom of=/dev/hda1
注意：利用随机的数据填充硬盘，在某些必要的场合可以用来销毁数据。</code></pre></li>
<li>测试硬盘的读写速度<pre><code>dd if=/dev/zero bs=1024 count=1000000 of=/root/1Gb.file
dd if=/root/1Gb.file bs=64k | dd of=/dev/null</code></pre></li>
<li>确定硬盘的最佳块大小：<pre><code>dd if=/dev/zero bs=1024 count=1000000 of=/root/1Gb.file
dd if=/dev/zero bs=2048 count=500000 of=/root/1Gb.file
dd if=/dev/zero bs=4096 count=250000 of=/root/1Gb.file
dd if=/dev/zero bs=8192 count=125000 of=/root/1Gb.file</code></pre></li>
<li>LVM逻辑卷管理命令<pre><code>选项：    pvcreate 磁盘设备名            #创建物理卷
pvscan或pvdisplay            #查看物理卷
pvremove                        #删除物理卷
vgcreate -s PE大小 卷组名 物理卷名        #创建卷组
vgscan或vgdisplay            #查看卷组
vgremove 卷组名                #删除卷组
vgextend 卷组名 物理卷名        #增加物理卷
vgreduce 卷组名 物理卷名        #删除物理卷
lvcreate -L 大小 -n lv名 卷组名         #创逻辑卷
lvscan或lvdisplay            #查看逻辑卷
lvremove 逻辑卷名                #删除逻辑卷
lvextend -L +大小 分区名        #增加逻辑卷容量，只修改MBR表
resize -f 分区名 分区实际大小            #修改superblock大小            e2fsck -f 分区名                #检查文件系统
resize -f 分区名 减少到大小 #与增加大小反着来
lvreduce -L 实际大小 分区名</code></pre></li>
<li>RAID设置命令<pre><code>例：mdadm -Cv md* -l10 -n4 磁盘 -x2 热备    #创建RAID10 
mdadm  -D  查看RAID10状态
mdadm  -f  cip                               #指定磁盘损坏
mdadm  设备名md*  --remove  磁盘  #移除磁盘    
mdadm  设备名md*  --add        磁盘    #添加磁盘
mdadm  -S  设备名md*                   #停止RAID
mdadm    --zero-superblock  设备名md*  #删除RAID </code></pre></li>
<li>set查询当前所有生效的变量<pre><code>例：set  -u  #设置后，被调用的无效变量报错
set  -x  #设置后，每次执行命令，打印一次命令
unset 变量名  #取消变量</code></pre></li>
<li>env只查询环境变量 </li>
<li>echo 输出到屏幕<pre><code>例：echo  -e  “字符或格式”
选项：-e 支持反斜线控制的字符转换
-n 取消输出后行尾的换行符</code></pre></li>
<li>history历史命令<pre><code>例：history  -c  #清空历史命令
-w  #把缓存的历史命令保存到配置文件中</code></pre></li>
<li>dd命令详解<pre><code>作用
dd：用指定大小的块拷贝一个文件
格式
dd if=/dev/zero of=/指定目录 bs=1M count=1000
if=文件名：输入文件名，缺省为标准输入。即指定源文件。&lt; if=input file &gt;
of=文件名：输出文件名，缺省为标准输出。即指定目的文件。&lt; of=output file &gt;
bs=bytes：同时设置读入/输出的块大小为bytes个字节。
count=blocks：仅拷贝blocks个块，块大小等于ibs指定的字节数。
dd应用实例</code></pre></li>
<li>将本地的/dev/hdb整盘备份到/dev/hdd<pre><code>dd if=/dev/hdb of=/dev/hdd</code></pre></li>
<li>将/dev/hdb全盘数据备份到指定路径的image文件<pre><code>dd if=/dev/hdb of=/root/image</code></pre></li>
<li>将备份文件恢复到指定盘<pre><code>dd if=/root/image of=/dev/hdb</code></pre></li>
<li>备份/dev/hdb全盘数据，并利用gzip工具进行压缩，保存到指定路径<pre><code>dd if=/dev/hdb | gzip &gt; /root/image.gz</code></pre></li>
<li>将压缩的备份文件恢复到指定盘<pre><code>gzip -dc /root/image.gz | dd of=/dev/hdb</code></pre></li>
<li>备份与恢复MBR<pre><code>a.备份磁盘开始的512个字节大小的MBR信息到指定文件：
dd if=/dev/hda of=/root/image count=1 bs=512
count=1指仅拷贝一个块；bs=512指块大小为512个字节。
b.恢复：
dd if=/root/image of=/dev/had
将备份的MBR信息写到磁盘开始部分</code></pre></li>
<li>拷贝内存内容到硬盘<pre><code>dd if=/dev/mem of=/root/mem.bin bs=1024 (指定块大小为1k)</code></pre></li>
<li>拷贝光盘内容到指定文件夹，并保存为cd.iso文件<pre><code>dd if=/dev/cdrom(sr0) of=/root/cd.iso</code></pre></li>
<li>增加swap分区文件大小<pre><code>第一步：创建一个大小为256M的文件：
dd if=/dev/zero of=/swapfile bs=1024 count=262144
第二步：把这个文件变成swap文件：
mkswap /swapfile
第三步：启用这个swap文件：
swapon /swapfile
第四步：编辑/etc/fstab文件，使在每次开机时自动加载swap文件：
/swapfile swap swap default 0 0</code></pre></li>
<li>销毁磁盘数据<pre><code>dd if=/dev/urandom of=/dev/hda1
注意：利用随机的数据填充硬盘，在某些必要的场合可以用来销毁数据。</code></pre></li>
<li>测试硬盘的读写速度<pre><code>dd if=/dev/zero bs=1024 count=1000000 of=/root/1Gb.file
dd if=/root/1Gb.file bs=64k | dd of=/dev/null
通过以上两个命令输出的命令执行时间，可以计算出硬盘的读、写速度。
/dev/zero，是一个输入设备，你可你用它来初始化文件。该设备无穷尽地提供0，可以使用任何你需要的数目——设备提供的要多的多。他可以用于向设备或文件写入字符串0。
/dev/null——它是空设备，也称为位桶（bit bucket）。任何写入它的输出都会被抛弃。如果不想让消息以标准输出显示或写入文件，那么可以将消息重定向到位桶。外号叫无底洞，你可以向它输出任何数据，它通吃，并且不会撑着！</code></pre></li>
<li>确定硬盘的最佳块大小：<pre><code>dd if=/dev/zero bs=1024 count=1000000 of=/root/1Gb.file
dd if=/dev/zero bs=2048 count=500000 of=/root/1Gb.file
dd if=/dev/zero bs=4096 count=250000 of=/root/1Gb.file
dd if=/dev/zero bs=8192 count=125000 of=/root/1Gb.file
通过比较以上命令输出中所显示的命令执行时间，即可确定系统最佳的块大小。</code></pre><h1 id="常用查看命令"><a href="#常用查看命令" class="headerlink" title="常用查看命令"></a>常用查看命令</h1></li>
<li>uname -a     查看内核/操作系统/CPU信息的linux系统信息命令</li>
<li>cat /etc/redhat-release 查看系统版本</li>
<li>cat /proc/cpuinfo| grep “processor”| wc -l 查看逻辑CPU个数</li>
<li>systemctl list-unit-files 查看服务启动项</li>
<li>cat /proc/sys/fs/file-max 系统最大打开文件描述符数</li>
<li>cat/proc/sys/fs/nr_open        单个进程可分配最大文件数</li>
<li>cat /proc/sys/fs/file-nr        查看当前系统使用的打开文件描述符数</li>
<li>sed -i ‘/^SELINUX/s/enforcing/disabled/g’ /etc/selinux/config 关闭selinux</li>
<li>localectl set-locale LANG=zh_CN.UTF-8 更改为中文字符集</li>
<li>localectl status 查看系统字符集</li>
<li>echo ‘export TMOUT=300’ &gt;&gt;/etc/profile 设置闲置超时时间为300s</li>
<li>echo ‘export HISTFILESIZE=100’ &gt;&gt;/etc/profile 设置闲置超时时间为300s</li>
<li>echo ‘export HISTTIMEFORMAT=”%Y-%m-%d %H:%M:%S”‘ &gt;&gt;/etc/profile 格式化输出历史记录(以年月日分时秒的格式输出)</li>
</ol>
<p>#查看 CPU 物理个数<br>grep ‘physical id’ /proc/cpuinfo | sort -u | wc -l</p>
<p>#查看 CPU 核心数量<br>grep ‘core id’ /proc/cpuinfo | sort -u | wc -l</p>
<p>#查看 CPU 线程数<br>grep ‘processor’ /proc/cpuinfo | sort -u | wc -l</p>
<p>#查看 CPU  型号<br>dmidecode -s processor-version</p>
<p>#查看 CPU 的详细信息：<br>cat /proc/cpuinfo</p>
]]></content>
      <categories>
        <category>linux基础</category>
      </categories>
      <tags>
        <tag>linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s之存储</title>
    <url>/2020/06/04/k8s%E4%B9%8B%E5%AD%98%E5%82%A8/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>为了保证数据的持久性，必须保证数据在外部存储在docker容器中，为了实现数据的持久性存储，在宿主机和容器内做映射，可以保证在容器的生命周期结束，数据依旧可以实现持久性存储。但是在k8s中，由于*pod分布在各个不同的节点之上，并不能实现不同节点之间持久性数据的共享，并且，在节点故障时，可能会导致数据的永久性丢失。为此，k8s就引入了外部存储卷的功能。</p>
<p>k8s的存储卷类型：</p>
<ol>
<li><code>emptyDir</code>（临时目录）:Pod删除，数据也会被清除，这种存储成为emptyDir，用于数据的临时存储。</li>
<li><code>hostPath</code> (宿主机目录映射):</li>
<li><code>本地的SAN</code> (iSCSI,FC)、NAS(nfs,cifs,http)存储</li>
<li><code>分布式存储</code>（glusterfs，rbd，cephfs）</li>
<li><code>云存储</code>（EBS，Azure Disk）</li>
</ol>
<p><font color="32CD32">k8s整体存储概念为</font>：实际存储空间（nfs，hostpath…）—&gt; pv（抽象的存储卷，从实际的存储空间划分）—&gt; pvc（存储卷创建申请，从pv中划分定义）—&gt; pod（在创建pod中引用pvc进行挂在）</p>
<p>参考链接：<a href="https://www.cnblogs.com/linuxk/p/9760363.html" target="_blank" rel="noopener">https://www.cnblogs.com/linuxk/p/9760363.html</a></p>
<h1 id="emptyDir存储卷演示"><a href="#emptyDir存储卷演示" class="headerlink" title="emptyDir存储卷演示"></a>emptyDir存储卷演示</h1><p>一个emptyDir 第一次创建是在一个pod被指定到具体node的时候，并且会一直存在在pod的生命周期当中，正如它的名字一样，它初始化是一个空的目录，pod中的容器都可以读写这个目录，这个目录可以被挂在到各个容器相同或者不相同的的路径下。当一个pod因为任何原因被移除的时候，这些数据会被永久删除。注意：一个容器崩溃了不会导致数据的丢失，因为容器的崩溃并不移除pod。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master ~]<span class="comment"># kubectl explain pods.spec.volumes.emptyDir  #查看emptyDir存储定义</span></span><br><span class="line">[root@k8s-master ~]<span class="comment"># kubectl explain pods.spec.containers.volumeMounts  #查看容器挂载方式</span></span><br><span class="line">[root@k8s-master ~]<span class="comment"># cd mainfests &amp;&amp; mkdir volumes &amp;&amp; cd volumes</span></span><br><span class="line">[root@k8s-master volumes]<span class="comment"># cp ../pod-demo.yaml ./</span></span><br><span class="line">[root@k8s-master volumes]<span class="comment"># mv pod-demo.yaml pod-vol-demo.yaml</span></span><br><span class="line"></span><br><span class="line">[root@k8s-master volumes]<span class="comment"># vim pod-vol-demo.yaml   #创建emptyDir的清单</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: pod-demo</span><br><span class="line">  namespace: default</span><br><span class="line">  labels:</span><br><span class="line">    app: myapp</span><br><span class="line">    tier: frontend</span><br><span class="line">  annotations:</span><br><span class="line">    magedu.com/create-by:<span class="string">"cluster admin"</span></span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: myapp</span><br><span class="line">    image: ikubernetes/myapp:v1</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    ports:</span><br><span class="line">    - name: http</span><br><span class="line">      containerPort: 80</span><br><span class="line">    volumeMounts:    <span class="comment">#在容器内定义挂载存储名称和挂载路径</span></span><br><span class="line">    - name: html</span><br><span class="line">      mountPath: /usr/share/nginx/html/</span><br><span class="line">  - name: busybox</span><br><span class="line">    image: busybox:latest</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: html</span><br><span class="line">      mountPath: /data/    <span class="comment">#在容器内定义挂载存储名称和挂载路径</span></span><br><span class="line">    <span class="built_in">command</span>: [<span class="string">'/bin/sh'</span>,<span class="string">'-c'</span>,<span class="string">'while true;do echo $(date) &gt;&gt; /data/index.html;sleep 2;done'</span>]</span><br><span class="line">  volumes:  <span class="comment">#定义存储卷</span></span><br><span class="line">  - name: html    <span class="comment">#定义存储卷名称  </span></span><br><span class="line">    emptyDir: &#123;&#125;  <span class="comment">#定义存储卷类型</span></span><br><span class="line">    </span><br><span class="line">[root@k8s-master volumes]<span class="comment"># kubectl apply -f pod-vol-demo.yaml </span></span><br><span class="line">pod/pod-vol-demo created </span><br><span class="line"></span><br><span class="line">[root@k8s-master volumes]<span class="comment"># kubectl get pods</span></span><br><span class="line">NAME                                 READY     STATUS    RESTARTS   AGE</span><br><span class="line">pod-vol-demo                         2/2       Running   0          27s</span><br><span class="line"></span><br><span class="line">[root@k8s-master volumes]<span class="comment"># kubectl get pods -o wide</span></span><br><span class="line">NAME                      READY     STATUS    RESTARTS   AGE       IP            NODE</span><br><span class="line">......</span><br><span class="line">pod-vol-demo              2/2       Running   0          16s       10.244.2.34   k8s-node02</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在上面，我们定义了2个容器，其中一个容器是输入日期到index.html中，然后验证访问nginx的html是否可以获取日期。以验证两个容器之间挂载的emptyDir实现共享。如下访问验证:</span></span><br><span class="line">[root@k8s-master volumes]<span class="comment"># curl 10.244.2.34  #访问验证</span></span><br><span class="line">Tue Oct 9 03:56:53 UTC 2018</span><br><span class="line">Tue Oct 9 03:56:55 UTC 2018</span><br><span class="line">Tue Oct 9 03:56:57 UTC 2018</span><br><span class="line">Tue Oct 9 03:56:59 UTC 2018</span><br><span class="line">Tue Oct 9 03:57:01 UTC 2018</span><br><span class="line">Tue Oct 9 03:57:03 UTC 2018</span><br><span class="line">Tue Oct 9 03:57:05 UTC 2018</span><br><span class="line">Tue Oct 9 03:57:07 UTC 2018</span><br><span class="line">Tue Oct 9 03:57:09 UTC 2018</span><br><span class="line">Tue Oct 9 03:57:11 UTC 2018</span><br><span class="line">Tue Oct 9 03:57:13 UTC 2018</span><br><span class="line">Tue Oct 9 03:57:15 UTC 2018</span><br></pre></td></tr></table></figure>

<h1 id="hostPath存储卷演示"><a href="#hostPath存储卷演示" class="headerlink" title="hostPath存储卷演示"></a>hostPath存储卷演示</h1><p>hostPath宿主机路径，就是把pod所在的宿主机之上的脱离pod中的容器名称空间的之外的宿主机的文件系统的某一目录和pod建立关联关系，在pod删除时，存储数据不会丢失。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master volumes]<span class="comment"># vim pod-hostpath-vol.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: pod-vol-hostpath</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: myapp</span><br><span class="line">    image: ikubernetes/myapp:v1</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: html</span><br><span class="line">      mountPath: /usr/share/nginx/html</span><br><span class="line">  volumes:</span><br><span class="line">    - name: html</span><br><span class="line">      hostPath:</span><br><span class="line">        path: /data/pod/volume1</span><br><span class="line">        <span class="built_in">type</span>: DirectoryOrCreate</span><br><span class="line"><span class="comment"># DirectoryOrCreate  宿主机上不存在创建此目录  </span></span><br><span class="line"><span class="comment"># Directory 必须存在挂载目录  </span></span><br><span class="line"><span class="comment"># FileOrCreate 宿主机上不存在挂载文件就创建  </span></span><br><span class="line"><span class="comment"># File 必须存在文件  </span></span><br><span class="line"></span><br><span class="line">[root@k8s-node01 ~]<span class="comment"># mkdir -p /data/pod/volume1</span></span><br><span class="line">[root@k8s-node01 ~]<span class="comment"># vim /data/pod/volume1/index.html</span></span><br><span class="line">node01.magedu.com</span><br><span class="line">[root@k8s-node02 ~]<span class="comment"># mkdir -p /data/pod/volume1</span></span><br><span class="line">[root@k8s-node02 ~]<span class="comment"># vim /data/pod/volume1/index.html</span></span><br><span class="line">node02.magedu.com</span><br><span class="line">[root@k8s-master volumes]<span class="comment"># kubectl apply -f pod-hostpath-vol.yaml </span></span><br><span class="line">pod/pod-vol-hostpath created</span><br><span class="line"></span><br><span class="line">[root@k8s-master volumes]<span class="comment"># kubectl get pods -o wide</span></span><br><span class="line">NAME                                 READY     STATUS    RESTARTS   AGE       IP            NODE</span><br><span class="line">......</span><br><span class="line">pod-vol-hostpath                     1/1       Running   0          37s       10.244.2.35   k8s-node02</span><br><span class="line">......</span><br><span class="line">[root@k8s-master volumes]<span class="comment"># curl 10.244.2.35</span></span><br><span class="line">node02.magedu.com</span><br><span class="line">[root@k8s-master volumes]<span class="comment"># kubectl delete -f pod-hostpath-vol.yaml  #删除pod，再重建，验证是否依旧可以访问原来的内容</span></span><br><span class="line">[root@k8s-master volumes]<span class="comment"># kubectl apply -f pod-hostpath-vol.yaml </span></span><br><span class="line">pod/pod-vol-hostpath created</span><br><span class="line">[root@k8s-master volumes]<span class="comment"># curl  10.244.2.37 </span></span><br><span class="line">node02.magedu.com</span><br></pre></td></tr></table></figure>

<h1 id="nfs共享存储卷演示"><a href="#nfs共享存储卷演示" class="headerlink" title="nfs共享存储卷演示"></a>nfs共享存储卷演示</h1><p>nfs使的我们可以挂在已经存在的共享到的我们的Pod中，和emptyDir不同的是，emptyDir会被删除当我们的Pod被删除的时候，但是nfs不会被删除，仅仅是解除挂在状态而已，这就意味着NFS能够允许我们提前对数据进行处理，而且这些数据可以在Pod之间相互传递.并且，nfs可以同时被多个pod挂在并进行读写。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">（1）在stor01节点上安装nfs，并配置nfs服务</span><br><span class="line">[root@stor01 ~]<span class="comment"># yum install -y nfs-utils  ==》192.168.56.14</span></span><br><span class="line">[root@stor01 ~]<span class="comment"># mkdir /data/volumes -pv</span></span><br><span class="line">[root@stor01 ~]<span class="comment"># vim /etc/exports</span></span><br><span class="line">/data/volumes 192.168.56.0/24(rw,no_root_squash)</span><br><span class="line">[root@stor01 ~]<span class="comment"># systemctl start nfs</span></span><br><span class="line">[root@stor01 ~]<span class="comment"># showmount -e</span></span><br><span class="line">Export list <span class="keyword">for</span> stor01:</span><br><span class="line">/data/volumes 192.168.56.0/24</span><br><span class="line"></span><br><span class="line">（2）在node01和node02节点上安装nfs-utils，并测试挂载</span><br><span class="line">[root@k8s-node01 ~]<span class="comment"># yum install -y nfs-utils</span></span><br><span class="line">[root@k8s-node02 ~]<span class="comment"># yum install -y nfs-utils</span></span><br><span class="line">[root@k8s-node02 ~]<span class="comment"># mount -t nfs stor01:/data/volumes /mnt</span></span><br><span class="line">[root@k8s-node02 ~]<span class="comment"># mount</span></span><br><span class="line">......</span><br><span class="line">stor01:/data/volumes on /mnt <span class="built_in">type</span> nfs4 (rw,relatime,vers=4.1,rsize=131072,wsize=131072,namlen=255,hard,proto=tcp,port=0,timeo=600,retrans=2,sec=sys,clientaddr=192.168.56.13,local_lock=none,addr=192.168.56.14)</span><br><span class="line">[root@k8s-node02 ~]<span class="comment"># umount /mnt/</span></span><br><span class="line"></span><br><span class="line">（3）创建nfs存储卷的使用清单</span><br><span class="line">[root@k8s-master volumes]<span class="comment"># cp pod-hostpath-vol.yaml pod-nfs-vol.yaml</span></span><br><span class="line">[root@k8s-master volumes]<span class="comment"># vim pod-nfs-vol.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: pod-vol-nfs</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: myapp</span><br><span class="line">    image: ikubernetes/myapp:v1</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: html</span><br><span class="line">      mountPath: /usr/share/nginx/html</span><br><span class="line">  volumes:</span><br><span class="line">    - name: html</span><br><span class="line">      nfs:</span><br><span class="line">        path: /data/volumes</span><br><span class="line">        server: stor01</span><br><span class="line">[root@k8s-master volumes]<span class="comment"># kubectl apply -f pod-nfs-vol.yaml </span></span><br><span class="line">pod/pod-vol-nfs created</span><br><span class="line">[root@k8s-master volumes]<span class="comment"># kubectl get pods -o wide</span></span><br><span class="line">NAME                     READY     STATUS    RESTARTS   AGE       IP            NODE</span><br><span class="line">pod-vol-nfs              1/1       Running   0          21s       10.244.2.38   k8s-node02</span><br><span class="line"></span><br><span class="line">（3）在nfs服务器上创建index.html</span><br><span class="line">[root@stor01 ~]<span class="comment"># cd /data/volumes</span></span><br><span class="line">[root@stor01 volumes ~]<span class="comment"># vim index.html</span></span><br><span class="line">&lt;h1&gt; nfs stor01&lt;/h1&gt;</span><br><span class="line">[root@k8s-master volumes]<span class="comment"># curl 10.244.2.38</span></span><br><span class="line">&lt;h1&gt; nfs stor01&lt;/h1&gt;</span><br><span class="line">[root@k8s-master volumes]<span class="comment"># kubectl delete -f pod-nfs-vol.yaml   #删除nfs相关pod，再重新创建，可以得到数据的持久化存储</span></span><br><span class="line">pod <span class="string">"pod-vol-nfs"</span> deleted</span><br><span class="line">[root@k8s-master volumes]<span class="comment"># kubectl apply -f pod-nfs-vol.yaml</span></span><br></pre></td></tr></table></figure>

<h1 id="NFS使用PV和PVC"><a href="#NFS使用PV和PVC" class="headerlink" title="NFS使用PV和PVC"></a>NFS使用PV和PVC</h1><h2 id="1、配置nfs存储"><a href="#1、配置nfs存储" class="headerlink" title="1、配置nfs存储"></a>1、配置nfs存储</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@stor01 volumes]<span class="comment"># mkdir v&#123;1,2,3,4,5&#125;</span></span><br><span class="line">[root@stor01 volumes]<span class="comment"># vim /etc/exports</span></span><br><span class="line">/data/volumes/v1 192.168.56.0/24(rw,no_root_squash)</span><br><span class="line">/data/volumes/v2 192.168.56.0/24(rw,no_root_squash)</span><br><span class="line">/data/volumes/v3 192.168.56.0/24(rw,no_root_squash)</span><br><span class="line">/data/volumes/v4 192.168.56.0/24(rw,no_root_squash)</span><br><span class="line">/data/volumes/v5 192.168.56.0/24(rw,no_root_squash)</span><br><span class="line">[root@stor01 volumes]<span class="comment"># exportfs -arv</span></span><br><span class="line">exporting 192.168.56.0/24:/data/volumes/v5</span><br><span class="line">exporting 192.168.56.0/24:/data/volumes/v4</span><br><span class="line">exporting 192.168.56.0/24:/data/volumes/v3</span><br><span class="line">exporting 192.168.56.0/24:/data/volumes/v2</span><br><span class="line">exporting 192.168.56.0/24:/data/volumes/v1</span><br><span class="line">[root@stor01 volumes]<span class="comment"># showmount -e</span></span><br><span class="line">Export list <span class="keyword">for</span> stor01:</span><br><span class="line">/data/volumes/v5 192.168.56.0/24</span><br><span class="line">/data/volumes/v4 192.168.56.0/24</span><br><span class="line">/data/volumes/v3 192.168.56.0/24</span><br><span class="line">/data/volumes/v2 192.168.56.0/24</span><br><span class="line">/data/volumes/v1 192.168.56.0/24</span><br></pre></td></tr></table></figure>

<h2 id="2、定义PV"><a href="#2、定义PV" class="headerlink" title="2、定义PV"></a>2、定义PV</h2><p>这里定义了pvc的访问模式为多路读写，该访问模式必须在前面pv定义的访问模式之中。定义PVC申请的大小为2Gi，此时PVC会自动去匹配多路读写且大小为2Gi的PV，匹配成功获取PVC的状态即为Bound</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master volumes]<span class="comment"># kubectl explain pv</span></span><br><span class="line">[root@k8s-master volumes]<span class="comment"># kubectl explain pv.spec.nfs</span></span><br><span class="line">[root@k8s-master volumes]<span class="comment"># vim pv-demo.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolume</span><br><span class="line">metadata:</span><br><span class="line">  name: pv001</span><br><span class="line">  labels:</span><br><span class="line">    name: pv001</span><br><span class="line">spec:</span><br><span class="line">  nfs:</span><br><span class="line">    path: /data/volumes/v1</span><br><span class="line">    server: stor01</span><br><span class="line">  accessModes: [<span class="string">"ReadWriteMany"</span>,<span class="string">"ReadWriteOnce"</span>]</span><br><span class="line">    <span class="comment">#accessModes（定义访问模型，有以下三种访问模型，以列表的方式存在，也就是说可以定义多个访问模式）</span></span><br><span class="line">    <span class="comment">#ReadWriteOnce（RWO）  单节点读写</span></span><br><span class="line">	<span class="comment">#ReadOnlyMany（ROX）  多节点只读</span></span><br><span class="line">	<span class="comment">#ReadWriteMany（RWX）  多节点读写</span></span><br><span class="line">  capacity:</span><br><span class="line">    storage: 1Gi</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolume</span><br><span class="line">metadata:</span><br><span class="line">  name: pv002</span><br><span class="line">  labels:</span><br><span class="line">    name: pv002</span><br><span class="line">spec:</span><br><span class="line">  nfs:</span><br><span class="line">    path: /data/volumes/v2</span><br><span class="line">    server: stor01</span><br><span class="line">  accessModes: [<span class="string">"ReadWriteOnce"</span>]</span><br><span class="line">  capacity:</span><br><span class="line">    storage: 2Gi</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolume</span><br><span class="line">metadata:</span><br><span class="line">  name: pv003</span><br><span class="line">  labels:</span><br><span class="line">    name: pv003</span><br><span class="line">spec:</span><br><span class="line">  nfs:</span><br><span class="line">    path: /data/volumes/v3</span><br><span class="line">    server: stor01</span><br><span class="line">  accessModes: [<span class="string">"ReadWriteMany"</span>,<span class="string">"ReadWriteOnce"</span>]</span><br><span class="line">  capacity:</span><br><span class="line">    storage: 2Gi</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolume</span><br><span class="line">metadata:</span><br><span class="line">  name: pv004</span><br><span class="line">  labels:</span><br><span class="line">    name: pv004</span><br><span class="line">spec:</span><br><span class="line">  nfs:</span><br><span class="line">    path: /data/volumes/v4</span><br><span class="line">    server: stor01</span><br><span class="line">  accessModes: [<span class="string">"ReadWriteMany"</span>,<span class="string">"ReadWriteOnce"</span>]</span><br><span class="line">  capacity:</span><br><span class="line">    storage: 4Gi</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolume</span><br><span class="line">metadata:</span><br><span class="line">  name: pv005</span><br><span class="line">  labels:</span><br><span class="line">    name: pv005</span><br><span class="line">spec:</span><br><span class="line">  nfs:</span><br><span class="line">    path: /data/volumes/v5</span><br><span class="line">    server: stor01</span><br><span class="line">  accessModes: [<span class="string">"ReadWriteMany"</span>,<span class="string">"ReadWriteOnce"</span>]</span><br><span class="line">  capacity:</span><br><span class="line">    storage: 5Gi</span><br><span class="line">[root@k8s-master volumes]<span class="comment"># kubectl apply -f pv-demo.yaml </span></span><br><span class="line">persistentvolume/pv001 created</span><br><span class="line">persistentvolume/pv002 created</span><br><span class="line">persistentvolume/pv003 created</span><br><span class="line">persistentvolume/pv004 created</span><br><span class="line">persistentvolume/pv005 created</span><br><span class="line">[root@k8s-master volumes]<span class="comment"># kubectl get pv</span></span><br><span class="line">NAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM     STORAGECLASS   REASON    AGE</span><br><span class="line">pv001     1Gi        RWO,RWX        Retain           Available                                      7s</span><br><span class="line">pv002     2Gi        RWO            Retain           Available                                      7s</span><br><span class="line">pv003     2Gi        RWO,RWX        Retain           Available                                      7s</span><br><span class="line">pv004     4Gi        RWO,RWX        Retain           Available                                      7s</span><br><span class="line">pv005     5Gi        RWO,RWX        Retain           Available                                      7s</span><br></pre></td></tr></table></figure>

<h2 id="3、定义PVC"><a href="#3、定义PVC" class="headerlink" title="3、定义PVC"></a>3、定义PVC</h2><p>这里定义了pvc的访问模式为多路读写，该访问模式必须在前面pv定义的访问模式之中。定义PVC申请的大小为2Gi，此时PVC会自动去匹配多路读写且大小为2Gi的PV，匹配成功获取PVC的状态即为Bound</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master volumes ~]<span class="comment"># vim pod-vol-pvc.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">metadata:</span><br><span class="line">  name: mypvc</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  accessModes: [<span class="string">"ReadWriteMany"</span>]</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 2Gi</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: pod-vol-pvc</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: myapp</span><br><span class="line">    image: ikubernetes/myapp:v1</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: html</span><br><span class="line">      mountPath: /usr/share/nginx/html</span><br><span class="line">  volumes:</span><br><span class="line">    - name: html</span><br><span class="line">      persistentVolumeClaim:</span><br><span class="line">        claimName: mypvc</span><br><span class="line">[root@k8s-master volumes]<span class="comment"># kubectl apply -f pod-vol-pvc.yaml </span></span><br><span class="line">persistentvolumeclaim/mypvc created</span><br><span class="line">pod/pod-vol-pvc created</span><br><span class="line">[root@k8s-master volumes]<span class="comment"># kubectl get pv</span></span><br><span class="line">NAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM           STORAGECLASS   REASON    AGE</span><br><span class="line">pv001     1Gi        RWO,RWX        Retain           Available                                            19m</span><br><span class="line">pv002     2Gi        RWO            Retain           Available                                            19m</span><br><span class="line">pv003     2Gi        RWO,RWX        Retain           Bound       default/mypvc                            19m</span><br><span class="line">pv004     4Gi        RWO,RWX        Retain           Available                                            19m</span><br><span class="line">pv005     5Gi        RWO,RWX        Retain           Available                                            19m</span><br><span class="line">[root@k8s-master volumes]<span class="comment"># kubectl get pvc</span></span><br><span class="line">NAME      STATUS    VOLUME    CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class="line">mypvc     Bound     pv003     2Gi        RWO,RWX                       22s</span><br></pre></td></tr></table></figure>

<h2 id="4、测试访问"><a href="#4、测试访问" class="headerlink" title="4、测试访问"></a>4、测试访问</h2><p>在存储服务器上创建index.html，并写入数据，通过访问Pod进行查看，可以获取到相应的页面。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@stor01 volumes]<span class="comment"># cd v3/</span></span><br><span class="line">[root@stor01 v3]<span class="comment"># echo "welcome to use pv3" &gt; index.html</span></span><br><span class="line">[root@k8s-master volumes]<span class="comment"># kubectl get pods -o wide</span></span><br><span class="line">pod-vol-pvc             1/1       Running   0          3m        10.244.2.39   k8s-node02</span><br><span class="line">[root@k8s-master volumes]<span class="comment"># curl  10.244.2.39</span></span><br><span class="line">welcome to use pv3</span><br></pre></td></tr></table></figure>

<h1 id="StorageClass"><a href="#StorageClass" class="headerlink" title="StorageClass"></a>StorageClass</h1><p>在pv和pvc使用过程中存在的问题，在pvc申请存储空间时，未必就有现成的pv符合pvc申请的需求，上面nfs在做pvc可以成功的因素是因为我们做了指定的需求处理。那么当PVC申请的存储空间不一定有满足PVC要求的PV事，又该如何处理呢？？？为此，Kubernetes为管理员提供了描述存储”class（类）”的方法（StorageClass）。举个例子，在存储系统中划分一个1TB的存储空间提供给Kubernetes使用，当用户需要一个10G的PVC时，会立即通过restful发送请求，从而让存储空间创建一个10G的image，之后在我们的集群中定义成10G的PV供给给当前的PVC作为挂载使用。在此之前我们的存储系统必须支持restful接口，比如ceph分布式存储，而glusterfs则需要借助第三方接口完成这样的请求。</p>
<p>StorageClass 中包含 provisioner、parameters 和 reclaimPolicy 字段，当 class 需要动态分配 PersistentVolume 时会使用到。由于StorageClass需要一个独立的存储系统，此处就不再演示。</p>
<h1 id="配置容器应用：Secret和configMap"><a href="#配置容器应用：Secret和configMap" class="headerlink" title="配置容器应用：Secret和configMap"></a>配置容器应用：Secret和configMap</h1><p>在日常单机甚至集群状态下，我们需要对一个应用进行配置，只需要修改其配置文件即可。那么在容器中又该如何提供配置 信息呢？？？例如，为Nginx配置一个指定的server_name或worker进程数，为Tomcat的JVM配置其堆内存大小。传统的实践过程中通常有以下几种方式：</p>
<ul>
<li>启动容器时，通过命令传递参数</li>
<li>将定义好的配置文件通过镜像文件进行写入</li>
<li>通过环境变量的方式传递配置数据</li>
<li>挂载Docker卷传送配置文件</li>
</ul>
<p>而在Kubernetes系统之中也存在这样的组件，就是特殊的存储卷类型。其并不是提供pod存储空间，而是给管理员或用户提供从集群外部向Pod内部的应用注入配置信息的方式。这两种特殊类型的存储卷分别是：configMap和secret</p>
<ul>
<li><code>Secret</code>：用于向Pod传递敏感信息，比如密码，私钥，证书文件等，这些信息如果在容器中定义容易泄露，Secret资源可以让用户将这些信息存储在急群众，然后通过Pod进行挂载，实现敏感数据和系统解耦的效果。</li>
<li><code>ConfigMap</code>：主要用于向Pod注入非敏感数据，使用时，用户将数据直接存储在ConfigMap对象当中，然后Pod通过使用ConfigMap卷进行引用，实现容器的配置文件集中定义和管理。</li>
</ul>
<h2 id="Secret解析"><a href="#Secret解析" class="headerlink" title="Secret解析"></a>Secret解析</h2><p>Secret对象存储数据的方式是以键值方式存储数据，在Pod资源进行调用Secret的方式是通过环境变量或者存储卷的方式进行访问数据，解决了密码、token、密钥等敏感数据的配置问题，而不需要把这些敏感数据暴露到镜像或者Pod Spec中。另外，Secret对象的数据存储和打印格式为Base64编码的字符串，因此用户在创建Secret对象时，也需要提供该类型的编码格式的数据。在容器中以环境变量或存储卷的方式访问时，会自动解码为明文格式。需要注意的是，如果是在Master节点上，Secret对象以非加密的格式存储在etcd中，所以需要对etcd的管理和权限进行严格控制。</p>
<p>Secret有4种类型：</p>
<ul>
<li><p>Service Account ：用来访问Kubernetes API，由Kubernetes自动创建，并且会自动挂载到Pod的/run/secrets/kubernetes.io/serviceaccount目录中；</p>
</li>
<li><p>Opaque ：base64编码格式的Secret，用来存储密码、密钥、信息、证书等，类型标识符为generic；</p>
</li>
<li><p>kubernetes.io/dockerconfigjson ：用来存储私有docker registry的认证信息，类型标识为docker-registry。</p>
</li>
<li><p>kubernetes.io/tls：用于为SSL通信模式存储证书和私钥文件，命令式创建类型标识为tls。</p>
</li>
</ul>
<p><strong>命令式创建</strong></p>
<p>1、通过 –from-literal：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master ~]<span class="comment"># kubectl create secret -h</span></span><br><span class="line">Create a secret using specified subcommand.</span><br><span class="line"></span><br><span class="line">Available Commands:</span><br><span class="line">  docker-registry Create a secret <span class="keyword">for</span> use with a Docker registry</span><br><span class="line">  generic         Create a secret from a <span class="built_in">local</span> file, directory or literal value</span><br><span class="line">  tls             Create a TLS secret</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  kubectl create secret [flags] [options]</span><br><span class="line"></span><br><span class="line">Use <span class="string">"kubectl &lt;command&gt; --help"</span> <span class="keyword">for</span> more information about a given <span class="built_in">command</span>.</span><br><span class="line">Use <span class="string">"kubectl options"</span> <span class="keyword">for</span> a list of global <span class="built_in">command</span>-line options (applies to all commands).</span><br><span class="line"></span><br><span class="line">每个 --from-literal 对应一个信息条目。</span><br><span class="line">[root@k8s-master ~]<span class="comment"># kubectl create secret generic mysecret --from-literal=username=admin --from-literal=password=123456</span></span><br><span class="line">secret/mysecret created</span><br><span class="line">[root@k8s-master ~]<span class="comment"># kubectl get secret</span></span><br><span class="line">NAME                    TYPE                                  DATA      AGE</span><br><span class="line">mysecret                Opaque                                2         6s</span><br></pre></td></tr></table></figure>

<p>2、通过 –from-file：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master ~]<span class="comment"># echo -n admin &gt; ./username</span></span><br><span class="line">[root@k8s-master ~]<span class="comment"># echo -n 123456 &gt; ./password</span></span><br><span class="line">[root@k8s-master ~]<span class="comment"># kubectl create secret generic mysecret --from-file=./username --from-file=./password </span></span><br><span class="line">secret/mysecret created</span><br><span class="line">[root@k8s-master ~]<span class="comment"># kubectl get secret</span></span><br><span class="line">NAME                    TYPE                                  DATA      AGE</span><br><span class="line">mysecret                Opaque                                2         6s</span><br></pre></td></tr></table></figure>

<p>3、通过 –from-env-file：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master ~]<span class="comment"># cat &lt;&lt; EOF &gt; env.txt</span></span><br><span class="line">&gt; username=admin</span><br><span class="line">&gt; password=123456</span><br><span class="line">&gt; EOF</span><br><span class="line">[root@k8s-master ~]<span class="comment"># kubectl create secret generic mysecret --from-env-file=env.txt </span></span><br><span class="line">secret/mysecret created</span><br><span class="line">[root@k8s-master ~]<span class="comment"># kubectl get secret</span></span><br><span class="line">NAME                    TYPE                                  DATA      AGE</span><br><span class="line">mysecret                Opaque                                2         10s</span><br></pre></td></tr></table></figure>

<p><strong>清单式创建</strong></p>
<p>通过 YAML 配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#事先完成敏感数据的Base64编码</span></span><br><span class="line">[root@k8s-master ~]<span class="comment"># echo -n admin |base64</span></span><br><span class="line">YWRtaW4=</span><br><span class="line">[root@k8s-master ~]<span class="comment"># echo -n 123456 |base64</span></span><br><span class="line">MTIzNDU2</span><br><span class="line"></span><br><span class="line">[root@k8s-master ~]<span class="comment"># vim secret.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  name: mysecret</span><br><span class="line">data:</span><br><span class="line">  username: YWRtaW4=</span><br><span class="line">  password: MTIzNDU2</span><br><span class="line">[root@k8s-master ~]<span class="comment"># kubectl apply -f secret.yaml </span></span><br><span class="line">secret/mysecret created</span><br><span class="line">[root@k8s-master ~]<span class="comment"># kubectl get secret  #查看存在的 secret，显示有2条数据</span></span><br><span class="line">NAME                    TYPE                                  DATA      AGE</span><br><span class="line">mysecret                Opaque                                2         8s</span><br><span class="line">[root@k8s-master ~]<span class="comment"># kubectl describe secret mysecret  #查看数据的 Key</span></span><br><span class="line">Name:         mysecret</span><br><span class="line">Namespace:    default</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  </span><br><span class="line">Type:         Opaque</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">username:  5 bytes</span><br><span class="line">password:  6 bytes</span><br><span class="line">[root@k8s-master ~]<span class="comment"># kubectl edit secret mysecret  #查看具体的value，可以使用该命令</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  password: MTIzNDU2</span><br><span class="line">  username: YWRtaW4=</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">......</span><br><span class="line">[root@k8s-master ~]<span class="comment"># echo -n MTIzNDU2 |base64 --decode  #通过 base64 将 Value 反编码：</span></span><br><span class="line">123456</span><br><span class="line">[root@k8s-master ~]<span class="comment"># echo -n YWRtaW4= |base64 --decode</span></span><br><span class="line">admin</span><br></pre></td></tr></table></figure>

<p><strong>使用Secret</strong></p>
<p>Pod 可以通过 Volume 或者环境变量的方式使用 Secret</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master volumes]<span class="comment"># vim pod-secret-demo.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: pod-secret</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: pod-secret</span><br><span class="line">    image: busybox</span><br><span class="line">    args:</span><br><span class="line">      - /bin/sh</span><br><span class="line">      - -c</span><br><span class="line">      - sleep 10;touch /tmp/healthy;sleep 30000</span><br><span class="line">    volumeMounts:   <span class="comment">#将 foo mount 到容器路径 /etc/foo，可指定读写权限为 readOnly。</span></span><br><span class="line">    - name: foo</span><br><span class="line">      mountPath: <span class="string">"/etc/foo"</span></span><br><span class="line">      readOnly: <span class="literal">true</span></span><br><span class="line">  volumes:    <span class="comment">#定义 volume foo，来源为 secret mysecret。</span></span><br><span class="line">  - name: foo</span><br><span class="line">    secret:</span><br><span class="line">      secretName: mysecret</span><br><span class="line">[root@k8s-master volumes]<span class="comment"># kubectl apply -f pod-secret-demo.yaml </span></span><br><span class="line">pod/pod-secret created</span><br><span class="line">[root@k8s-master volumes]<span class="comment"># kubectl get pods</span></span><br><span class="line">pod-secret                           1/1       Running   0          1m</span><br><span class="line">[root@k8s-master volumes]<span class="comment"># kubectl exec -it pod-secret sh</span></span><br><span class="line">/ <span class="comment"># ls /etc/foo/</span></span><br><span class="line">password  username</span><br><span class="line">/ <span class="comment"># cat /etc/foo/username </span></span><br><span class="line">admin/ <span class="comment"># </span></span><br><span class="line">/ <span class="comment"># cat /etc/foo/password </span></span><br><span class="line">123456/ <span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>可以看到，Kubernetes 会在指定的路径 /etc/foo 下为每条敏感数据创建一个文件，文件名就是数据条目的 Key，这里是 /etc/foo/username 和 /etc/foo/password，Value 则以明文存放在文件中。<br>也可以自定义存放数据的文件名，比如将配置文件改为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master volumes]<span class="comment"># cat pod-secret-demo.yaml </span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: pod-secret</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: pod-secret</span><br><span class="line">    image: busybox</span><br><span class="line">    args:</span><br><span class="line">      - /bin/sh</span><br><span class="line">      - -c</span><br><span class="line">      - sleep 10;touch /tmp/healthy;sleep 30000</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: foo</span><br><span class="line">      mountPath: <span class="string">"/etc/foo"</span></span><br><span class="line">      readOnly: <span class="literal">true</span></span><br><span class="line">  volumes:</span><br><span class="line">  - name: foo</span><br><span class="line">    secret:</span><br><span class="line">      secretName: mysecret</span><br><span class="line">      items:    <span class="comment">#自定义存放数据的文件名</span></span><br><span class="line">      - key: username</span><br><span class="line">        path: my-secret/my-username</span><br><span class="line">      - key: password</span><br><span class="line">        path: my-secret/my-password</span><br><span class="line">[root@k8s-master volumes]<span class="comment"># kubectl delete pods pod-secret</span></span><br><span class="line">pod <span class="string">"pod-secret"</span> deleted</span><br><span class="line">[root@k8s-master volumes]<span class="comment"># kubectl apply -f pod-secret-demo.yaml </span></span><br><span class="line">pod/pod-secret created</span><br><span class="line">[root@k8s-master volumes]<span class="comment"># kubectl exec -it pod-secret sh</span></span><br><span class="line">/ <span class="comment"># cat /etc/foo/my-secret/my-username </span></span><br><span class="line">admin</span><br><span class="line">/ <span class="comment"># cat /etc/foo/my-secret/my-password </span></span><br><span class="line">123456</span><br></pre></td></tr></table></figure>

<p>这时数据将分别存放在 /etc/foo/my-secret/my-username 和 /etc/foo/my-secret/my-password 中。</p>
<p>以 Volume 方式使用的 Secret 支持动态更新：Secret 更新后，容器中的数据也会更新。</p>
<p>将 password 更新为 abcdef，base64 编码为 YWJjZGVm</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master ~]<span class="comment"># vim secret.yaml </span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  name: mysecret</span><br><span class="line">data:</span><br><span class="line">  username: YWRtaW4=</span><br><span class="line">  password: YWJjZGVm</span><br><span class="line">[root@k8s-master ~]<span class="comment"># kubectl apply -f secret.yaml </span></span><br><span class="line">secret/mysecret configured</span><br><span class="line">/ <span class="comment"># cat /etc/foo/my-secret/my-password </span></span><br><span class="line">abcdef</span><br></pre></td></tr></table></figure>

<p>通过 Volume 使用 Secret，容器必须从文件读取数据，会稍显麻烦，Kubernetes 还支持通过环境变量使用 Secret。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master volumes]<span class="comment"># cp pod-secret-demo.yaml pod-secret-env-demo.yaml</span></span><br><span class="line">[root@k8s-master volumes]<span class="comment"># vim pod-secret-env-demo.yaml </span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: pod-secret-env</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: pod-secret-env</span><br><span class="line">    image: busybox</span><br><span class="line">    args:</span><br><span class="line">      - /bin/sh</span><br><span class="line">      - -c</span><br><span class="line">      - sleep 10;touch /tmp/healthy;sleep 30000</span><br><span class="line">    env:</span><br><span class="line">      - name: SECRET_USERNAME</span><br><span class="line">        valueFrom:</span><br><span class="line">          secretKeyRef:</span><br><span class="line">            name: mysecret</span><br><span class="line">            key: username</span><br><span class="line">      - name: SECRET_PASSWORD</span><br><span class="line">        valueFrom:</span><br><span class="line">          secretKeyRef:</span><br><span class="line">            name: mysecret</span><br><span class="line">            key: password</span><br><span class="line">[root@k8s-master volumes]<span class="comment"># kubectl apply -f pod-secret-env-demo.yaml </span></span><br><span class="line">pod/pod-secret-env created</span><br><span class="line"></span><br><span class="line">[root@k8s-master volumes]<span class="comment"># kubectl exec -it pod-secret-env sh</span></span><br><span class="line">/ <span class="comment"># echo $SECRET_USERNAME</span></span><br><span class="line">admin</span><br><span class="line">/ <span class="comment"># echo $SECRET_PASSWORD</span></span><br><span class="line">abcdef</span><br></pre></td></tr></table></figure>

<p>通过环境变量 SECRET_USERNAME 和 SECRET_PASSWORD 成功读取到 Secret 的数据。<br>需要注意的是，环境变量读取 Secret 很方便，但无法支撑 Secret 动态更新。<br>Secret 可以为 Pod 提供密码、Token、私钥等敏感数据；对于一些非敏感数据，比如应用的配置信息，则可以用 ConfigMap。</p>
<h2 id="ConifgMap解析"><a href="#ConifgMap解析" class="headerlink" title="ConifgMap解析"></a>ConifgMap解析</h2><p>configmap是让配置文件从镜像中解耦，让镜像的可移植性和可复制性。许多应用程序会从配置文件、命令行参数或环境变量中读取配置信息。这些配置信息需要与docker image解耦，你总不能每修改一个配置就重做一个image吧？ConfigMap API给我们提供了向容器中注入配置信息的机制，ConfigMap可以被用来保存单个属性，也可以用来保存整个配置文件或者JSON二进制大对象。</p>
<p>ConfigMap API资源用来保存key-value pair配置数据，这个数据可以在pods里使用，或者被用来为像controller一样的系统组件存储配置数据。虽然ConfigMap跟Secrets类似，但是ConfigMap更方便的处理不含敏感信息的字符串。 注意：ConfigMaps不是属性配置文件的替代品。ConfigMaps只是作为多个properties文件的引用。可以把它理解为Linux系统中的/etc目录，专门用来存储配置文件的目录。下面举个例子，使用ConfigMap配置来创建Kuberntes Volumes，ConfigMap中的每个data项都会成为一个新文件。</p>
<p><strong>ConfigMap创建方式</strong></p>
<p>与 Secret 一样，ConfigMap 也支持四种创建方式：</p>
<ul>
<li>1、 通过 –from-literal：<br>每个 –from-literal 对应一个信息条目。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master volumes]<span class="comment"># kubectl create configmap nginx-config --from-literal=nginx_port=80 --from-literal=server_name=myapp.magedu.com</span></span><br><span class="line">configmap/nginx-config created</span><br><span class="line">[root@k8s-master volumes]<span class="comment"># kubectl get cm</span></span><br><span class="line">NAME           DATA      AGE</span><br><span class="line">nginx-config   2         6s</span><br><span class="line">[root@k8s-master volumes]<span class="comment"># kubectl describe cm nginx-config</span></span><br><span class="line">Name:         nginx-config</span><br><span class="line">Namespace:    default</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">server_name:</span><br><span class="line">----</span><br><span class="line">myapp.magedu.com</span><br><span class="line">nginx_port:</span><br><span class="line">----</span><br><span class="line">80</span><br><span class="line">Events:  &lt;none&gt;</span><br></pre></td></tr></table></figure>

<p>2、通过 –from-file：<br>每个文件内容对应一个信息条目。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master mainfests]<span class="comment"># mkdir configmap &amp;&amp; cd configmap</span></span><br><span class="line">[root@k8s-master configmap]<span class="comment"># vim www.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">	server_name myapp.magedu.com;</span><br><span class="line">	listen 80;</span><br><span class="line">	root /data/web/html;</span><br><span class="line">&#125;</span><br><span class="line">[root@k8s-master configmap]<span class="comment"># kubectl create configmap nginx-www --from-file=./www.conf </span></span><br><span class="line">configmap/nginx-www created</span><br><span class="line">[root@k8s-master configmap]<span class="comment"># kubectl get cm</span></span><br><span class="line">NAME           DATA      AGE</span><br><span class="line">nginx-config   2         3m</span><br><span class="line">nginx-www      1         4s</span><br><span class="line">[root@k8s-master configmap]<span class="comment"># kubectl get cm nginx-www -o yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  www.conf: <span class="string">"server &#123;\n\tserver_name myapp.magedu.com;\n\tlisten 80;\n\troot /data/web/html;\n&#125;\n"</span></span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: 2018-10-10T08:50:06Z</span><br><span class="line">  name: nginx-www</span><br><span class="line">  namespace: default</span><br><span class="line">  resourceVersion: <span class="string">"389929"</span></span><br><span class="line">  selfLink: /api/v1/namespaces/default/configmaps/nginx-www</span><br><span class="line">  uid: 7c3dfc35-cc69-11e8-801a-000c2972dc1f</span><br></pre></td></tr></table></figure>

<p><strong>使用configMap</strong></p>
<p>1、环境变量方式注入到pod</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master configmap]<span class="comment"># vim pod-configmap.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: pod-cm-1</span><br><span class="line">  namespace: default</span><br><span class="line">  labels: </span><br><span class="line">    app: myapp</span><br><span class="line">    tier: frontend</span><br><span class="line">  annotations:</span><br><span class="line">    magedu.com/created-by: <span class="string">"cluster admin"</span></span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: myapp</span><br><span class="line">    image: ikubernetes/myapp:v1</span><br><span class="line">    ports:</span><br><span class="line">    - name: http</span><br><span class="line">      containerPort: 80 </span><br><span class="line">    env:</span><br><span class="line">    - name: NGINX_SERVER_PORT</span><br><span class="line">      valueFrom:</span><br><span class="line">        configMapKeyRef:</span><br><span class="line">          name: nginx-config</span><br><span class="line">          key: nginx_port</span><br><span class="line">    - name: NGINX_SERVER_NAME</span><br><span class="line">      valueFrom:</span><br><span class="line">        configMapKeyRef:</span><br><span class="line">          name: nginx-config</span><br><span class="line">          key: server_name</span><br><span class="line">[root@k8s-master configmap]<span class="comment"># kubectl apply -f pod-configmap.yaml </span></span><br><span class="line">pod/pod-cm-1 created</span><br><span class="line">[root@k8s-master configmap]<span class="comment"># kubectl exec -it pod-cm-1 -- /bin/sh</span></span><br><span class="line">/ <span class="comment"># echo $NGINX_SERVER_PORT</span></span><br><span class="line">80</span><br><span class="line">/ <span class="comment"># echo $NGINX_SERVER_NAME</span></span><br><span class="line">myapp.magedu.com</span><br></pre></td></tr></table></figure>

<p>修改端口，可以发现使用环境变化注入pod中的端口不会根据配置的更改而变化</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master volumes]<span class="comment">#  kubectl edit cm nginx-config</span></span><br><span class="line">configmap/nginx-config edited</span><br><span class="line">/ <span class="comment"># echo $NGINX_SERVER_PORT</span></span><br><span class="line">80</span><br></pre></td></tr></table></figure>

<p>2、存储卷方式挂载configmap：<br>Volume 形式的 ConfigMap 也支持动态更新</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master configmap ~]<span class="comment"># vim pod-configmap-2.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: pod-cm-2</span><br><span class="line">  namespace: default</span><br><span class="line">  labels: </span><br><span class="line">    app: myapp</span><br><span class="line">    tier: frontend</span><br><span class="line">  annotations:</span><br><span class="line">    magedu.com/created-by: <span class="string">"cluster admin"</span></span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: myapp</span><br><span class="line">    image: ikubernetes/myapp:v1</span><br><span class="line">    ports:</span><br><span class="line">    - name: http</span><br><span class="line">      containerPort: 80 </span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: nginxconf</span><br><span class="line">      mountPath: /etc/nginx/config.d/</span><br><span class="line">      readOnly: <span class="literal">true</span></span><br><span class="line">  volumes:</span><br><span class="line">  - name: nginxconf</span><br><span class="line">    configMap:</span><br><span class="line">      name: nginx-config</span><br><span class="line">[root@k8s-master configmap ~]<span class="comment"># kubectl apply -f pod-configmap-2.yaml</span></span><br><span class="line">pod/pod-cm-2 created</span><br><span class="line">[root@k8s-master configmap ~]<span class="comment"># kubectl get pods</span></span><br><span class="line">[root@k8s-master configmap ~]<span class="comment"># kubectl exec -it pod-cm-2 -- /bin/sh</span></span><br><span class="line">/ <span class="comment"># cd /etc/nginx/config.d</span></span><br><span class="line">/ <span class="comment"># cat nginx_port</span></span><br><span class="line">80</span><br><span class="line">/ <span class="comment"># cat server_name </span></span><br><span class="line">myapp.magedu.com</span><br><span class="line"></span><br><span class="line">[root@k8s-master configmap ~]<span class="comment"># kubectl edit cm nginx-config  #修改端口，再在容器中查看端口是否变化。</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  nginx_port: <span class="string">"800"</span></span><br><span class="line">  ......</span><br><span class="line">  </span><br><span class="line">/ <span class="comment"># cat nginx_port</span></span><br><span class="line">800</span><br><span class="line">[root@k8s-master configmap ~]<span class="comment"># kubectl delete -f pod-configmap2.yaml</span></span><br></pre></td></tr></table></figure>

<p>3、以nginx-www配置nginx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master configmap ~]<span class="comment"># vim pod-configmap3.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: pod-cm-3</span><br><span class="line">  namespace: default</span><br><span class="line">  labels: </span><br><span class="line">    app: myapp</span><br><span class="line">    tier: frontend</span><br><span class="line">  annotations:</span><br><span class="line">    magedu.com/created-by: <span class="string">"cluster admin"</span></span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: myapp</span><br><span class="line">    image: ikubernetes/myapp:v1</span><br><span class="line">    ports:</span><br><span class="line">    - name: http</span><br><span class="line">      containerPort: 80 </span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: nginxconf</span><br><span class="line">      mountPath: /etc/nginx/conf.d/</span><br><span class="line">      readOnly: <span class="literal">true</span></span><br><span class="line">  volumes:</span><br><span class="line">  - name: nginxconf</span><br><span class="line">    configMap:</span><br><span class="line">      name: nginx-www</span><br><span class="line">[root@k8s-master configmap ~]<span class="comment"># kubectl apply -f pod-configmap3.yaml</span></span><br><span class="line">pod/pod-cm-3 created</span><br><span class="line">[root@k8s-master configmap ~]<span class="comment"># kubectl get pods</span></span><br><span class="line">[root@k8s-master configmap]<span class="comment"># kubectl exec -it pod-cm-3 -- /bin/sh</span></span><br><span class="line">/ <span class="comment"># cd /etc/nginx/conf.d/</span></span><br><span class="line">/etc/nginx/conf.d <span class="comment"># ls</span></span><br><span class="line">www.conf</span><br><span class="line">/etc/nginx/conf.d <span class="comment"># cat www.conf </span></span><br><span class="line">server &#123;</span><br><span class="line">	server_name myapp.magedu.com;</span><br><span class="line">	listen 80;</span><br><span class="line">	root /data/web/html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx配置大全</title>
    <url>/2019/09/18/nginx%E9%85%8D%E7%BD%AE%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<h1 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nginx启动的进程数</span></span><br><span class="line">worker_processes 2; </span><br><span class="line">	</span><br><span class="line"><span class="comment"># 让不同的进程使用不同的cpu</span></span><br><span class="line">worker_cpu_affinity 01 10;  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个进程打开的最多文件描述符，不大于ulimit的限制</span></span><br><span class="line">worker_rlimit_nofile 65535;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">	<span class="comment">#epoll事件模型,处理效率高</span></span><br><span class="line">	use epoll;       </span><br><span class="line">	</span><br><span class="line">	<span class="comment">#nginx单个进程可连接的线程数</span></span><br><span class="line">	worker_connections  1024;   </span><br><span class="line">	</span><br><span class="line">	<span class="comment">#on:worker以串行方式处理连接,off:以并行方式,吞吐量大时建议关闭</span></span><br><span class="line">	multi_accept on;                </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="http区域设置"><a href="#http区域设置" class="headerlink" title="http区域设置"></a>http区域设置</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">	<span class="comment"># 调用mime.types，定义资源的媒体类型,#文件扩展名与类型映射表</span></span><br><span class="line">	include  mime.types;           </span><br><span class="line">	</span><br><span class="line">	<span class="comment"># 定义默认资源的媒体类型</span></span><br><span class="line">	default_type  application/octet-stream; </span><br><span class="line">	</span><br><span class="line">	<span class="comment"># 立即将数据从磁盘读到缓存,注意：如果图片显示不正常把这个改成off.所以当 Nginx 是一个静态文件服务器的时候，开启SENDFILE 配置项能大大提高 Nginx 的性能,但是当 Nginx 是作为一个反向代理来使用的时候，SENDFILE 则没什么用了，因为 Nginx 是反向代理的时候。 in_fd 就不是文件句柄而是 socket，此时就不符合 sendfile 函数的参数要求了。</span></span><br><span class="line">	sendfile  on;  </span><br><span class="line">	</span><br><span class="line">	<span class="comment"># 防止网络阻塞，必须在sendfile开启模式才有效，与tcp_nodelay on;相反，使用数据量大的时候使用</span></span><br><span class="line">	tcp_nopush on;                  </span><br><span class="line">	</span><br><span class="line">	<span class="comment"># 可以指定一条tcp连接上最多能发送的请求数量，超过keepalive_requests数量时server端会关闭tcp连接，默认是100</span></span><br><span class="line">	keepalive_requests 1000;	</span><br><span class="line">	</span><br><span class="line">	<span class="comment"># 给客户端分配keep-alive链接超时时间</span></span><br><span class="line">	keepalive_timeout  30;   </span><br><span class="line">	</span><br><span class="line">	<span class="comment"># 要包涵在keepalived参数才有效,禁用了Nagle 算法，适合数据少的时候使用</span></span><br><span class="line">	tcp_nodelay on;                 </span><br><span class="line">	</span><br><span class="line">	<span class="comment"># nginx是支持读取非nginx标准的用户自定义header的，但是需要在http或者server下开启header的下划线支持:</span></span><br><span class="line">	underscores_in_headers on;		</span><br><span class="line">	</span><br><span class="line">	<span class="comment"># 这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件inactive 是指经过多长时间文件没被请求后删除缓存。</span></span><br><span class="line">	open_file_cache max=102400 inactive=20s;</span><br><span class="line">	</span><br><span class="line">	 <span class="comment"># 这个是指多长时间检查一次缓存的有效信息。</span></span><br><span class="line">	open_file_cache_valid 30s;</span><br><span class="line">	</span><br><span class="line">	<span class="comment"># open_file_cache指令中的inactive 参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive 时间内一次没被使用，它将被移除。</span></span><br><span class="line">	<span class="comment"># max=64 表示设置缓存文件的最大数目为 64, 超过此数字后 Nginx 将按照 LRU 原则丢弃冷数据。</span></span><br><span class="line">	<span class="comment"># inactive=30d 与 open_file_cache_min_uses 8 表示如果在 30 天内某文件被访问的次数低于 8 次，那就将它从缓存中删除。</span></span><br><span class="line">	<span class="comment"># open_file_cache_valid 3m 表示每 3 分钟检查一次缓存中的文件元信息是否是最新的，如果不是则更新之。</span></span><br><span class="line">	open_file_cache_min_uses 1;   </span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 客户端请求头部的缓冲区大小，这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过 1k，不过由于一&gt;般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。</span></span><br><span class="line">	client_header_buffer_size 4k; </span><br><span class="line">	</span><br><span class="line">	 <span class="comment"># 设置读取客户端请求头超时时间，默认为60s，如果在此超时时间内客户端没有发送完请求头，则响应408（RequestTime-out）状态码给客户端</span></span><br><span class="line">	client_header_timeout 15;   </span><br><span class="line">	</span><br><span class="line">	<span class="comment"># 设置读取客户端内容体超时时间，默认为60s，此超时时间指的是两次成功读操作间隔时间，而不是发送整个请求体的超时时间，如果在此超时时间内客户端没有发送任何请求体，则响应408（RequestTime-out）状态码给客户端</span></span><br><span class="line">	client_body_timeout 15;   </span><br><span class="line">	</span><br><span class="line">	<span class="comment"># 上传文件大小限制，默认1M</span></span><br><span class="line">	client_max_body_size 10m;       </span><br><span class="line"></span><br><span class="line">	<span class="comment"># 告诉nginx关闭不响应的客户端连接。这将会释放那个客户端所占有的内存空间。</span></span><br><span class="line">	reset_timedout_connection on; </span><br><span class="line">	</span><br><span class="line">	<span class="comment"># 设置发送响应到客户端的超时时间，默认为60s，此超时时间指的也是两次成功写操作间隔时间，而不是发送整个响应的超时时间。如果在此超时时间内客户端没有接收任何响应，则Nginx关闭此连接。</span></span><br><span class="line">	send_timeout 15;     </span><br><span class="line">	</span><br><span class="line">	<span class="comment"># 并不会让nginx执行的速度更快，但它可以关闭在错误页面中的nginx版本数字，这样对于安全性是有好处的。</span></span><br><span class="line">	server_tokens off;              </span><br><span class="line"></span><br><span class="line">	<span class="comment"># limit模块，可防范一定量的DDOS攻击</span></span><br><span class="line">	<span class="comment"># 用来存储session会话的状态，如下是为session分配一个名为one的10M的内存存储区，限制了每秒只接受一个ip的一次请求 1r/s</span></span><br><span class="line">	limit_req_zone <span class="variable">$binary_remote_addr</span> zone=one:10m rate=1r/s;</span><br><span class="line">	limit_conn_zone <span class="variable">$binary_remote_addr</span> zone=addr:10m;</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 如果nginx是代理，因设置在代理上</span></span><br><span class="line">	gzip on;	</span><br><span class="line">	</span><br><span class="line">	<span class="comment"># 默认值: 0 ，不管页面多大都压缩# 设置允许压缩的页面最小字节数，页面字节数从header头中的Content-Length中进行获取。# 建议设置成大于1k的字节数，小于1k可能会越压越大。 即: gzip_min_length 1024</span></span><br><span class="line">	gzip_min_length  10k;	</span><br><span class="line">	</span><br><span class="line">	<span class="comment"># 设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。 例如 4 4k 代表以4k为单位，按照原始数据大小以4k为单位的4倍申请内存。 4 8k 代表以8k为单位，按照原始数据大小以8k为单位的4倍申请内存。# 如果没有设置，默认值是申请跟原始数据相同大小的内存空间去存储gzip压缩结果。</span></span><br><span class="line">	gzip_buffers     4 16k;	</span><br><span class="line">	gzip_http_version 1.1;</span><br><span class="line">	</span><br><span class="line">	<span class="comment"># 默认值：1(建议选择为4)# gzip压缩比/压缩级别，压缩级别 1-9，级别越高压缩率越大，当然压缩时间也就越长（传输快但比较消耗cpu）。</span></span><br><span class="line">	gzip_comp_level 6;	</span><br><span class="line">	</span><br><span class="line">	<span class="comment"># 默认值: gzip_types text/html (默认不对js/css文件进行压缩)# 压缩类型，匹配MIME类型进行压缩# 不能用通配符 text/*# (无论是否指定)text/html默认已经压缩 # 设置哪压缩种文本文件可参考 conf/mime.types</span></span><br><span class="line">	gzip_types  text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif  application/javascript application/json;</span><br><span class="line">	</span><br><span class="line">	<span class="comment"># 选择支持vary header；改选项可以让前端的缓存服务器缓存经过gzip压缩的页面; 这个可以不写，表示在传送数据时，给客户端说明我使用了gzip压缩。</span></span><br><span class="line">	gzip_vary on;	</span><br><span class="line">	gzip_proxied [off|expired|no-cache|no-store|private|no_last_modified|no_etag|auth|any] ...</span><br><span class="line">	<span class="comment"># 默认值：off</span></span><br><span class="line">	<span class="comment"># Nginx作为反向代理的时候启用，开启或者关闭后端服务器返回的结果，匹配的前提是后端服务器必须要返回包含"Via"的 header头。</span></span><br><span class="line">	<span class="comment">#off - 关闭所有的代理结果数据的压缩</span></span><br><span class="line">	<span class="comment">#expired - 启用压缩，如果header头中包含 "Expires" 头信息</span></span><br><span class="line">	<span class="comment">#no-cache - 启用压缩，如果header头中包含 "Cache-Control:no-cache" 头信息</span></span><br><span class="line">	<span class="comment">#no-store - 启用压缩，如果header头中包含 "Cache-Control:no-store" 头信息</span></span><br><span class="line">	<span class="comment">#private - 启用压缩，如果header头中包含 "Cache-Control:private" 头信息</span></span><br><span class="line">	<span class="comment">#no_last_modified - 启用压缩,如果header头中不包含 "Last-Modified" 头信息</span></span><br><span class="line">	<span class="comment">#no_etag - 启用压缩 ,如果header头中不包含 "ETag" 头信息</span></span><br><span class="line">	<span class="comment">#auth - 启用压缩 , 如果header头中包含 "Authorization" 头信息</span></span><br><span class="line">	<span class="comment">#any - 无条件启用压缩</span></span><br><span class="line"></span><br><span class="line">	gzip_disable <span class="string">"MSIE [1-5]\."</span>;</span><br><span class="line">	<span class="comment"># 禁用IE6的gzip压缩，又是因为杯具的IE6。当然，IE6目前依然广泛的存在，所以这里你也可以设置为“MSIE [1-5].”</span></span><br><span class="line">	<span class="comment"># IE6的某些版本对gzip的压缩支持很不好，会造成页面的假死，今天产品的同学就测试出了这个问题</span></span><br><span class="line">	<span class="comment">#后来调试后，发现是对img进行gzip后造成IE6的假死，把对img的gzip压缩去掉后就正常了</span></span><br><span class="line">	<span class="comment">#为了确保其它的IE6版本不出问题，所以建议加上gzip_disable的设置</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">#定义日子格式</span></span><br><span class="line">	log_format  main  <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">                      <span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">                      <span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</span><br><span class="line">    access_log  logs/access.log  main;</span><br></pre></td></tr></table></figure>

<h1 id="proxy-pass反向代理配置详解"><a href="#proxy-pass反向代理配置详解" class="headerlink" title="proxy_pass反向代理配置详解"></a>proxy_pass反向代理配置详解</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">	location / &#123;</span><br><span class="line">		proxy_pass  http://apachephp;</span><br><span class="line">		proxy_redirect     default;		<span class="comment">#重写后端返回的域名格式</span></span><br><span class="line">		proxy_set_header   Host             <span class="variable">$host</span>;	<span class="comment">#$host变量赋予Hsot，$host：客户端请求主机地址，$proxy_host：代理服务器请求的主机地址</span></span><br><span class="line">		proxy_set_header   X-Real-IP        <span class="variable">$remote_addr</span>;	<span class="comment">#$remote_addr：为客户端IP，把真实客户端IP写入到请求头X-Real-IP</span></span><br><span class="line">		proxy_set_header   X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;	</span><br><span class="line">		<span class="comment">#把请求头中的X-Forwarded-For与$remote_addr用逗号合起来，如果请求头中没有X-Forwarded-For则$proxy_add_x_forwarded_for为$remote_addr</span></span><br><span class="line">		<span class="comment">#X-Forwarded-For代表了客户端IP，反向代理如Nginx通过$proxy_add_x_forwarded_for添加此项，X-Forwarded-For的格式为X-Forwarded-For:real client ip, proxy ip 1, proxy ip N，每经过一个反向代理就在请求头X-Forwarded-For后追加反向代理IP</span></span><br><span class="line">		</span><br><span class="line">		proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;	<span class="comment">#注：支付功能服务最好关闭</span></span><br><span class="line">		<span class="comment">#error 和后端服务器建立连接时，或者向后端服务器发送请求时，或者从后端服务器接收响应头时，出现错误 </span></span><br><span class="line">		<span class="comment">#timeout 和后端服务器建立连接时，或者向后端服务器发送请求时，或者从后端服务器接收响应头时，出现超时 </span></span><br><span class="line">		<span class="comment">#invalid_header  后端服务器返回空响应或者非法响应头 </span></span><br><span class="line">		<span class="comment">#http_500  后端服务器返回的响应状态码为500 </span></span><br><span class="line">		<span class="comment">#http_502 # 后端服务器返回的响应状态码为502 </span></span><br><span class="line">		<span class="comment">#http_503 # 后端服务器返回的响应状态码为503 </span></span><br><span class="line">		<span class="comment">#http_504 # 后端服务器返回的响应状态码为504 </span></span><br><span class="line">		<span class="comment">#http_404 # 后端服务器返回的响应状态码为404 </span></span><br><span class="line">		<span class="comment">#off 	  # 停止将请求发送给下一台后端服务器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#proxy_buffers代理缓冲配置	</span></span><br><span class="line">		proxy_temp_file_write_size 64k;</span><br><span class="line">		proxy_max_temp_file_size 	0;		<span class="comment">#临时文件由proxy_max_temp_file_size和proxy_temp_file_write_size这两个指令决定。 proxy_temp_file_write_size是一次访问能写入的临时文件的大小，默认是proxy_buffer_size和proxy_buffers中设置的缓冲区大小的2倍，Linux下一般是8k。proxy_max_temp_file_size指定当响应内容大于proxy_buffers指定的缓冲区时, 写入硬盘的临时文件的大小. 如果超过了这个值, Nginx将与Proxy服务器同步的传递内容, 而不再缓冲到硬盘. 设置为0时, 则直接关闭硬盘缓冲.</span></span><br><span class="line">		proxy_connect_timeout      60;		<span class="comment">#与后端/上游服务器建立连接的超时时间，默认为60s，此时间不超过75s。</span></span><br><span class="line">		proxy_send_timeout         60;		<span class="comment">#设置往后端/上游服务器发送请求的超时时间，默认为60s，此超时时间指的是两次成功写操作间隔时间，而不是发送整个请求的超时时间，如果在此超时时间内上游服务器没有接收任何响应，则Nginx关闭此连接。</span></span><br><span class="line">		proxy_read_timeout         60;		<span class="comment">#设置从后端/上游服务器读取响应的超时时间，默认为60s，此超时时间指的是两次成功读操作间隔时间，而不是读取整个响应体的超时时间，如果在此超时时间内上游服务器没有发送任何响应，则Nginx关闭此连接</span></span><br><span class="line">		proxy_buffer_size          4k;		<span class="comment">#后端服务器的相应头会放到proxy_buffer_size当中，这个大小默认等于proxy_buffers当中的设置单个缓冲区的大小。 proxy_buffer_size只是响应头的缓冲区，没有必要也跟着设置太大。 proxy_buffer_size最好单独设置，一般设置个4k就够了</span></span><br><span class="line">		proxy_buffers              4 32k;	<span class="comment">#proxy_buffers的缓冲区大小一般会设置的比较大，以应付大网页。 proxy_buffers当中单个缓冲区的大小是由系统的内存页面大小决定的，Linux系统中一般为4k。 proxy_buffers由缓冲区数量和缓冲区大小组成的。总的大小为number*size。若某些请求的响应过大,则超过_buffers的部分将被缓冲到硬盘(缓冲目录由_temp_path指令指定), 当然这将会使读取响应的速度减慢, 影响用户体验. 可以使用proxy_max_temp_file_size指令关闭磁盘缓冲.</span></span><br><span class="line">		proxy_busy_buffers_size    64k;		<span class="comment">#proxy_busy_buffers_size不是独立的空间，他是proxy_buffers和proxy_buffer_size的一部分。nginx会在没有完全读完后端响应的时候就开始向客户端传送数据，所以它会划出一部分缓冲区来专门向客户端传送数据(这部分的大小是由proxy_busy_buffers_size来控制的，建议为proxy_buffers中单个缓冲区大小的2倍)，然后它继续从后端取数据，缓冲区满了之后就写到磁盘的临时文件中。</span></span><br><span class="line">		proxy_buffering						<span class="comment">#这个参数用来控制是否打开后端响应内容的缓冲区，如果这个设置为off，那么proxy_buffers和proxy_busy_buffers_size这两个指令将会失效。 但是无论proxy_buffering是否开启，对proxy_buffer_size都是生效的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#proxy_cache代理缓存设置</span></span><br><span class="line">	<span class="comment">#nginx的web缓存功能的主要是由proxy_cache、fastcgi_cache指令集和相关指令集完成，proxy_cache指令负责反向代理缓存后端服务器的静态内容，fastcgi_cache主要用来处理FastCGI动态进程缓存</span></span><br><span class="line">	http块： </span><br><span class="line">		proxy_cache_path /tmp/cache levels=1:2 keys_zone=nuget-cache:20m max_size=50g inactive=168h;</span><br><span class="line">		<span class="comment">#levels=1:2					#nginx会在上述配置的缓存文件路径下再创建两级目录，第一级目录命名为一个字符，第二级目录命名为2个字符</span></span><br><span class="line">		<span class="comment">#keys_zone=nuget-cache:20m	#定义缓存名称和共享内存大小，并mkdir创建nuget-cache缓存目录</span></span><br><span class="line">		<span class="comment">#max_size=50g				#最大缓存空间，如果缓存空间满，默认覆盖掉缓存时间最长的资源。</span></span><br><span class="line">		<span class="comment">#inactive=168h				#定义缓存时间</span></span><br><span class="line">	server/location块： </span><br><span class="line">		proxy_cache nuget-cache;	<span class="comment">#开启nuget-cache缓存</span></span><br><span class="line">		proxy_cache_valid 200 304 1h;		<span class="comment">#状态码200|304的过期为12h</span></span><br><span class="line">		proxy_cache_valid 404 1m;			<span class="comment">#状态码404的过期为1分钟</span></span><br><span class="line">		proxy_cache_valid any 1d;			<span class="comment">#其它的状态码过期为1天	</span></span><br><span class="line">		proxy_ignore_headers X-Accel-Expires Expires Cache-Control Set-Cookie; <span class="comment">#忽略后端头部缓存规则，这句代码很关键，尤其要忽略set-cookie</span></span><br><span class="line">		proxy_hide_header Cache-Control;	<span class="comment">#隐藏响应头部信息</span></span><br><span class="line">		add_header Cache-Control no-store；	<span class="comment">#设置响应头部请求</span></span><br><span class="line">		proxy_cache_key <span class="variable">$host</span><span class="variable">$uri</span><span class="variable">$is_args</span><span class="variable">$args</span>;<span class="comment">#设置nginx服务器在内存中为缓存数据建立索引时使用的关键字</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#upstream负载均衡配置</span></span><br><span class="line">	Nginx的upstream支持5种分配方式，下面将会详细介绍，其中，前三种为Nginx原生支持的分配方式，后两种为第三方支持的分配方式：</span><br><span class="line">	1、轮询         </span><br><span class="line">			轮询是upstream的默认分配方式，即每个请求按照时间顺序轮流分配到不同的后端服务器，如果某个后端服务器down掉后，能自动剔除。</span><br><span class="line">			upstream backend &#123;</span><br><span class="line">				server 192.168.1.101:8888;</span><br><span class="line">				server 192.168.1.102:8888;</span><br><span class="line">				server 192.168.1.103:8888;</span><br><span class="line">			&#125;</span><br><span class="line">	2、weight        </span><br><span class="line">			轮询的加强版，即可以指定轮询比率，weight和访问几率成正比，主要应用于后端服务器异质的场景下。</span><br><span class="line">			upstream backend &#123;</span><br><span class="line">				server 192.168.1.101 weight=1;</span><br><span class="line">				server 192.168.1.102 weight=2;</span><br><span class="line">				server 192.168.1.103 weight=3;</span><br><span class="line">			&#125;</span><br><span class="line">	3、ip_hash        </span><br><span class="line">			每个请求按照访问ip（即Nginx的前置服务器或者客户端IP）的<span class="built_in">hash</span>结果分配，这样每个访客会固定访问一个后端服务器，可以解决session一致问题。</span><br><span class="line">			upstream backend &#123;</span><br><span class="line">				ip_hash;</span><br><span class="line">				server 192.168.1.101:7777;</span><br><span class="line">				server 192.168.1.102:8888;</span><br><span class="line">				server 192.168.1.103:9999;</span><br><span class="line">			&#125;</span><br><span class="line">	4、fair        </span><br><span class="line">			fair顾名思义，公平地按照后端服务器的响应时间（rt）来分配请求，响应时间短即rt小的后端服务器优先分配请求。</span><br><span class="line">			upstream backend &#123;</span><br><span class="line">				server 192.168.1.101;</span><br><span class="line">				server 192.168.1.102;</span><br><span class="line">				server 192.168.1.103;</span><br><span class="line">				fair;</span><br><span class="line">			&#125;</span><br><span class="line">	5、url_hash</span><br><span class="line">			与ip_hash类似，但是按照访问url的<span class="built_in">hash</span>结果来分配请求，使得每个url定向到同一个后端服务器，主要应用于后端服务器为缓存时的场景下。</span><br><span class="line">			upstream backend &#123;</span><br><span class="line">				server 192.168.1.101;</span><br><span class="line">				server 192.168.1.102;</span><br><span class="line">				server 192.168.1.103;</span><br><span class="line">				<span class="built_in">hash</span> <span class="variable">$request_uri</span>;</span><br><span class="line">				hash_method crc32;</span><br><span class="line">			&#125;</span><br><span class="line">			其中，hash_method为使用的<span class="built_in">hash</span>算法，需要注意的是：此时，server语句中不能加weight等参数。</span><br><span class="line">	二、设备状态</span><br><span class="line">			down：表示当前server已停用</span><br><span class="line">			backup：表示当前server是备用服务器，只有其它非backup后端服务器都挂掉了或者很忙才会分配到请求。</span><br><span class="line">			weight：表示当前server负载权重，权重越大被请求几率越大。默认是1.</span><br><span class="line">			max_fails和fail_timeout一般会关联使用，如果某台server在fail_timeout时间内出现了max_fails次连接失败，那么Nginx会认为其已经挂掉了，从而在fail_timeout时间内不再去请求它，fail_timeout默认是10s，max_fails默认是1，即默认情况是只要发生错误就认为服务器挂掉了，如果将max_fails设置为0，则表示取消这项检查。</span><br><span class="line">			</span><br><span class="line">			举例说明如下：</span><br><span class="line">			upstream backend &#123;</span><br><span class="line">				server    backend1.example.com    weight=5;</span><br><span class="line">				server    127.0.0.1:8080          max_fails=3 fail_timeout=30s;</span><br><span class="line">				server    unix:/tmp/backend3      down;     </span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#location配置</span></span><br><span class="line">	已=开头表示精确匹配</span><br><span class="line">	如 A 中只匹配根目录结尾的请求，后面不能带任何字符串。</span><br><span class="line">	^~ 开头表示uri以某个常规字符串开头，不是正则匹配</span><br><span class="line">	~ 开头表示区分大小写的正则匹配;</span><br><span class="line">	~* 开头表示不区分大小写的正则匹配</span><br><span class="line">	/ 通用匹配, 如果没有其它匹配,任何请求都会匹配到</span><br><span class="line">	顺序 no优先级：(location =) &gt; (location 完整路径) &gt; (location ^~ 路径) &gt; (location ~,~* 正则顺序) &gt; (location 部分起始路径) &gt; (/)</span><br><span class="line"></span><br><span class="line">	<span class="comment">#将符合js,css文件的等设定expries缓存参数，要求浏览器缓存。</span></span><br><span class="line">	location ~* \.(jpg|jpeg|gif|bmp|png)&#123;</span><br><span class="line">		deny all;	<span class="comment">#location 标签，根目录下的.svn目录禁止访问</span></span><br><span class="line">		allow   219.237.222.30;	<span class="comment">##允许访问的ip</span></span><br><span class="line">		limit_rate_after 100k;	<span class="comment">#文件的大小限制</span></span><br><span class="line">		limit_rate 100k;	<span class="comment">#超过文件大小限制，限制速度为100k/s</span></span><br><span class="line">		client_max_body_size 1000m; <span class="comment">#请求数据大小限制的</span></span><br><span class="line">		log_not_found off;<span class="comment">#是否在error_log中记录不存在的错误。默认是</span></span><br><span class="line">		access_log off;</span><br><span class="line">		expires 1d;<span class="comment">#缓存1天</span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">#rewrite配置</span></span><br><span class="line">	<span class="comment">#格式：</span></span><br><span class="line">	rewrite regex replacement [flag]</span><br><span class="line"></span><br><span class="line">	<span class="comment">#正则：regex</span></span><br><span class="line">	. ： 匹配除换行符以外的任意字符</span><br><span class="line">	? ： 重复0次或1次</span><br><span class="line">	+ ： 重复1次或更多次</span><br><span class="line">	* ： 重复0次或更多次</span><br><span class="line">	\d ：匹配数字</span><br><span class="line">	^ ： 匹配字符串的开始</span><br><span class="line">	$ ： 匹配字符串的介绍</span><br><span class="line">	&#123;n&#125; ： 重复n次</span><br><span class="line">	&#123;n,&#125; ： 重复n次或更多次</span><br><span class="line">	[c] ： 匹配单个字符c</span><br><span class="line">	[a-z] ： 匹配a-z小写字母的任意一个</span><br><span class="line">	</span><br><span class="line">	<span class="comment">#变量赋值</span></span><br><span class="line">	<span class="built_in">set</span> <span class="variable">$hostx</span> <span class="string">""</span>; </span><br><span class="line">	<span class="built_in">set</span> <span class="variable">$addrs</span> <span class="string">""</span>; </span><br><span class="line"></span><br><span class="line">	<span class="comment">#用作if判断的全局变量replacement</span></span><br><span class="line">	<span class="variable">$args</span> ： 			这个变量等于请求行中的参数，同<span class="variable">$query_string</span></span><br><span class="line">	<span class="variable">$content_length</span> ： 	请求头中的Content-length字段。</span><br><span class="line">	<span class="variable">$content_type</span> ： 	请求头中的Content-Type字段。</span><br><span class="line">	<span class="variable">$document_root</span> ： 	当前请求在root指令中指定的值。</span><br><span class="line">	<span class="variable">$host</span> ： 			请求主机头字段，否则为服务器名称。</span><br><span class="line">	<span class="variable">$http_user_agent</span> ： 客户端agent信息</span><br><span class="line">	<span class="variable">$http_cookie</span> ： 	客户端cookie信息</span><br><span class="line">	<span class="variable">$limit_rate</span> ： 		这个变量可以限制连接速率。</span><br><span class="line">	<span class="variable">$request_method</span> ： 	客户端请求的动作，通常为GET或POST。</span><br><span class="line">	<span class="variable">$remote_addr</span> ： 	客户端的IP地址。</span><br><span class="line">	<span class="variable">$remote_port</span> ： 	客户端的端口。</span><br><span class="line">	<span class="variable">$remote_user</span> ： 	已经经过Auth Basic Module验证的用户名。</span><br><span class="line">	<span class="variable">$request_filename</span> ：当前请求的文件路径，由root或<span class="built_in">alias</span>指令与URI请求生成。</span><br><span class="line">	<span class="variable">$scheme</span> ： 			HTTP方法（如http，https）。</span><br><span class="line">	<span class="variable">$server_protocol</span> ： 请求使用的协议，通常是HTTP/1.0或HTTP/1.1。</span><br><span class="line">	<span class="variable">$server_addr</span> ： 	服务器地址，在完成一次系统调用后可以确定这个值。</span><br><span class="line">	<span class="variable">$server_name</span> ： 	服务器名称。</span><br><span class="line">	<span class="variable">$server_port</span> ： 	请求到达服务器的端口号。</span><br><span class="line">	<span class="variable">$request_uri</span> ： 	包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。</span><br><span class="line">	<span class="variable">$uri</span> ： 			不带请求参数的当前URI，<span class="variable">$uri</span>不包含主机名，如”/foo/bar.html”。</span><br><span class="line">	<span class="variable">$document_uri</span> ： 	与<span class="variable">$uri</span>相同。</span><br><span class="line"></span><br><span class="line">	<span class="comment">#标签flag</span></span><br><span class="line">	last : 相当于Apache的[L]标记，表示完成rewrite</span><br><span class="line">	<span class="built_in">break</span> : 停止执行当前虚拟主机的后续rewrite指令集</span><br><span class="line">	redirect : 返回302临时重定向，地址栏会显示跳转后的地址</span><br><span class="line">	permanent : 返回301永久重定向，地址栏会显示跳转后的地址</span><br><span class="line">	因为301和302不能简单的只返回状态码，还必须有重定向的URL，这就是<span class="built_in">return</span>指令无法返回301,302的原因了。这里 last 和 <span class="built_in">break</span> 区别有点难以理解：</span><br><span class="line">	<span class="comment">#注</span></span><br><span class="line">	last一般写在server和<span class="keyword">if</span>中，而<span class="built_in">break</span>一般使用在location中</span><br><span class="line">	last不终止重写后的url匹配，即新的url会再从server走一遍匹配流程，而<span class="built_in">break</span>终止重写后的匹配</span><br><span class="line">	<span class="built_in">break</span>和last都能组织继续执行后面的rewrite指令</span><br><span class="line">			</span><br><span class="line"><span class="comment">#https-ssl相关配置</span></span><br><span class="line">	方法一：</span><br><span class="line">	server &#123;</span><br><span class="line">		listen 80;</span><br><span class="line">		server_name bjubi.com;<span class="comment">#你的域名</span></span><br><span class="line">		rewrite ^(.*)$ https://<span class="variable">$host</span><span class="variable">$1</span> permanent;<span class="comment">#把http的域名请求转成https</span></span><br><span class="line">	&#125;</span><br><span class="line">	server &#123;</span><br><span class="line">	　　listen 443; <span class="comment">#监听端口</span></span><br><span class="line">	　　server_name bjubi.com;</span><br><span class="line">		root html；</span><br><span class="line"></span><br><span class="line">	　　ssl on; <span class="comment">#开启ssl</span></span><br><span class="line">	　　ssl_certificate /ls/app/nginx/conf/mgmtxiangqiankeys/server.crt; <span class="comment">#服务的证书</span></span><br><span class="line">	　　ssl_certificate_key /ls/app/nginx/conf/mgmtxiangqiankeys/server.key; <span class="comment">#服务端key</span></span><br><span class="line">	　　ssl_client_certificate /ls/app/nginx/conf/mgmtxiangqiankeys/ca.crt; <span class="comment">#客户端证书</span></span><br><span class="line">	　　ssl_session_timeout 5m; <span class="comment">#session超时时间</span></span><br><span class="line">	　　ssl_verify_client on; <span class="comment"># 开户客户端证书验证 </span></span><br><span class="line">	　　ssl_protocols SSLv2 SSLv3 TLSv1; <span class="comment">#允许SSL协议 </span></span><br><span class="line">	　　ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP; <span class="comment">#加密算法</span></span><br><span class="line">	　　ssl_prefer_server_ciphers on; <span class="comment">#启动加密算法</span></span><br><span class="line">	location / &#123;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	方法二：</span><br><span class="line">	<span class="keyword">if</span> (<span class="variable">$scheme</span> != https) &#123; <span class="comment"># 强制 HTTP 跳转至 HTTPS</span></span><br><span class="line">		<span class="comment"># host 与 server_name 等价, redirect/permanent 分别为临时跳转/永久跳转</span></span><br><span class="line">		rewrite ^(.*)$  https://<span class="variable">$host</span><span class="variable">$1</span> permanent; </span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"><span class="comment">#防盗链</span></span><br><span class="line">	<span class="comment">#防止别人直接从你网站引用图片等链接，消耗了你的资源和网络流量，那么我们的解决办法由几种： 1：水印，品牌宣传，你的带宽，服务器足够 2：防火墙，直接控制，前提是你知道IP来源 3：防盗链策略下面的方法是直接给予404的错误提示</span></span><br><span class="line">	location ~* .*\.(gif|jpg|png|jpeg)$ &#123;</span><br><span class="line">		expires     30d;</span><br><span class="line">		valid_referers *.hugao8.com www.hugao8.com m.hugao8.com *.baidu.com *.google.com;</span><br><span class="line">		<span class="keyword">if</span> (<span class="variable">$invalid_referer</span>) &#123;</span><br><span class="line">		<span class="comment">#rewrite ^/ http://ww4.sinaimg.cn/bmiddle/051bbed1gw1egjc4xl7srj20cm08aaa6.jpg;</span></span><br><span class="line">		<span class="built_in">return</span> 404;</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">#第一行：其中“gif|jpg|jpeg|png|bmp|swf”设置防盗链文件类型，自行修改，每个后缀用“|”符号分开！</span></span><br><span class="line">	<span class="comment">#第三行：就是白名单，允许文件链出的域名白名单，自行修改成您的域名！*.it300.com这个指的是子域名，域名与域名之间使用空格隔开！</span></span><br><span class="line">	<span class="comment">#第五行：这个图片是盗链返回的图片，也就是替换盗链网站所有盗链的图片。这个图片要放在没有设置防盗链的网站上，因为防盗链的作用，这个图片如果也放在防盗链网站上就会被当作防盗链显示不出来了，盗链者的网站所盗链图片会显示X符号。</span></span><br><span class="line">	<span class="comment">#第六行：直接返回404</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#后端服务器获取真实IP设置</span></span><br><span class="line">	nginx代理设置</span><br><span class="line">		proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line">		proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">		proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">	后端服务器设置（在http或server设置，需要加载模块--with-http_realip_module）</span><br><span class="line">		real_ip_header X-Forwarded-For;</span><br><span class="line">		<span class="comment">#X-Forwarded-For获取代理IP段的第一个IP为真实IP</span></span><br><span class="line">		set_real_ip_from 192.168.0.0/16;	</span><br><span class="line">		<span class="comment">#定义从哪台服务器获取代理IP段</span></span><br><span class="line">		real_ip_recursive on;</span><br><span class="line">		<span class="comment">#real_ip_recursive 是否递归地排除直至得到用户ip</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#跨域设置</span></span><br><span class="line">	<span class="comment">#跨域其实就是访问不同网站的内容，可以直接使用rewrite重写实现</span></span><br><span class="line">	<span class="comment">#以下是反向代理实现跨域</span></span><br><span class="line">	location /apis &#123;</span><br><span class="line">	rewrite  ^/apis/(.*)$ /<span class="variable">$1</span> <span class="built_in">break</span>;</span><br><span class="line">	proxy_pass   http://localhost:82;</span><br><span class="line">	&#125;</span><br><span class="line">		</span><br><span class="line">实例：</span><br><span class="line">user  www www;</span><br><span class="line">worker_processes  4;</span><br><span class="line">worker_cpu_affinity 0001 0010 0100 1000;</span><br><span class="line">error_log  logs/error.log;</span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line">worker_rlimit_nofile 10240;</span><br><span class="line">pid        logs/nginx.pid;</span><br><span class="line">events &#123;</span><br><span class="line">    use epoll;</span><br><span class="line">    worker_connections  4096;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    log_format  main  <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">                      <span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">                      <span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span></span><br><span class="line">                      <span class="string">'"$upstream_cache_status"'</span>;</span><br><span class="line">access_log  logs/access.log  main;</span><br><span class="line">server_tokens off;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    <span class="comment">#Compression Settings</span></span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_comp_level 6;</span><br><span class="line">    gzip_http_version 1.1;</span><br><span class="line">    gzip_proxied any;</span><br><span class="line">    gzip_min_length 1k;</span><br><span class="line">    gzip_buffers 16 8k;</span><br><span class="line">    gzip_types text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;</span><br><span class="line">    gzip_vary on;</span><br><span class="line">    <span class="comment">#end gzip</span></span><br><span class="line">    <span class="comment"># http_proxy Settings</span></span><br><span class="line">    client_max_body_size   10m;</span><br><span class="line">    client_body_buffer_size   128k;</span><br><span class="line">    proxy_connect_timeout   75;</span><br><span class="line">    proxy_send_timeout   75;</span><br><span class="line">    proxy_read_timeout   75;</span><br><span class="line">    proxy_buffer_size   4k;</span><br><span class="line">    proxy_buffers   4 32k;</span><br><span class="line">    proxy_busy_buffers_size   64k;</span><br><span class="line">	proxy_temp_file_write_size  64k;</span><br><span class="line">	proxy_buffering on;</span><br><span class="line">    proxy_temp_path /usr/<span class="built_in">local</span>/nginx1.10/proxy_temp;</span><br><span class="line">    proxy_cache_path /usr/<span class="built_in">local</span>/nginx1.10/proxy_cache levels=1:2 keys_zone=my-cache:100m max_size=1000m inactive=600m max_size=2g;</span><br><span class="line">    <span class="comment">#load balance Settings</span></span><br><span class="line">    upstream backend &#123;</span><br><span class="line">        sticky;</span><br><span class="line">        server 192.168.31.141:80 weight=1 max_fails=2 fail_timeout=10s;</span><br><span class="line">        server 192.168.31.250:80 weight=1 max_fails=2 fail_timeout=10s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#virtual host Settings</span></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        charset utf-8;</span><br><span class="line">        location  ~/purge(/.*) &#123;</span><br><span class="line">           allow 127.0.0.1;</span><br><span class="line">           allow 192.168.31.0/24;</span><br><span class="line">           deny all;</span><br><span class="line">           proxy_cache_purge my-cache <span class="variable">$host</span><span class="variable">$1</span><span class="variable">$is_args</span><span class="variable">$args</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        location / &#123;</span><br><span class="line">            index  index.php index.html index.htm;</span><br><span class="line">            proxy_pass        http://backend;</span><br><span class="line">            proxy_redirect off;</span><br><span class="line">            proxy_set_header  Host  <span class="variable">$host</span>;</span><br><span class="line">            proxy_set_header  X-Real-IP  <span class="variable">$remote_addr</span>;</span><br><span class="line">            proxy_set_header  X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            proxy_ignore_headers Set-Cookie;</span><br><span class="line">proxy_hide_header Set-Cookie;</span><br><span class="line">            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;</span><br><span class="line">        &#125;</span><br><span class="line">        location ~ .*\.(gif|jpg|png|html|htm|css|js|ico|swf|pdf)(.*) &#123;</span><br><span class="line">           proxy_pass  http://backend;</span><br><span class="line">           proxy_redirect off;</span><br><span class="line">           proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">           proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">           proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">           proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;</span><br><span class="line">           proxy_cache my-cache;</span><br><span class="line">           add_header Nginx-Cache <span class="variable">$upstream_cache_status</span>;</span><br><span class="line">           proxy_cache_valid 200 304 301 302 8h;</span><br><span class="line">           proxy_cache_valid 404 1m;</span><br><span class="line">           proxy_cache_valid any 1d;</span><br><span class="line">           proxy_cache_key <span class="variable">$host</span><span class="variable">$uri</span><span class="variable">$is_args</span><span class="variable">$args</span>;</span><br><span class="line">           expires 30d;</span><br><span class="line">        &#125;</span><br><span class="line">        location /nginx_status &#123;</span><br><span class="line">            stub_status on;</span><br><span class="line">            access_log off;</span><br><span class="line">            allow 192.168.31.0/24;</span><br><span class="line">            deny all;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux基础</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
</search>
